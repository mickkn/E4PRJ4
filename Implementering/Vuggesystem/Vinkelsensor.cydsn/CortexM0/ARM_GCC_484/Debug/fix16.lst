ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"fix16.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata
  18              		.align	2
  19              		.type	FOUR_DIV_PI, %object
  20              		.size	FOUR_DIV_PI, 4
  21              	FOUR_DIV_PI:
  22 0000 F3450100 		.word	83443
  23              		.align	2
  24              		.type	_FOUR_DIV_PI2, %object
  25              		.size	_FOUR_DIV_PI2, 4
  26              	_FOUR_DIV_PI2:
  27 0004 4098FFFF 		.word	-26560
  28              		.align	2
  29              		.type	X4_CORRECTION_COMPONENT, %object
  30              		.size	X4_CORRECTION_COMPONENT, 4
  31              	X4_CORRECTION_COMPONENT:
  32 0008 9A390000 		.word	14746
  33              		.align	2
  34              		.type	PI_DIV_4, %object
  35              		.size	PI_DIV_4, 4
  36              	PI_DIV_4:
  37 000c 0FC90000 		.word	51471
  38              		.align	2
  39              		.type	THREE_PI_DIV_4, %object
  40              		.size	THREE_PI_DIV_4, 4
  41              	THREE_PI_DIV_4:
  42 0010 2F5B0200 		.word	154415
  43              		.align	2
  44              		.type	fix16_max, %object
  45              		.size	fix16_max, 4
  46              	fix16_max:
  47 0014 FFFFFF7F 		.word	2147483647
  48              		.align	2
  49              		.type	fix16_min, %object
  50              		.size	fix16_min, 4
  51              	fix16_min:
  52 0018 00000080 		.word	-2147483648
  53              		.align	2
  54              		.type	fix16_overflow, %object
  55              		.size	fix16_overflow, 4
  56              	fix16_overflow:
  57 001c 00000080 		.word	-2147483648
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 2


  58              		.align	2
  59              		.type	fix16_pi, %object
  60              		.size	fix16_pi, 4
  61              	fix16_pi:
  62 0020 3F240300 		.word	205887
  63              		.align	2
  64              		.type	fix16_e, %object
  65              		.size	fix16_e, 4
  66              	fix16_e:
  67 0024 E1B70200 		.word	178145
  68              		.align	2
  69              		.type	fix16_one, %object
  70              		.size	fix16_one, 4
  71              	fix16_one:
  72 0028 00000100 		.word	65536
  73              		.section	.text.fix16_add,"ax",%progbits
  74              		.align	2
  75              		.global	fix16_add
  76              		.code	16
  77              		.thumb_func
  78              		.type	fix16_add, %function
  79              	fix16_add:
  80              	.LFB6:
  81              		.file 1 ".\\libfixmath\\fix16.c"
   1:.\libfixmath/fix16.c **** #include "fix16.h"
   2:.\libfixmath/fix16.c **** 
   3:.\libfixmath/fix16.c **** 
   4:.\libfixmath/fix16.c **** 
   5:.\libfixmath/fix16.c **** /* Subtraction and addition with overflow detection.
   6:.\libfixmath/fix16.c ****  * The versions without overflow detection are inlined in the header.
   7:.\libfixmath/fix16.c ****  */
   8:.\libfixmath/fix16.c **** #ifndef FIXMATH_NO_OVERFLOW
   9:.\libfixmath/fix16.c **** fix16_t fix16_add(fix16_t a, fix16_t b)
  10:.\libfixmath/fix16.c **** {
  82              		.loc 1 10 0
  83              		.cfi_startproc
  84 0000 80B5     		push	{r7, lr}
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 86B0     		sub	sp, sp, #24
  89              		.cfi_def_cfa_offset 32
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  92 0006 7860     		str	r0, [r7, #4]
  93 0008 3960     		str	r1, [r7]
  11:.\libfixmath/fix16.c ****   // Use unsigned integers because overflow with signed integers is
  12:.\libfixmath/fix16.c ****   // an undefined operation (http://www.airs.com/blog/archives/120).
  13:.\libfixmath/fix16.c ****   uint32_t _a = a, _b = b;
  94              		.loc 1 13 0
  95 000a 7B68     		ldr	r3, [r7, #4]
  96 000c 7B61     		str	r3, [r7, #20]
  97 000e 3B68     		ldr	r3, [r7]
  98 0010 3B61     		str	r3, [r7, #16]
  14:.\libfixmath/fix16.c ****   uint32_t sum = _a + _b;
  99              		.loc 1 14 0
 100 0012 7A69     		ldr	r2, [r7, #20]
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 3


 101 0014 3B69     		ldr	r3, [r7, #16]
 102 0016 D318     		add	r3, r2, r3
 103 0018 FB60     		str	r3, [r7, #12]
  15:.\libfixmath/fix16.c **** 
  16:.\libfixmath/fix16.c ****   // Overflow can only happen if sign of a == sign of b, and then
  17:.\libfixmath/fix16.c ****   // it causes sign of sum != sign of a.
  18:.\libfixmath/fix16.c ****   if (!((_a ^ _b) & 0x80000000) && ((_a ^ sum) & 0x80000000))
 104              		.loc 1 18 0
 105 001a 7A69     		ldr	r2, [r7, #20]
 106 001c 3B69     		ldr	r3, [r7, #16]
 107 001e 5340     		eor	r3, r2
 108 0020 06D4     		bmi	.L2
 109              		.loc 1 18 0 is_stmt 0 discriminator 1
 110 0022 7A69     		ldr	r2, [r7, #20]
 111 0024 FB68     		ldr	r3, [r7, #12]
 112 0026 5340     		eor	r3, r2
 113 0028 02D5     		bpl	.L2
  19:.\libfixmath/fix16.c ****     return fix16_overflow;
 114              		.loc 1 19 0 is_stmt 1
 115 002a 8023     		mov	r3, #128
 116 002c 1B06     		lsl	r3, r3, #24
 117 002e 00E0     		b	.L3
 118              	.L2:
  20:.\libfixmath/fix16.c ****   
  21:.\libfixmath/fix16.c ****   return sum;
 119              		.loc 1 21 0
 120 0030 FB68     		ldr	r3, [r7, #12]
 121              	.L3:
  22:.\libfixmath/fix16.c **** }
 122              		.loc 1 22 0
 123 0032 181C     		mov	r0, r3
 124 0034 BD46     		mov	sp, r7
 125 0036 06B0     		add	sp, sp, #24
 126              		@ sp needed
 127 0038 80BD     		pop	{r7, pc}
 128              		.cfi_endproc
 129              	.LFE6:
 130              		.size	fix16_add, .-fix16_add
 131 003a C046     		.section	.text.fix16_sub,"ax",%progbits
 132              		.align	2
 133              		.global	fix16_sub
 134              		.code	16
 135              		.thumb_func
 136              		.type	fix16_sub, %function
 137              	fix16_sub:
 138              	.LFB7:
  23:.\libfixmath/fix16.c **** 
  24:.\libfixmath/fix16.c **** fix16_t fix16_sub(fix16_t a, fix16_t b)
  25:.\libfixmath/fix16.c **** {
 139              		.loc 1 25 0
 140              		.cfi_startproc
 141 0000 80B5     		push	{r7, lr}
 142              		.cfi_def_cfa_offset 8
 143              		.cfi_offset 7, -8
 144              		.cfi_offset 14, -4
 145 0002 86B0     		sub	sp, sp, #24
 146              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 4


 147 0004 00AF     		add	r7, sp, #0
 148              		.cfi_def_cfa_register 7
 149 0006 7860     		str	r0, [r7, #4]
 150 0008 3960     		str	r1, [r7]
  26:.\libfixmath/fix16.c ****   uint32_t _a = a, _b = b;
 151              		.loc 1 26 0
 152 000a 7B68     		ldr	r3, [r7, #4]
 153 000c 7B61     		str	r3, [r7, #20]
 154 000e 3B68     		ldr	r3, [r7]
 155 0010 3B61     		str	r3, [r7, #16]
  27:.\libfixmath/fix16.c ****   uint32_t diff = _a - _b;
 156              		.loc 1 27 0
 157 0012 7A69     		ldr	r2, [r7, #20]
 158 0014 3B69     		ldr	r3, [r7, #16]
 159 0016 D31A     		sub	r3, r2, r3
 160 0018 FB60     		str	r3, [r7, #12]
  28:.\libfixmath/fix16.c **** 
  29:.\libfixmath/fix16.c ****   // Overflow can only happen if sign of a != sign of b, and then
  30:.\libfixmath/fix16.c ****   // it causes sign of diff != sign of a.
  31:.\libfixmath/fix16.c ****   if (((_a ^ _b) & 0x80000000) && ((_a ^ diff) & 0x80000000))
 161              		.loc 1 31 0
 162 001a 7A69     		ldr	r2, [r7, #20]
 163 001c 3B69     		ldr	r3, [r7, #16]
 164 001e 5340     		eor	r3, r2
 165 0020 06D5     		bpl	.L5
 166              		.loc 1 31 0 is_stmt 0 discriminator 1
 167 0022 7A69     		ldr	r2, [r7, #20]
 168 0024 FB68     		ldr	r3, [r7, #12]
 169 0026 5340     		eor	r3, r2
 170 0028 02D5     		bpl	.L5
  32:.\libfixmath/fix16.c ****     return fix16_overflow;
 171              		.loc 1 32 0 is_stmt 1
 172 002a 8023     		mov	r3, #128
 173 002c 1B06     		lsl	r3, r3, #24
 174 002e 00E0     		b	.L6
 175              	.L5:
  33:.\libfixmath/fix16.c ****   
  34:.\libfixmath/fix16.c ****   return diff;
 176              		.loc 1 34 0
 177 0030 FB68     		ldr	r3, [r7, #12]
 178              	.L6:
  35:.\libfixmath/fix16.c **** }
 179              		.loc 1 35 0
 180 0032 181C     		mov	r0, r3
 181 0034 BD46     		mov	sp, r7
 182 0036 06B0     		add	sp, sp, #24
 183              		@ sp needed
 184 0038 80BD     		pop	{r7, pc}
 185              		.cfi_endproc
 186              	.LFE7:
 187              		.size	fix16_sub, .-fix16_sub
 188 003a C046     		.section	.text.fix16_sadd,"ax",%progbits
 189              		.align	2
 190              		.global	fix16_sadd
 191              		.code	16
 192              		.thumb_func
 193              		.type	fix16_sadd, %function
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 5


 194              	fix16_sadd:
 195              	.LFB8:
  36:.\libfixmath/fix16.c **** 
  37:.\libfixmath/fix16.c **** /* Saturating arithmetic */
  38:.\libfixmath/fix16.c **** fix16_t fix16_sadd(fix16_t a, fix16_t b)
  39:.\libfixmath/fix16.c **** {
 196              		.loc 1 39 0
 197              		.cfi_startproc
 198 0000 80B5     		push	{r7, lr}
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 7, -8
 201              		.cfi_offset 14, -4
 202 0002 84B0     		sub	sp, sp, #16
 203              		.cfi_def_cfa_offset 24
 204 0004 00AF     		add	r7, sp, #0
 205              		.cfi_def_cfa_register 7
 206 0006 7860     		str	r0, [r7, #4]
 207 0008 3960     		str	r1, [r7]
  40:.\libfixmath/fix16.c ****   fix16_t result = fix16_add(a, b);
 208              		.loc 1 40 0
 209 000a 7A68     		ldr	r2, [r7, #4]
 210 000c 3B68     		ldr	r3, [r7]
 211 000e 101C     		mov	r0, r2
 212 0010 191C     		mov	r1, r3
 213 0012 FFF7FEFF 		bl	fix16_add
 214 0016 031C     		mov	r3, r0
 215 0018 FB60     		str	r3, [r7, #12]
  41:.\libfixmath/fix16.c **** 
  42:.\libfixmath/fix16.c ****   if (result == fix16_overflow)
 216              		.loc 1 42 0
 217 001a 8023     		mov	r3, #128
 218 001c 1B06     		lsl	r3, r3, #24
 219 001e FA68     		ldr	r2, [r7, #12]
 220 0020 9A42     		cmp	r2, r3
 221 0022 07D1     		bne	.L8
  43:.\libfixmath/fix16.c ****     return (a > 0) ? fix16_max : fix16_min;
 222              		.loc 1 43 0
 223 0024 7B68     		ldr	r3, [r7, #4]
 224 0026 002B     		cmp	r3, #0
 225 0028 01DD     		ble	.L9
 226              		.loc 1 43 0 is_stmt 0 discriminator 1
 227 002a 054B     		ldr	r3, .L12
 228 002c 01E0     		b	.L10
 229              	.L9:
 230              		.loc 1 43 0 discriminator 2
 231 002e 8023     		mov	r3, #128
 232 0030 1B06     		lsl	r3, r3, #24
 233              	.L10:
 234              		.loc 1 43 0 discriminator 3
 235 0032 00E0     		b	.L11
 236              	.L8:
  44:.\libfixmath/fix16.c **** 
  45:.\libfixmath/fix16.c ****   return result;
 237              		.loc 1 45 0 is_stmt 1
 238 0034 FB68     		ldr	r3, [r7, #12]
 239              	.L11:
  46:.\libfixmath/fix16.c **** }  
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 6


 240              		.loc 1 46 0
 241 0036 181C     		mov	r0, r3
 242 0038 BD46     		mov	sp, r7
 243 003a 04B0     		add	sp, sp, #16
 244              		@ sp needed
 245 003c 80BD     		pop	{r7, pc}
 246              	.L13:
 247 003e C046     		.align	2
 248              	.L12:
 249 0040 FFFFFF7F 		.word	2147483647
 250              		.cfi_endproc
 251              	.LFE8:
 252              		.size	fix16_sadd, .-fix16_sadd
 253              		.section	.text.fix16_ssub,"ax",%progbits
 254              		.align	2
 255              		.global	fix16_ssub
 256              		.code	16
 257              		.thumb_func
 258              		.type	fix16_ssub, %function
 259              	fix16_ssub:
 260              	.LFB9:
  47:.\libfixmath/fix16.c **** 
  48:.\libfixmath/fix16.c **** fix16_t fix16_ssub(fix16_t a, fix16_t b)
  49:.\libfixmath/fix16.c **** {
 261              		.loc 1 49 0
 262              		.cfi_startproc
 263 0000 80B5     		push	{r7, lr}
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 7, -8
 266              		.cfi_offset 14, -4
 267 0002 84B0     		sub	sp, sp, #16
 268              		.cfi_def_cfa_offset 24
 269 0004 00AF     		add	r7, sp, #0
 270              		.cfi_def_cfa_register 7
 271 0006 7860     		str	r0, [r7, #4]
 272 0008 3960     		str	r1, [r7]
  50:.\libfixmath/fix16.c ****   fix16_t result = fix16_sub(a, b);
 273              		.loc 1 50 0
 274 000a 7A68     		ldr	r2, [r7, #4]
 275 000c 3B68     		ldr	r3, [r7]
 276 000e 101C     		mov	r0, r2
 277 0010 191C     		mov	r1, r3
 278 0012 FFF7FEFF 		bl	fix16_sub
 279 0016 031C     		mov	r3, r0
 280 0018 FB60     		str	r3, [r7, #12]
  51:.\libfixmath/fix16.c **** 
  52:.\libfixmath/fix16.c ****   if (result == fix16_overflow)
 281              		.loc 1 52 0
 282 001a 8023     		mov	r3, #128
 283 001c 1B06     		lsl	r3, r3, #24
 284 001e FA68     		ldr	r2, [r7, #12]
 285 0020 9A42     		cmp	r2, r3
 286 0022 07D1     		bne	.L15
  53:.\libfixmath/fix16.c ****     return (a > 0) ? fix16_max : fix16_min;
 287              		.loc 1 53 0
 288 0024 7B68     		ldr	r3, [r7, #4]
 289 0026 002B     		cmp	r3, #0
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 7


 290 0028 01DD     		ble	.L16
 291              		.loc 1 53 0 is_stmt 0 discriminator 1
 292 002a 054B     		ldr	r3, .L19
 293 002c 01E0     		b	.L17
 294              	.L16:
 295              		.loc 1 53 0 discriminator 2
 296 002e 8023     		mov	r3, #128
 297 0030 1B06     		lsl	r3, r3, #24
 298              	.L17:
 299              		.loc 1 53 0 discriminator 3
 300 0032 00E0     		b	.L18
 301              	.L15:
  54:.\libfixmath/fix16.c **** 
  55:.\libfixmath/fix16.c ****   return result;
 302              		.loc 1 55 0 is_stmt 1
 303 0034 FB68     		ldr	r3, [r7, #12]
 304              	.L18:
  56:.\libfixmath/fix16.c **** }
 305              		.loc 1 56 0
 306 0036 181C     		mov	r0, r3
 307 0038 BD46     		mov	sp, r7
 308 003a 04B0     		add	sp, sp, #16
 309              		@ sp needed
 310 003c 80BD     		pop	{r7, pc}
 311              	.L20:
 312 003e C046     		.align	2
 313              	.L19:
 314 0040 FFFFFF7F 		.word	2147483647
 315              		.cfi_endproc
 316              	.LFE9:
 317              		.size	fix16_ssub, .-fix16_ssub
 318              		.global	__aeabi_lmul
 319              		.section	.text.fix16_mul,"ax",%progbits
 320              		.align	2
 321              		.global	fix16_mul
 322              		.code	16
 323              		.thumb_func
 324              		.type	fix16_mul, %function
 325              	fix16_mul:
 326              	.LFB10:
  57:.\libfixmath/fix16.c **** #endif
  58:.\libfixmath/fix16.c **** 
  59:.\libfixmath/fix16.c **** 
  60:.\libfixmath/fix16.c **** 
  61:.\libfixmath/fix16.c **** /* 64-bit implementation for fix16_mul. Fastest version for e.g. ARM Cortex M3.
  62:.\libfixmath/fix16.c ****  * Performs a 32*32 -> 64bit multiplication. The middle 32 bits are the result,
  63:.\libfixmath/fix16.c ****  * bottom 16 bits are used for rounding, and upper 16 bits are used for overflow
  64:.\libfixmath/fix16.c ****  * detection.
  65:.\libfixmath/fix16.c ****  */
  66:.\libfixmath/fix16.c ****  
  67:.\libfixmath/fix16.c **** #if !defined(FIXMATH_NO_64BIT) && !defined(FIXMATH_OPTIMIZE_8BIT)
  68:.\libfixmath/fix16.c **** fix16_t fix16_mul(fix16_t inArg0, fix16_t inArg1)
  69:.\libfixmath/fix16.c **** {
 327              		.loc 1 69 0
 328              		.cfi_startproc
 329 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 330              		.cfi_def_cfa_offset 20
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 8


 331              		.cfi_offset 4, -20
 332              		.cfi_offset 5, -16
 333              		.cfi_offset 6, -12
 334              		.cfi_offset 7, -8
 335              		.cfi_offset 14, -4
 336 0002 91B0     		sub	sp, sp, #68
 337              		.cfi_def_cfa_offset 88
 338 0004 00AF     		add	r7, sp, #0
 339              		.cfi_def_cfa_register 7
 340 0006 F862     		str	r0, [r7, #44]
 341 0008 B962     		str	r1, [r7, #40]
  70:.\libfixmath/fix16.c ****   int64_t product = (int64_t)inArg0 * inArg1;
 342              		.loc 1 70 0
 343 000a FB6A     		ldr	r3, [r7, #44]
 344 000c 3B62     		str	r3, [r7, #32]
 345 000e DB17     		asr	r3, r3, #31
 346 0010 7B62     		str	r3, [r7, #36]
 347 0012 BB6A     		ldr	r3, [r7, #40]
 348 0014 BB61     		str	r3, [r7, #24]
 349 0016 DB17     		asr	r3, r3, #31
 350 0018 FB61     		str	r3, [r7, #28]
 351 001a 386A     		ldr	r0, [r7, #32]
 352 001c 796A     		ldr	r1, [r7, #36]
 353 001e BA69     		ldr	r2, [r7, #24]
 354 0020 FB69     		ldr	r3, [r7, #28]
 355 0022 FFF7FEFF 		bl	__aeabi_lmul
 356 0026 031C     		mov	r3, r0
 357 0028 0C1C     		mov	r4, r1
 358 002a BB63     		str	r3, [r7, #56]
 359 002c FC63     		str	r4, [r7, #60]
  71:.\libfixmath/fix16.c ****   
  72:.\libfixmath/fix16.c ****   #ifndef FIXMATH_NO_OVERFLOW
  73:.\libfixmath/fix16.c ****   // The upper 17 bits should all be the same (the sign).
  74:.\libfixmath/fix16.c ****   uint32_t upper = (product >> 47);
 360              		.loc 1 74 0
 361 002e FB6B     		ldr	r3, [r7, #60]
 362 0030 DB13     		asr	r3, r3, #15
 363 0032 3B61     		str	r3, [r7, #16]
 364 0034 FB6B     		ldr	r3, [r7, #60]
 365 0036 DB17     		asr	r3, r3, #31
 366 0038 7B61     		str	r3, [r7, #20]
 367 003a 3B69     		ldr	r3, [r7, #16]
 368 003c 7B63     		str	r3, [r7, #52]
  75:.\libfixmath/fix16.c ****   #endif
  76:.\libfixmath/fix16.c ****   
  77:.\libfixmath/fix16.c ****   if (product < 0)
 369              		.loc 1 77 0
 370 003e FB6B     		ldr	r3, [r7, #60]
 371 0040 002B     		cmp	r3, #0
 372 0042 0FDA     		bge	.L22
  78:.\libfixmath/fix16.c ****   {
  79:.\libfixmath/fix16.c ****     #ifndef FIXMATH_NO_OVERFLOW
  80:.\libfixmath/fix16.c ****     if (~upper)
 373              		.loc 1 80 0
 374 0044 7B6B     		ldr	r3, [r7, #52]
 375 0046 0133     		add	r3, r3, #1
 376 0048 02D0     		beq	.L24
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 9


  81:.\libfixmath/fix16.c ****         return fix16_overflow;
 377              		.loc 1 81 0
 378 004a 8023     		mov	r3, #128
 379 004c 1B06     		lsl	r3, r3, #24
 380 004e 33E0     		b	.L25
 381              	.L24:
  82:.\libfixmath/fix16.c ****     #endif
  83:.\libfixmath/fix16.c ****     
  84:.\libfixmath/fix16.c ****     #ifndef FIXMATH_NO_ROUNDING
  85:.\libfixmath/fix16.c ****     // This adjustment is required in order to round -1/2 correctly
  86:.\libfixmath/fix16.c ****     product--;
 382              		.loc 1 86 0
 383 0050 B96B     		ldr	r1, [r7, #56]
 384 0052 FA6B     		ldr	r2, [r7, #60]
 385 0054 0123     		mov	r3, #1
 386 0056 5B42     		neg	r3, r3
 387 0058 DC17     		asr	r4, r3, #31
 388 005a 5B18     		add	r3, r3, r1
 389 005c 5441     		adc	r4, r4, r2
 390 005e BB63     		str	r3, [r7, #56]
 391 0060 FC63     		str	r4, [r7, #60]
 392 0062 05E0     		b	.L26
 393              	.L22:
  87:.\libfixmath/fix16.c ****     #endif
  88:.\libfixmath/fix16.c ****   }
  89:.\libfixmath/fix16.c ****   else
  90:.\libfixmath/fix16.c ****   {
  91:.\libfixmath/fix16.c ****     #ifndef FIXMATH_NO_OVERFLOW
  92:.\libfixmath/fix16.c ****     if (upper)
 394              		.loc 1 92 0
 395 0064 7B6B     		ldr	r3, [r7, #52]
 396 0066 002B     		cmp	r3, #0
 397 0068 02D0     		beq	.L26
  93:.\libfixmath/fix16.c ****         return fix16_overflow;
 398              		.loc 1 93 0
 399 006a 8023     		mov	r3, #128
 400 006c 1B06     		lsl	r3, r3, #24
 401 006e 23E0     		b	.L25
 402              	.L26:
  94:.\libfixmath/fix16.c ****     #endif
  95:.\libfixmath/fix16.c ****   }
  96:.\libfixmath/fix16.c ****   
  97:.\libfixmath/fix16.c ****   #ifdef FIXMATH_NO_ROUNDING
  98:.\libfixmath/fix16.c ****   return product >> 16;
  99:.\libfixmath/fix16.c ****   #else
 100:.\libfixmath/fix16.c ****   fix16_t result = product >> 16;
 403              		.loc 1 100 0
 404 0070 FB6B     		ldr	r3, [r7, #60]
 405 0072 1B04     		lsl	r3, r3, #16
 406 0074 BA6B     		ldr	r2, [r7, #56]
 407 0076 120C     		lsr	r2, r2, #16
 408 0078 BA60     		str	r2, [r7, #8]
 409 007a B968     		ldr	r1, [r7, #8]
 410 007c 1943     		orr	r1, r3
 411 007e B960     		str	r1, [r7, #8]
 412 0080 FB6B     		ldr	r3, [r7, #60]
 413 0082 1B14     		asr	r3, r3, #16
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 10


 414 0084 FB60     		str	r3, [r7, #12]
 415 0086 BB68     		ldr	r3, [r7, #8]
 416 0088 3B63     		str	r3, [r7, #48]
 101:.\libfixmath/fix16.c ****   result += (product & 0x8000) >> 15;
 417              		.loc 1 101 0
 418 008a BA6B     		ldr	r2, [r7, #56]
 419 008c 8023     		mov	r3, #128
 420 008e 1B02     		lsl	r3, r3, #8
 421 0090 111C     		mov	r1, r2
 422 0092 1940     		and	r1, r3
 423 0094 3960     		str	r1, [r7]
 424 0096 FA6B     		ldr	r2, [r7, #60]
 425 0098 0023     		mov	r3, #0
 426 009a 111C     		mov	r1, r2
 427 009c 1940     		and	r1, r3
 428 009e 7960     		str	r1, [r7, #4]
 429 00a0 7A68     		ldr	r2, [r7, #4]
 430 00a2 5304     		lsl	r3, r2, #17
 431 00a4 3968     		ldr	r1, [r7]
 432 00a6 CD0B     		lsr	r5, r1, #15
 433 00a8 1D43     		orr	r5, r3
 434 00aa 7A68     		ldr	r2, [r7, #4]
 435 00ac D613     		asr	r6, r2, #15
 436 00ae 2A1C     		mov	r2, r5
 437 00b0 3B6B     		ldr	r3, [r7, #48]
 438 00b2 D318     		add	r3, r2, r3
 439 00b4 3B63     		str	r3, [r7, #48]
 102:.\libfixmath/fix16.c ****   
 103:.\libfixmath/fix16.c ****   return result;
 440              		.loc 1 103 0
 441 00b6 3B6B     		ldr	r3, [r7, #48]
 442              	.L25:
 104:.\libfixmath/fix16.c ****   #endif
 105:.\libfixmath/fix16.c **** }
 443              		.loc 1 105 0
 444 00b8 181C     		mov	r0, r3
 445 00ba BD46     		mov	sp, r7
 446 00bc 11B0     		add	sp, sp, #68
 447              		@ sp needed
 448 00be F0BD     		pop	{r4, r5, r6, r7, pc}
 449              		.cfi_endproc
 450              	.LFE10:
 451              		.size	fix16_mul, .-fix16_mul
 452              		.section	.text.fix16_smul,"ax",%progbits
 453              		.align	2
 454              		.global	fix16_smul
 455              		.code	16
 456              		.thumb_func
 457              		.type	fix16_smul, %function
 458              	fix16_smul:
 459              	.LFB11:
 106:.\libfixmath/fix16.c **** #endif
 107:.\libfixmath/fix16.c **** 
 108:.\libfixmath/fix16.c **** /* 32-bit implementation of fix16_mul. Potentially fast on 16-bit processors,
 109:.\libfixmath/fix16.c ****  * and this is a relatively good compromise for compilers that do not support
 110:.\libfixmath/fix16.c ****  * uint64_t. Uses 16*16->32bit multiplications.
 111:.\libfixmath/fix16.c ****  */
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 11


 112:.\libfixmath/fix16.c **** #if defined(FIXMATH_NO_64BIT) && !defined(FIXMATH_OPTIMIZE_8BIT)
 113:.\libfixmath/fix16.c **** fix16_t fix16_mul(fix16_t inArg0, fix16_t inArg1)
 114:.\libfixmath/fix16.c **** {
 115:.\libfixmath/fix16.c ****   // Each argument is divided to 16-bit parts.
 116:.\libfixmath/fix16.c ****   //          AB
 117:.\libfixmath/fix16.c ****   //      *   CD
 118:.\libfixmath/fix16.c ****   // -----------
 119:.\libfixmath/fix16.c ****   //          BD  16 * 16 -> 32 bit products
 120:.\libfixmath/fix16.c ****   //         CB
 121:.\libfixmath/fix16.c ****   //         AD
 122:.\libfixmath/fix16.c ****   //        AC
 123:.\libfixmath/fix16.c ****   //       |----| 64 bit product
 124:.\libfixmath/fix16.c ****   int32_t A = (inArg0 >> 16), C = (inArg1 >> 16);
 125:.\libfixmath/fix16.c ****   uint32_t B = (inArg0 & 0xFFFF), D = (inArg1 & 0xFFFF);
 126:.\libfixmath/fix16.c ****   
 127:.\libfixmath/fix16.c ****   int32_t AC = A*C;
 128:.\libfixmath/fix16.c ****   int32_t AD_CB = A*D + C*B;
 129:.\libfixmath/fix16.c ****   uint32_t BD = B*D;
 130:.\libfixmath/fix16.c ****   
 131:.\libfixmath/fix16.c ****   int32_t product_hi = AC + (AD_CB >> 16);
 132:.\libfixmath/fix16.c ****   
 133:.\libfixmath/fix16.c ****   // Handle carry from lower 32 bits to upper part of result.
 134:.\libfixmath/fix16.c ****   uint32_t ad_cb_temp = AD_CB << 16;
 135:.\libfixmath/fix16.c ****   uint32_t product_lo = BD + ad_cb_temp;
 136:.\libfixmath/fix16.c ****   if (product_lo < BD)
 137:.\libfixmath/fix16.c ****     product_hi++;
 138:.\libfixmath/fix16.c ****   
 139:.\libfixmath/fix16.c **** #ifndef FIXMATH_NO_OVERFLOW
 140:.\libfixmath/fix16.c ****   // The upper 17 bits should all be the same (the sign).
 141:.\libfixmath/fix16.c ****   if (product_hi >> 31 != product_hi >> 15)
 142:.\libfixmath/fix16.c ****     return fix16_overflow;
 143:.\libfixmath/fix16.c **** #endif
 144:.\libfixmath/fix16.c ****   
 145:.\libfixmath/fix16.c **** #ifdef FIXMATH_NO_ROUNDING
 146:.\libfixmath/fix16.c ****   return (product_hi << 16) | (product_lo >> 16);
 147:.\libfixmath/fix16.c **** #else
 148:.\libfixmath/fix16.c ****   // Subtracting 0x8000 (= 0.5) and then using signed right shift
 149:.\libfixmath/fix16.c ****   // achieves proper rounding to result-1, except in the corner
 150:.\libfixmath/fix16.c ****   // case of negative numbers and lowest word = 0x8000.
 151:.\libfixmath/fix16.c ****   // To handle that, we also have to subtract 1 for negative numbers.
 152:.\libfixmath/fix16.c ****   uint32_t product_lo_tmp = product_lo;
 153:.\libfixmath/fix16.c ****   product_lo -= 0x8000;
 154:.\libfixmath/fix16.c ****   product_lo -= (uint32_t)product_hi >> 31;
 155:.\libfixmath/fix16.c ****   if (product_lo > product_lo_tmp)
 156:.\libfixmath/fix16.c ****     product_hi--;
 157:.\libfixmath/fix16.c ****   
 158:.\libfixmath/fix16.c ****   // Discard the lowest 16 bits. Note that this is not exactly the same
 159:.\libfixmath/fix16.c ****   // as dividing by 0x10000. For example if product = -1, result will
 160:.\libfixmath/fix16.c ****   // also be -1 and not 0. This is compensated by adding +1 to the result
 161:.\libfixmath/fix16.c ****   // and compensating this in turn in the rounding above.
 162:.\libfixmath/fix16.c ****   fix16_t result = (product_hi << 16) | (product_lo >> 16);
 163:.\libfixmath/fix16.c ****   result += 1;
 164:.\libfixmath/fix16.c ****   return result;
 165:.\libfixmath/fix16.c **** #endif
 166:.\libfixmath/fix16.c **** }
 167:.\libfixmath/fix16.c **** #endif
 168:.\libfixmath/fix16.c **** 
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 12


 169:.\libfixmath/fix16.c **** /* 8-bit implementation of fix16_mul. Fastest on e.g. Atmel AVR.
 170:.\libfixmath/fix16.c ****  * Uses 8*8->16bit multiplications, and also skips any bytes that
 171:.\libfixmath/fix16.c ****  * are zero.
 172:.\libfixmath/fix16.c ****  */
 173:.\libfixmath/fix16.c **** #if defined(FIXMATH_OPTIMIZE_8BIT)
 174:.\libfixmath/fix16.c **** fix16_t fix16_mul(fix16_t inArg0, fix16_t inArg1)
 175:.\libfixmath/fix16.c **** {
 176:.\libfixmath/fix16.c ****   uint32_t _a = (inArg0 >= 0) ? inArg0 : (-inArg0);
 177:.\libfixmath/fix16.c ****   uint32_t _b = (inArg1 >= 0) ? inArg1 : (-inArg1);
 178:.\libfixmath/fix16.c ****   
 179:.\libfixmath/fix16.c ****   uint8_t va[4] = {_a, (_a >> 8), (_a >> 16), (_a >> 24)};
 180:.\libfixmath/fix16.c ****   uint8_t vb[4] = {_b, (_b >> 8), (_b >> 16), (_b >> 24)};
 181:.\libfixmath/fix16.c ****   
 182:.\libfixmath/fix16.c ****   uint32_t low = 0;
 183:.\libfixmath/fix16.c ****   uint32_t mid = 0;
 184:.\libfixmath/fix16.c ****   
 185:.\libfixmath/fix16.c ****   // Result column i depends on va[0..i] and vb[i..0]
 186:.\libfixmath/fix16.c **** 
 187:.\libfixmath/fix16.c ****   #ifndef FIXMATH_NO_OVERFLOW
 188:.\libfixmath/fix16.c ****   // i = 6
 189:.\libfixmath/fix16.c ****   if (va[3] && vb[3]) return fix16_overflow;
 190:.\libfixmath/fix16.c ****   #endif
 191:.\libfixmath/fix16.c ****   
 192:.\libfixmath/fix16.c ****   // i = 5
 193:.\libfixmath/fix16.c ****   if (va[2] && vb[3]) mid += (uint16_t)va[2] * vb[3];
 194:.\libfixmath/fix16.c ****   if (va[3] && vb[2]) mid += (uint16_t)va[3] * vb[2];
 195:.\libfixmath/fix16.c ****   mid <<= 8;
 196:.\libfixmath/fix16.c ****   
 197:.\libfixmath/fix16.c ****   // i = 4
 198:.\libfixmath/fix16.c ****   if (va[1] && vb[3]) mid += (uint16_t)va[1] * vb[3];
 199:.\libfixmath/fix16.c ****   if (va[2] && vb[2]) mid += (uint16_t)va[2] * vb[2];
 200:.\libfixmath/fix16.c ****   if (va[3] && vb[1]) mid += (uint16_t)va[3] * vb[1];
 201:.\libfixmath/fix16.c ****   
 202:.\libfixmath/fix16.c ****   #ifndef FIXMATH_NO_OVERFLOW
 203:.\libfixmath/fix16.c ****   if (mid & 0xFF000000) return fix16_overflow;
 204:.\libfixmath/fix16.c ****   #endif
 205:.\libfixmath/fix16.c ****   mid <<= 8;
 206:.\libfixmath/fix16.c ****   
 207:.\libfixmath/fix16.c ****   // i = 3
 208:.\libfixmath/fix16.c ****   if (va[0] && vb[3]) mid += (uint16_t)va[0] * vb[3];
 209:.\libfixmath/fix16.c ****   if (va[1] && vb[2]) mid += (uint16_t)va[1] * vb[2];
 210:.\libfixmath/fix16.c ****   if (va[2] && vb[1]) mid += (uint16_t)va[2] * vb[1];
 211:.\libfixmath/fix16.c ****   if (va[3] && vb[0]) mid += (uint16_t)va[3] * vb[0];
 212:.\libfixmath/fix16.c ****   
 213:.\libfixmath/fix16.c ****   #ifndef FIXMATH_NO_OVERFLOW
 214:.\libfixmath/fix16.c ****   if (mid & 0xFF000000) return fix16_overflow;
 215:.\libfixmath/fix16.c ****   #endif
 216:.\libfixmath/fix16.c ****   mid <<= 8;
 217:.\libfixmath/fix16.c ****   
 218:.\libfixmath/fix16.c ****   // i = 2
 219:.\libfixmath/fix16.c ****   if (va[0] && vb[2]) mid += (uint16_t)va[0] * vb[2];
 220:.\libfixmath/fix16.c ****   if (va[1] && vb[1]) mid += (uint16_t)va[1] * vb[1];
 221:.\libfixmath/fix16.c ****   if (va[2] && vb[0]) mid += (uint16_t)va[2] * vb[0];    
 222:.\libfixmath/fix16.c ****   
 223:.\libfixmath/fix16.c ****   // i = 1
 224:.\libfixmath/fix16.c ****   if (va[0] && vb[1]) low += (uint16_t)va[0] * vb[1];
 225:.\libfixmath/fix16.c ****   if (va[1] && vb[0]) low += (uint16_t)va[1] * vb[0];
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 13


 226:.\libfixmath/fix16.c ****   low <<= 8;
 227:.\libfixmath/fix16.c ****   
 228:.\libfixmath/fix16.c ****   // i = 0
 229:.\libfixmath/fix16.c ****   if (va[0] && vb[0]) low += (uint16_t)va[0] * vb[0];
 230:.\libfixmath/fix16.c ****   
 231:.\libfixmath/fix16.c ****   #ifndef FIXMATH_NO_ROUNDING
 232:.\libfixmath/fix16.c ****   low += 0x8000;
 233:.\libfixmath/fix16.c ****   #endif
 234:.\libfixmath/fix16.c ****   mid += (low >> 16);
 235:.\libfixmath/fix16.c ****   
 236:.\libfixmath/fix16.c ****   #ifndef FIXMATH_NO_OVERFLOW
 237:.\libfixmath/fix16.c ****   if (mid & 0x80000000)
 238:.\libfixmath/fix16.c ****     return fix16_overflow;
 239:.\libfixmath/fix16.c ****   #endif
 240:.\libfixmath/fix16.c ****   
 241:.\libfixmath/fix16.c ****   fix16_t result = mid;
 242:.\libfixmath/fix16.c ****   
 243:.\libfixmath/fix16.c ****   /* Figure out the sign of result */
 244:.\libfixmath/fix16.c ****   if ((inArg0 >= 0) != (inArg1 >= 0))
 245:.\libfixmath/fix16.c ****   {
 246:.\libfixmath/fix16.c ****     result = -result;
 247:.\libfixmath/fix16.c ****   }
 248:.\libfixmath/fix16.c ****   
 249:.\libfixmath/fix16.c ****   return result;
 250:.\libfixmath/fix16.c **** }
 251:.\libfixmath/fix16.c **** #endif
 252:.\libfixmath/fix16.c **** 
 253:.\libfixmath/fix16.c **** #ifndef FIXMATH_NO_OVERFLOW
 254:.\libfixmath/fix16.c **** /* Wrapper around fix16_mul to add saturating arithmetic. */
 255:.\libfixmath/fix16.c **** fix16_t fix16_smul(fix16_t inArg0, fix16_t inArg1) {
 460              		.loc 1 255 0
 461              		.cfi_startproc
 462 0000 80B5     		push	{r7, lr}
 463              		.cfi_def_cfa_offset 8
 464              		.cfi_offset 7, -8
 465              		.cfi_offset 14, -4
 466 0002 84B0     		sub	sp, sp, #16
 467              		.cfi_def_cfa_offset 24
 468 0004 00AF     		add	r7, sp, #0
 469              		.cfi_def_cfa_register 7
 470 0006 7860     		str	r0, [r7, #4]
 471 0008 3960     		str	r1, [r7]
 256:.\libfixmath/fix16.c ****   fix16_t result = fix16_mul(inArg0, inArg1);
 472              		.loc 1 256 0
 473 000a 7A68     		ldr	r2, [r7, #4]
 474 000c 3B68     		ldr	r3, [r7]
 475 000e 101C     		mov	r0, r2
 476 0010 191C     		mov	r1, r3
 477 0012 FFF7FEFF 		bl	fix16_mul
 478 0016 031C     		mov	r3, r0
 479 0018 FB60     		str	r3, [r7, #12]
 257:.\libfixmath/fix16.c ****   
 258:.\libfixmath/fix16.c ****   if (result == fix16_overflow)
 480              		.loc 1 258 0
 481 001a 8023     		mov	r3, #128
 482 001c 1B06     		lsl	r3, r3, #24
 483 001e FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 14


 484 0020 9A42     		cmp	r2, r3
 485 0022 0FD1     		bne	.L28
 259:.\libfixmath/fix16.c ****   {
 260:.\libfixmath/fix16.c ****     if ((inArg0 >= 0) == (inArg1 >= 0))
 486              		.loc 1 260 0
 487 0024 7B68     		ldr	r3, [r7, #4]
 488 0026 DB0F     		lsr	r3, r3, #31
 489 0028 DAB2     		uxtb	r2, r3
 490 002a 3B68     		ldr	r3, [r7]
 491 002c DB43     		mvn	r3, r3
 492 002e DB0F     		lsr	r3, r3, #31
 493 0030 DBB2     		uxtb	r3, r3
 494 0032 5340     		eor	r3, r2
 495 0034 DBB2     		uxtb	r3, r3
 496 0036 002B     		cmp	r3, #0
 497 0038 01D0     		beq	.L29
 261:.\libfixmath/fix16.c ****       return fix16_max;
 498              		.loc 1 261 0
 499 003a 054B     		ldr	r3, .L31
 500 003c 03E0     		b	.L30
 501              	.L29:
 262:.\libfixmath/fix16.c ****     else
 263:.\libfixmath/fix16.c ****       return fix16_min;
 502              		.loc 1 263 0
 503 003e 8023     		mov	r3, #128
 504 0040 1B06     		lsl	r3, r3, #24
 505 0042 00E0     		b	.L30
 506              	.L28:
 264:.\libfixmath/fix16.c ****   }
 265:.\libfixmath/fix16.c ****   
 266:.\libfixmath/fix16.c ****   return result;
 507              		.loc 1 266 0
 508 0044 FB68     		ldr	r3, [r7, #12]
 509              	.L30:
 267:.\libfixmath/fix16.c **** }
 510              		.loc 1 267 0
 511 0046 181C     		mov	r0, r3
 512 0048 BD46     		mov	sp, r7
 513 004a 04B0     		add	sp, sp, #16
 514              		@ sp needed
 515 004c 80BD     		pop	{r7, pc}
 516              	.L32:
 517 004e C046     		.align	2
 518              	.L31:
 519 0050 FFFFFF7F 		.word	2147483647
 520              		.cfi_endproc
 521              	.LFE11:
 522              		.size	fix16_smul, .-fix16_smul
 523              		.global	__aeabi_uidiv
 524              		.global	__clzsi2
 525              		.global	__aeabi_uidivmod
 526              		.section	.text.fix16_div,"ax",%progbits
 527              		.align	2
 528              		.global	fix16_div
 529              		.code	16
 530              		.thumb_func
 531              		.type	fix16_div, %function
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 15


 532              	fix16_div:
 533              	.LFB12:
 268:.\libfixmath/fix16.c **** #endif
 269:.\libfixmath/fix16.c **** 
 270:.\libfixmath/fix16.c **** /* 32-bit implementation of fix16_div. Fastest version for e.g. ARM Cortex M3.
 271:.\libfixmath/fix16.c ****  * Performs 32-bit divisions repeatedly to reduce the remainder. For this to
 272:.\libfixmath/fix16.c ****  * be efficient, the processor has to have 32-bit hardware division.
 273:.\libfixmath/fix16.c ****  */
 274:.\libfixmath/fix16.c **** #if !defined(FIXMATH_OPTIMIZE_8BIT)
 275:.\libfixmath/fix16.c **** #ifdef __GNUC__
 276:.\libfixmath/fix16.c **** // Count leading zeros, using processor-specific instruction if available.
 277:.\libfixmath/fix16.c **** #define clz(x) __builtin_clzl(x)
 278:.\libfixmath/fix16.c **** #else
 279:.\libfixmath/fix16.c **** static uint8_t clz(uint32_t x)
 280:.\libfixmath/fix16.c **** {
 281:.\libfixmath/fix16.c ****   uint8_t result = 0;
 282:.\libfixmath/fix16.c ****   if (x == 0) return 32;
 283:.\libfixmath/fix16.c ****   while (!(x & 0xF0000000)) { result += 4; x <<= 4; }
 284:.\libfixmath/fix16.c ****   while (!(x & 0x80000000)) { result += 1; x <<= 1; }
 285:.\libfixmath/fix16.c ****   return result;
 286:.\libfixmath/fix16.c **** }
 287:.\libfixmath/fix16.c **** #endif
 288:.\libfixmath/fix16.c **** 
 289:.\libfixmath/fix16.c **** fix16_t fix16_div(fix16_t a, fix16_t b)
 290:.\libfixmath/fix16.c **** {
 534              		.loc 1 290 0
 535              		.cfi_startproc
 536 0000 B0B5     		push	{r4, r5, r7, lr}
 537              		.cfi_def_cfa_offset 16
 538              		.cfi_offset 4, -16
 539              		.cfi_offset 5, -12
 540              		.cfi_offset 7, -8
 541              		.cfi_offset 14, -4
 542 0002 8EB0     		sub	sp, sp, #56
 543              		.cfi_def_cfa_offset 72
 544 0004 00AF     		add	r7, sp, #0
 545              		.cfi_def_cfa_register 7
 546 0006 7861     		str	r0, [r7, #20]
 547 0008 3961     		str	r1, [r7, #16]
 291:.\libfixmath/fix16.c ****   // This uses a hardware 32/32 bit division multiple times, until we have
 292:.\libfixmath/fix16.c ****   // computed all the bits in (a<<17)/b. Usually this takes 1-3 iterations.
 293:.\libfixmath/fix16.c ****   
 294:.\libfixmath/fix16.c ****   if (b == 0)
 548              		.loc 1 294 0
 549 000a 3B69     		ldr	r3, [r7, #16]
 550 000c 002B     		cmp	r3, #0
 551 000e 02D1     		bne	.L34
 295:.\libfixmath/fix16.c ****       return fix16_min;
 552              		.loc 1 295 0
 553 0010 8023     		mov	r3, #128
 554 0012 1B06     		lsl	r3, r3, #24
 555 0014 9CE0     		b	.L35
 556              	.L34:
 296:.\libfixmath/fix16.c ****   
 297:.\libfixmath/fix16.c ****   uint32_t remainder = (a >= 0) ? a : (-a);
 557              		.loc 1 297 0
 558 0016 7B69     		ldr	r3, [r7, #20]
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 16


 559 0018 D917     		asr	r1, r3, #31
 560 001a 5B18     		add	r3, r3, r1
 561 001c 4B40     		eor	r3, r1
 562 001e 7B63     		str	r3, [r7, #52]
 298:.\libfixmath/fix16.c ****   uint32_t divider = (b >= 0) ? b : (-b);
 563              		.loc 1 298 0
 564 0020 3B69     		ldr	r3, [r7, #16]
 565 0022 DA17     		asr	r2, r3, #31
 566 0024 9B18     		add	r3, r3, r2
 567 0026 5340     		eor	r3, r2
 568 0028 3B63     		str	r3, [r7, #48]
 299:.\libfixmath/fix16.c ****   uint32_t quotient = 0;
 569              		.loc 1 299 0
 570 002a 0023     		mov	r3, #0
 571 002c FB62     		str	r3, [r7, #44]
 300:.\libfixmath/fix16.c ****   int bit_pos = 17;
 572              		.loc 1 300 0
 573 002e 1123     		mov	r3, #17
 574 0030 BB62     		str	r3, [r7, #40]
 301:.\libfixmath/fix16.c ****   
 302:.\libfixmath/fix16.c ****   // Kick-start the division a bit.
 303:.\libfixmath/fix16.c ****   // This improves speed in the worst-case scenarios where N and D are large
 304:.\libfixmath/fix16.c ****   // It gets a lower estimate for the result by N/(D >> 17 + 1).
 305:.\libfixmath/fix16.c ****   if (divider & 0xFFF00000)
 575              		.loc 1 305 0
 576 0032 3B6B     		ldr	r3, [r7, #48]
 577 0034 1B0D     		lsr	r3, r3, #20
 578 0036 1B05     		lsl	r3, r3, #20
 579 0038 22D0     		beq	.L36
 580              	.LBB2:
 306:.\libfixmath/fix16.c ****   {
 307:.\libfixmath/fix16.c ****     uint32_t shifted_div = ((divider >> 17) + 1);
 581              		.loc 1 307 0
 582 003a 3B6B     		ldr	r3, [r7, #48]
 583 003c 5B0C     		lsr	r3, r3, #17
 584 003e 0133     		add	r3, r3, #1
 585 0040 FB61     		str	r3, [r7, #28]
 308:.\libfixmath/fix16.c ****     quotient = remainder / shifted_div;
 586              		.loc 1 308 0
 587 0042 786B     		ldr	r0, [r7, #52]
 588 0044 F969     		ldr	r1, [r7, #28]
 589 0046 FFF7FEFF 		bl	__aeabi_uidiv
 590 004a 031C     		mov	r3, r0
 591 004c FB62     		str	r3, [r7, #44]
 309:.\libfixmath/fix16.c ****     remainder -= ((uint64_t)quotient * divider) >> 17;
 592              		.loc 1 309 0
 593 004e FB6A     		ldr	r3, [r7, #44]
 594 0050 BB60     		str	r3, [r7, #8]
 595 0052 0023     		mov	r3, #0
 596 0054 FB60     		str	r3, [r7, #12]
 597 0056 3B6B     		ldr	r3, [r7, #48]
 598 0058 3B60     		str	r3, [r7]
 599 005a 0023     		mov	r3, #0
 600 005c 7B60     		str	r3, [r7, #4]
 601 005e B868     		ldr	r0, [r7, #8]
 602 0060 F968     		ldr	r1, [r7, #12]
 603 0062 3A68     		ldr	r2, [r7]
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 17


 604 0064 7B68     		ldr	r3, [r7, #4]
 605 0066 FFF7FEFF 		bl	__aeabi_lmul
 606 006a 021C     		mov	r2, r0
 607 006c 0B1C     		mov	r3, r1
 608 006e D903     		lsl	r1, r3, #15
 609 0070 540C     		lsr	r4, r2, #17
 610 0072 0C43     		orr	r4, r1
 611 0074 5D0C     		lsr	r5, r3, #17
 612 0076 231C     		mov	r3, r4
 613 0078 7A6B     		ldr	r2, [r7, #52]
 614 007a D31A     		sub	r3, r2, r3
 615 007c 7B63     		str	r3, [r7, #52]
 616              	.LBE2:
 310:.\libfixmath/fix16.c ****   }
 311:.\libfixmath/fix16.c ****   
 312:.\libfixmath/fix16.c ****   // If the divider is divisible by 2^n, take advantage of it.
 313:.\libfixmath/fix16.c ****   while (!(divider & 0xF) && bit_pos >= 4)
 617              		.loc 1 313 0
 618 007e 06E0     		b	.L37
 619              	.L36:
 620 0080 05E0     		b	.L37
 621              	.L39:
 314:.\libfixmath/fix16.c ****   {
 315:.\libfixmath/fix16.c ****     divider >>= 4;
 622              		.loc 1 315 0
 623 0082 3B6B     		ldr	r3, [r7, #48]
 624 0084 1B09     		lsr	r3, r3, #4
 625 0086 3B63     		str	r3, [r7, #48]
 316:.\libfixmath/fix16.c ****     bit_pos -= 4;
 626              		.loc 1 316 0
 627 0088 BB6A     		ldr	r3, [r7, #40]
 628 008a 043B     		sub	r3, r3, #4
 629 008c BB62     		str	r3, [r7, #40]
 630              	.L37:
 313:.\libfixmath/fix16.c ****   while (!(divider & 0xF) && bit_pos >= 4)
 631              		.loc 1 313 0 discriminator 1
 632 008e 3A6B     		ldr	r2, [r7, #48]
 633 0090 0F23     		mov	r3, #15
 634 0092 1340     		and	r3, r2
 635 0094 02D1     		bne	.L38
 313:.\libfixmath/fix16.c ****   while (!(divider & 0xF) && bit_pos >= 4)
 636              		.loc 1 313 0 is_stmt 0 discriminator 2
 637 0096 BB6A     		ldr	r3, [r7, #40]
 638 0098 032B     		cmp	r3, #3
 639 009a F2DC     		bgt	.L39
 640              	.L38:
 317:.\libfixmath/fix16.c ****   }
 318:.\libfixmath/fix16.c ****   
 319:.\libfixmath/fix16.c ****   while (remainder && bit_pos >= 0)
 641              		.loc 1 319 0 is_stmt 1
 642 009c 3CE0     		b	.L40
 643              	.L44:
 644              	.LBB3:
 320:.\libfixmath/fix16.c ****   {
 321:.\libfixmath/fix16.c ****     // Shift remainder as much as we can without overflowing
 322:.\libfixmath/fix16.c ****     int shift = clz(remainder);
 645              		.loc 1 322 0
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 18


 646 009e 786B     		ldr	r0, [r7, #52]
 647 00a0 FFF7FEFF 		bl	__clzsi2
 648 00a4 031C     		mov	r3, r0
 649 00a6 7B62     		str	r3, [r7, #36]
 323:.\libfixmath/fix16.c ****     if (shift > bit_pos) shift = bit_pos;
 650              		.loc 1 323 0
 651 00a8 7A6A     		ldr	r2, [r7, #36]
 652 00aa BB6A     		ldr	r3, [r7, #40]
 653 00ac 9A42     		cmp	r2, r3
 654 00ae 01DD     		ble	.L41
 655              		.loc 1 323 0 is_stmt 0 discriminator 1
 656 00b0 BB6A     		ldr	r3, [r7, #40]
 657 00b2 7B62     		str	r3, [r7, #36]
 658              	.L41:
 324:.\libfixmath/fix16.c ****     remainder <<= shift;
 659              		.loc 1 324 0 is_stmt 1
 660 00b4 7A6B     		ldr	r2, [r7, #52]
 661 00b6 7B6A     		ldr	r3, [r7, #36]
 662 00b8 111C     		mov	r1, r2
 663 00ba 9940     		lsl	r1, r1, r3
 664 00bc 0B1C     		mov	r3, r1
 665 00be 7B63     		str	r3, [r7, #52]
 325:.\libfixmath/fix16.c ****     bit_pos -= shift;
 666              		.loc 1 325 0
 667 00c0 BA6A     		ldr	r2, [r7, #40]
 668 00c2 7B6A     		ldr	r3, [r7, #36]
 669 00c4 D31A     		sub	r3, r2, r3
 670 00c6 BB62     		str	r3, [r7, #40]
 326:.\libfixmath/fix16.c ****     
 327:.\libfixmath/fix16.c ****     uint32_t div = remainder / divider;
 671              		.loc 1 327 0
 672 00c8 786B     		ldr	r0, [r7, #52]
 673 00ca 396B     		ldr	r1, [r7, #48]
 674 00cc FFF7FEFF 		bl	__aeabi_uidiv
 675 00d0 031C     		mov	r3, r0
 676 00d2 BB61     		str	r3, [r7, #24]
 328:.\libfixmath/fix16.c ****     remainder = remainder % divider;
 677              		.loc 1 328 0
 678 00d4 7B6B     		ldr	r3, [r7, #52]
 679 00d6 181C     		mov	r0, r3
 680 00d8 396B     		ldr	r1, [r7, #48]
 681 00da FFF7FEFF 		bl	__aeabi_uidivmod
 682 00de 0B1C     		mov	r3, r1
 683 00e0 7B63     		str	r3, [r7, #52]
 329:.\libfixmath/fix16.c ****     quotient += div << bit_pos;
 684              		.loc 1 329 0
 685 00e2 BA69     		ldr	r2, [r7, #24]
 686 00e4 BB6A     		ldr	r3, [r7, #40]
 687 00e6 111C     		mov	r1, r2
 688 00e8 9940     		lsl	r1, r1, r3
 689 00ea 0B1C     		mov	r3, r1
 690 00ec FA6A     		ldr	r2, [r7, #44]
 691 00ee D318     		add	r3, r2, r3
 692 00f0 FB62     		str	r3, [r7, #44]
 330:.\libfixmath/fix16.c **** 
 331:.\libfixmath/fix16.c ****     #ifndef FIXMATH_NO_OVERFLOW
 332:.\libfixmath/fix16.c ****     if (div & ~(0xFFFFFFFF >> bit_pos))
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 19


 693              		.loc 1 332 0
 694 00f2 0123     		mov	r3, #1
 695 00f4 5A42     		neg	r2, r3
 696 00f6 BB6A     		ldr	r3, [r7, #40]
 697 00f8 111C     		mov	r1, r2
 698 00fa D940     		lsr	r1, r1, r3
 699 00fc 0B1C     		mov	r3, r1
 700 00fe DB43     		mvn	r3, r3
 701 0100 BA69     		ldr	r2, [r7, #24]
 702 0102 1340     		and	r3, r2
 703 0104 02D0     		beq	.L42
 333:.\libfixmath/fix16.c ****         return fix16_overflow;
 704              		.loc 1 333 0
 705 0106 8023     		mov	r3, #128
 706 0108 1B06     		lsl	r3, r3, #24
 707 010a 21E0     		b	.L35
 708              	.L42:
 334:.\libfixmath/fix16.c ****     #endif
 335:.\libfixmath/fix16.c ****     
 336:.\libfixmath/fix16.c ****     remainder <<= 1;
 709              		.loc 1 336 0
 710 010c 7B6B     		ldr	r3, [r7, #52]
 711 010e 5B00     		lsl	r3, r3, #1
 712 0110 7B63     		str	r3, [r7, #52]
 337:.\libfixmath/fix16.c ****     bit_pos--;
 713              		.loc 1 337 0
 714 0112 BB6A     		ldr	r3, [r7, #40]
 715 0114 013B     		sub	r3, r3, #1
 716 0116 BB62     		str	r3, [r7, #40]
 717              	.L40:
 718              	.LBE3:
 319:.\libfixmath/fix16.c ****   while (remainder && bit_pos >= 0)
 719              		.loc 1 319 0 discriminator 1
 720 0118 7B6B     		ldr	r3, [r7, #52]
 721 011a 002B     		cmp	r3, #0
 722 011c 02D0     		beq	.L43
 319:.\libfixmath/fix16.c ****   while (remainder && bit_pos >= 0)
 723              		.loc 1 319 0 is_stmt 0 discriminator 2
 724 011e BB6A     		ldr	r3, [r7, #40]
 725 0120 002B     		cmp	r3, #0
 726 0122 BCDA     		bge	.L44
 727              	.L43:
 338:.\libfixmath/fix16.c ****   }
 339:.\libfixmath/fix16.c ****   
 340:.\libfixmath/fix16.c ****   #ifndef FIXMATH_NO_ROUNDING
 341:.\libfixmath/fix16.c ****   // Quotient is always positive so rounding is easy
 342:.\libfixmath/fix16.c ****   quotient++;
 728              		.loc 1 342 0 is_stmt 1
 729 0124 FB6A     		ldr	r3, [r7, #44]
 730 0126 0133     		add	r3, r3, #1
 731 0128 FB62     		str	r3, [r7, #44]
 343:.\libfixmath/fix16.c ****   #endif
 344:.\libfixmath/fix16.c ****   
 345:.\libfixmath/fix16.c ****   fix16_t result = quotient >> 1;
 732              		.loc 1 345 0
 733 012a FB6A     		ldr	r3, [r7, #44]
 734 012c 5B08     		lsr	r3, r3, #1
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 20


 735 012e 3B62     		str	r3, [r7, #32]
 346:.\libfixmath/fix16.c ****   
 347:.\libfixmath/fix16.c ****   // Figure out the sign of the result
 348:.\libfixmath/fix16.c ****   if ((a ^ b) & 0x80000000)
 736              		.loc 1 348 0
 737 0130 7A69     		ldr	r2, [r7, #20]
 738 0132 3B69     		ldr	r3, [r7, #16]
 739 0134 5340     		eor	r3, r2
 740 0136 0AD5     		bpl	.L45
 349:.\libfixmath/fix16.c ****   {
 350:.\libfixmath/fix16.c ****     #ifndef FIXMATH_NO_OVERFLOW
 351:.\libfixmath/fix16.c ****     if (result == fix16_min)
 741              		.loc 1 351 0
 742 0138 8023     		mov	r3, #128
 743 013a 1B06     		lsl	r3, r3, #24
 744 013c 3A6A     		ldr	r2, [r7, #32]
 745 013e 9A42     		cmp	r2, r3
 746 0140 02D1     		bne	.L46
 352:.\libfixmath/fix16.c ****         return fix16_overflow;
 747              		.loc 1 352 0
 748 0142 8023     		mov	r3, #128
 749 0144 1B06     		lsl	r3, r3, #24
 750 0146 03E0     		b	.L35
 751              	.L46:
 353:.\libfixmath/fix16.c ****     #endif
 354:.\libfixmath/fix16.c ****     
 355:.\libfixmath/fix16.c ****     result = -result;
 752              		.loc 1 355 0
 753 0148 3B6A     		ldr	r3, [r7, #32]
 754 014a 5B42     		neg	r3, r3
 755 014c 3B62     		str	r3, [r7, #32]
 756              	.L45:
 356:.\libfixmath/fix16.c ****   }
 357:.\libfixmath/fix16.c ****   
 358:.\libfixmath/fix16.c ****   return result;
 757              		.loc 1 358 0
 758 014e 3B6A     		ldr	r3, [r7, #32]
 759              	.L35:
 359:.\libfixmath/fix16.c **** }
 760              		.loc 1 359 0
 761 0150 181C     		mov	r0, r3
 762 0152 BD46     		mov	sp, r7
 763 0154 0EB0     		add	sp, sp, #56
 764              		@ sp needed
 765 0156 B0BD     		pop	{r4, r5, r7, pc}
 766              		.cfi_endproc
 767              	.LFE12:
 768              		.size	fix16_div, .-fix16_div
 769              		.section	.text.fix16_sdiv,"ax",%progbits
 770              		.align	2
 771              		.global	fix16_sdiv
 772              		.code	16
 773              		.thumb_func
 774              		.type	fix16_sdiv, %function
 775              	fix16_sdiv:
 776              	.LFB13:
 360:.\libfixmath/fix16.c **** #endif
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 21


 361:.\libfixmath/fix16.c **** 
 362:.\libfixmath/fix16.c **** /* Alternative 32-bit implementation of fix16_div. Fastest on e.g. Atmel AVR.
 363:.\libfixmath/fix16.c ****  * This does the division manually, and is therefore good for processors that
 364:.\libfixmath/fix16.c ****  * do not have hardware division.
 365:.\libfixmath/fix16.c ****  */
 366:.\libfixmath/fix16.c **** #if defined(FIXMATH_OPTIMIZE_8BIT)
 367:.\libfixmath/fix16.c **** fix16_t fix16_div(fix16_t a, fix16_t b)
 368:.\libfixmath/fix16.c **** {
 369:.\libfixmath/fix16.c ****   // This uses the basic binary restoring division algorithm.
 370:.\libfixmath/fix16.c ****   // It appears to be faster to do the whole division manually than
 371:.\libfixmath/fix16.c ****   // trying to compose a 64-bit divide out of 32-bit divisions on
 372:.\libfixmath/fix16.c ****   // platforms without hardware divide.
 373:.\libfixmath/fix16.c ****   
 374:.\libfixmath/fix16.c ****   if (b == 0)
 375:.\libfixmath/fix16.c ****     return fix16_min;
 376:.\libfixmath/fix16.c ****   
 377:.\libfixmath/fix16.c ****   uint32_t remainder = (a >= 0) ? a : (-a);
 378:.\libfixmath/fix16.c ****   uint32_t divider = (b >= 0) ? b : (-b);
 379:.\libfixmath/fix16.c **** 
 380:.\libfixmath/fix16.c ****   uint32_t quotient = 0;
 381:.\libfixmath/fix16.c ****   uint32_t bit = 0x10000;
 382:.\libfixmath/fix16.c ****   
 383:.\libfixmath/fix16.c ****   /* The algorithm requires D >= R */
 384:.\libfixmath/fix16.c ****   while (divider < remainder)
 385:.\libfixmath/fix16.c ****   {
 386:.\libfixmath/fix16.c ****     divider <<= 1;
 387:.\libfixmath/fix16.c ****     bit <<= 1;
 388:.\libfixmath/fix16.c ****   }
 389:.\libfixmath/fix16.c ****   
 390:.\libfixmath/fix16.c ****   #ifndef FIXMATH_NO_OVERFLOW
 391:.\libfixmath/fix16.c ****   if (!bit)
 392:.\libfixmath/fix16.c ****     return fix16_overflow;
 393:.\libfixmath/fix16.c ****   #endif
 394:.\libfixmath/fix16.c ****   
 395:.\libfixmath/fix16.c ****   if (divider & 0x80000000)
 396:.\libfixmath/fix16.c ****   {
 397:.\libfixmath/fix16.c ****     // Perform one step manually to avoid overflows later.
 398:.\libfixmath/fix16.c ****     // We know that divider's bottom bit is 0 here.
 399:.\libfixmath/fix16.c ****     if (remainder >= divider)
 400:.\libfixmath/fix16.c ****     {
 401:.\libfixmath/fix16.c ****         quotient |= bit;
 402:.\libfixmath/fix16.c ****         remainder -= divider;
 403:.\libfixmath/fix16.c ****     }
 404:.\libfixmath/fix16.c ****     divider >>= 1;
 405:.\libfixmath/fix16.c ****     bit >>= 1;
 406:.\libfixmath/fix16.c ****   }
 407:.\libfixmath/fix16.c ****   
 408:.\libfixmath/fix16.c ****   /* Main division loop */
 409:.\libfixmath/fix16.c ****   while (bit && remainder)
 410:.\libfixmath/fix16.c ****   {
 411:.\libfixmath/fix16.c ****     if (remainder >= divider)
 412:.\libfixmath/fix16.c ****     {
 413:.\libfixmath/fix16.c ****         quotient |= bit;
 414:.\libfixmath/fix16.c ****         remainder -= divider;
 415:.\libfixmath/fix16.c ****     }
 416:.\libfixmath/fix16.c ****     
 417:.\libfixmath/fix16.c ****     remainder <<= 1;
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 22


 418:.\libfixmath/fix16.c ****     bit >>= 1;
 419:.\libfixmath/fix16.c ****   }   
 420:.\libfixmath/fix16.c ****       
 421:.\libfixmath/fix16.c ****   #ifndef FIXMATH_NO_ROUNDING
 422:.\libfixmath/fix16.c ****   if (remainder >= divider)
 423:.\libfixmath/fix16.c ****   {
 424:.\libfixmath/fix16.c ****     quotient++;
 425:.\libfixmath/fix16.c ****   }
 426:.\libfixmath/fix16.c ****   #endif
 427:.\libfixmath/fix16.c ****   
 428:.\libfixmath/fix16.c ****   fix16_t result = quotient;
 429:.\libfixmath/fix16.c ****   
 430:.\libfixmath/fix16.c ****   /* Figure out the sign of result */
 431:.\libfixmath/fix16.c ****   if ((a ^ b) & 0x80000000)
 432:.\libfixmath/fix16.c ****   {
 433:.\libfixmath/fix16.c ****     #ifndef FIXMATH_NO_OVERFLOW
 434:.\libfixmath/fix16.c ****     if (result == fix16_min)
 435:.\libfixmath/fix16.c ****         return fix16_overflow;
 436:.\libfixmath/fix16.c ****     #endif
 437:.\libfixmath/fix16.c ****     
 438:.\libfixmath/fix16.c ****     result = -result;
 439:.\libfixmath/fix16.c ****   }
 440:.\libfixmath/fix16.c ****   
 441:.\libfixmath/fix16.c ****   return result;
 442:.\libfixmath/fix16.c **** }
 443:.\libfixmath/fix16.c **** #endif
 444:.\libfixmath/fix16.c **** 
 445:.\libfixmath/fix16.c **** #ifndef FIXMATH_NO_OVERFLOW
 446:.\libfixmath/fix16.c **** /* Wrapper around fix16_div to add saturating arithmetic. */
 447:.\libfixmath/fix16.c **** fix16_t fix16_sdiv(fix16_t inArg0, fix16_t inArg1) {
 777              		.loc 1 447 0
 778              		.cfi_startproc
 779 0000 80B5     		push	{r7, lr}
 780              		.cfi_def_cfa_offset 8
 781              		.cfi_offset 7, -8
 782              		.cfi_offset 14, -4
 783 0002 84B0     		sub	sp, sp, #16
 784              		.cfi_def_cfa_offset 24
 785 0004 00AF     		add	r7, sp, #0
 786              		.cfi_def_cfa_register 7
 787 0006 7860     		str	r0, [r7, #4]
 788 0008 3960     		str	r1, [r7]
 448:.\libfixmath/fix16.c ****   fix16_t result = fix16_div(inArg0, inArg1);
 789              		.loc 1 448 0
 790 000a 7A68     		ldr	r2, [r7, #4]
 791 000c 3B68     		ldr	r3, [r7]
 792 000e 101C     		mov	r0, r2
 793 0010 191C     		mov	r1, r3
 794 0012 FFF7FEFF 		bl	fix16_div
 795 0016 031C     		mov	r3, r0
 796 0018 FB60     		str	r3, [r7, #12]
 449:.\libfixmath/fix16.c ****   
 450:.\libfixmath/fix16.c ****   if (result == fix16_overflow)
 797              		.loc 1 450 0
 798 001a 8023     		mov	r3, #128
 799 001c 1B06     		lsl	r3, r3, #24
 800 001e FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 23


 801 0020 9A42     		cmp	r2, r3
 802 0022 0FD1     		bne	.L48
 451:.\libfixmath/fix16.c ****   {
 452:.\libfixmath/fix16.c ****     if ((inArg0 >= 0) == (inArg1 >= 0))
 803              		.loc 1 452 0
 804 0024 7B68     		ldr	r3, [r7, #4]
 805 0026 DB0F     		lsr	r3, r3, #31
 806 0028 DAB2     		uxtb	r2, r3
 807 002a 3B68     		ldr	r3, [r7]
 808 002c DB43     		mvn	r3, r3
 809 002e DB0F     		lsr	r3, r3, #31
 810 0030 DBB2     		uxtb	r3, r3
 811 0032 5340     		eor	r3, r2
 812 0034 DBB2     		uxtb	r3, r3
 813 0036 002B     		cmp	r3, #0
 814 0038 01D0     		beq	.L49
 453:.\libfixmath/fix16.c ****       return fix16_max;
 815              		.loc 1 453 0
 816 003a 054B     		ldr	r3, .L51
 817 003c 03E0     		b	.L50
 818              	.L49:
 454:.\libfixmath/fix16.c ****     else
 455:.\libfixmath/fix16.c ****       return fix16_min;
 819              		.loc 1 455 0
 820 003e 8023     		mov	r3, #128
 821 0040 1B06     		lsl	r3, r3, #24
 822 0042 00E0     		b	.L50
 823              	.L48:
 456:.\libfixmath/fix16.c ****   }
 457:.\libfixmath/fix16.c ****   
 458:.\libfixmath/fix16.c ****   return result;
 824              		.loc 1 458 0
 825 0044 FB68     		ldr	r3, [r7, #12]
 826              	.L50:
 459:.\libfixmath/fix16.c **** }
 827              		.loc 1 459 0
 828 0046 181C     		mov	r0, r3
 829 0048 BD46     		mov	sp, r7
 830 004a 04B0     		add	sp, sp, #16
 831              		@ sp needed
 832 004c 80BD     		pop	{r7, pc}
 833              	.L52:
 834 004e C046     		.align	2
 835              	.L51:
 836 0050 FFFFFF7F 		.word	2147483647
 837              		.cfi_endproc
 838              	.LFE13:
 839              		.size	fix16_sdiv, .-fix16_sdiv
 840              		.section	.text.fix16_lerp8,"ax",%progbits
 841              		.align	2
 842              		.global	fix16_lerp8
 843              		.code	16
 844              		.thumb_func
 845              		.type	fix16_lerp8, %function
 846              	fix16_lerp8:
 847              	.LFB14:
 460:.\libfixmath/fix16.c **** #endif
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 24


 461:.\libfixmath/fix16.c **** 
 462:.\libfixmath/fix16.c **** fix16_t fix16_lerp8(fix16_t inArg0, fix16_t inArg1, uint8_t inFract) {
 848              		.loc 1 462 0
 849              		.cfi_startproc
 850 0000 90B5     		push	{r4, r7, lr}
 851              		.cfi_def_cfa_offset 12
 852              		.cfi_offset 4, -12
 853              		.cfi_offset 7, -8
 854              		.cfi_offset 14, -4
 855 0002 87B0     		sub	sp, sp, #28
 856              		.cfi_def_cfa_offset 40
 857 0004 00AF     		add	r7, sp, #0
 858              		.cfi_def_cfa_register 7
 859 0006 F860     		str	r0, [r7, #12]
 860 0008 B960     		str	r1, [r7, #8]
 861 000a FB1D     		add	r3, r7, #7
 862 000c 1A70     		strb	r2, [r3]
 463:.\libfixmath/fix16.c **** 	int64_t tempOut = int64_mul_i32_i32(inArg0, ((1 << 8) - inFract));
 863              		.loc 1 463 0
 864 000e FB1D     		add	r3, r7, #7
 865 0010 1B78     		ldrb	r3, [r3]
 866 0012 8022     		mov	r2, #128
 867 0014 5200     		lsl	r2, r2, #1
 868 0016 D31A     		sub	r3, r2, r3
 869 0018 FA68     		ldr	r2, [r7, #12]
 870 001a 101C     		mov	r0, r2
 871 001c 191C     		mov	r1, r3
 872 001e FFF7FEFF 		bl	int64_mul_i32_i32
 873 0022 031C     		mov	r3, r0
 874 0024 3B61     		str	r3, [r7, #16]
 875 0026 DB17     		asr	r3, r3, #31
 876 0028 7B61     		str	r3, [r7, #20]
 464:.\libfixmath/fix16.c **** 	tempOut = int64_add(tempOut, int64_mul_i32_i32(inArg1, inFract));
 877              		.loc 1 464 0
 878 002a FB1D     		add	r3, r7, #7
 879 002c 1B78     		ldrb	r3, [r3]
 880 002e BA68     		ldr	r2, [r7, #8]
 881 0030 101C     		mov	r0, r2
 882 0032 191C     		mov	r1, r3
 883 0034 FFF7FEFF 		bl	int64_mul_i32_i32
 884 0038 021C     		mov	r2, r0
 885 003a 3B69     		ldr	r3, [r7, #16]
 886 003c 7C69     		ldr	r4, [r7, #20]
 887 003e 181C     		mov	r0, r3
 888 0040 211C     		mov	r1, r4
 889 0042 FFF7FEFF 		bl	int64_add
 890 0046 031C     		mov	r3, r0
 891 0048 3B61     		str	r3, [r7, #16]
 892 004a DB17     		asr	r3, r3, #31
 893 004c 7B61     		str	r3, [r7, #20]
 465:.\libfixmath/fix16.c **** 	tempOut = int64_shift(tempOut, -8);
 894              		.loc 1 465 0
 895 004e 3B69     		ldr	r3, [r7, #16]
 896 0050 7C69     		ldr	r4, [r7, #20]
 897 0052 0822     		mov	r2, #8
 898 0054 5242     		neg	r2, r2
 899 0056 181C     		mov	r0, r3
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 25


 900 0058 211C     		mov	r1, r4
 901 005a FFF7FEFF 		bl	int64_shift
 902 005e 031C     		mov	r3, r0
 903 0060 3B61     		str	r3, [r7, #16]
 904 0062 DB17     		asr	r3, r3, #31
 905 0064 7B61     		str	r3, [r7, #20]
 466:.\libfixmath/fix16.c **** 	return (fix16_t)int64_lo(tempOut);
 906              		.loc 1 466 0
 907 0066 3B69     		ldr	r3, [r7, #16]
 908 0068 7C69     		ldr	r4, [r7, #20]
 909 006a 181C     		mov	r0, r3
 910 006c 211C     		mov	r1, r4
 911 006e FFF7FEFF 		bl	int64_lo
 912 0072 031C     		mov	r3, r0
 467:.\libfixmath/fix16.c **** }
 913              		.loc 1 467 0
 914 0074 181C     		mov	r0, r3
 915 0076 BD46     		mov	sp, r7
 916 0078 07B0     		add	sp, sp, #28
 917              		@ sp needed
 918 007a 90BD     		pop	{r4, r7, pc}
 919              		.cfi_endproc
 920              	.LFE14:
 921              		.size	fix16_lerp8, .-fix16_lerp8
 922              		.section	.text.fix16_lerp16,"ax",%progbits
 923              		.align	2
 924              		.global	fix16_lerp16
 925              		.code	16
 926              		.thumb_func
 927              		.type	fix16_lerp16, %function
 928              	fix16_lerp16:
 929              	.LFB15:
 468:.\libfixmath/fix16.c **** 
 469:.\libfixmath/fix16.c **** fix16_t fix16_lerp16(fix16_t inArg0, fix16_t inArg1, uint16_t inFract) {
 930              		.loc 1 469 0
 931              		.cfi_startproc
 932 0000 90B5     		push	{r4, r7, lr}
 933              		.cfi_def_cfa_offset 12
 934              		.cfi_offset 4, -12
 935              		.cfi_offset 7, -8
 936              		.cfi_offset 14, -4
 937 0002 87B0     		sub	sp, sp, #28
 938              		.cfi_def_cfa_offset 40
 939 0004 00AF     		add	r7, sp, #0
 940              		.cfi_def_cfa_register 7
 941 0006 F860     		str	r0, [r7, #12]
 942 0008 B960     		str	r1, [r7, #8]
 943 000a BB1D     		add	r3, r7, #6
 944 000c 1A80     		strh	r2, [r3]
 470:.\libfixmath/fix16.c **** 	int64_t tempOut = int64_mul_i32_i32(inArg0, ((1 << 16) - inFract));
 945              		.loc 1 470 0
 946 000e BB1D     		add	r3, r7, #6
 947 0010 1B88     		ldrh	r3, [r3]
 948 0012 8022     		mov	r2, #128
 949 0014 5202     		lsl	r2, r2, #9
 950 0016 D31A     		sub	r3, r2, r3
 951 0018 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 26


 952 001a 101C     		mov	r0, r2
 953 001c 191C     		mov	r1, r3
 954 001e FFF7FEFF 		bl	int64_mul_i32_i32
 955 0022 031C     		mov	r3, r0
 956 0024 3B61     		str	r3, [r7, #16]
 957 0026 DB17     		asr	r3, r3, #31
 958 0028 7B61     		str	r3, [r7, #20]
 471:.\libfixmath/fix16.c **** 	tempOut = int64_add(tempOut, int64_mul_i32_i32(inArg1, inFract));
 959              		.loc 1 471 0
 960 002a BB1D     		add	r3, r7, #6
 961 002c 1B88     		ldrh	r3, [r3]
 962 002e BA68     		ldr	r2, [r7, #8]
 963 0030 101C     		mov	r0, r2
 964 0032 191C     		mov	r1, r3
 965 0034 FFF7FEFF 		bl	int64_mul_i32_i32
 966 0038 021C     		mov	r2, r0
 967 003a 3B69     		ldr	r3, [r7, #16]
 968 003c 7C69     		ldr	r4, [r7, #20]
 969 003e 181C     		mov	r0, r3
 970 0040 211C     		mov	r1, r4
 971 0042 FFF7FEFF 		bl	int64_add
 972 0046 031C     		mov	r3, r0
 973 0048 3B61     		str	r3, [r7, #16]
 974 004a DB17     		asr	r3, r3, #31
 975 004c 7B61     		str	r3, [r7, #20]
 472:.\libfixmath/fix16.c **** 	tempOut = int64_shift(tempOut, -16);
 976              		.loc 1 472 0
 977 004e 3B69     		ldr	r3, [r7, #16]
 978 0050 7C69     		ldr	r4, [r7, #20]
 979 0052 1022     		mov	r2, #16
 980 0054 5242     		neg	r2, r2
 981 0056 181C     		mov	r0, r3
 982 0058 211C     		mov	r1, r4
 983 005a FFF7FEFF 		bl	int64_shift
 984 005e 031C     		mov	r3, r0
 985 0060 3B61     		str	r3, [r7, #16]
 986 0062 DB17     		asr	r3, r3, #31
 987 0064 7B61     		str	r3, [r7, #20]
 473:.\libfixmath/fix16.c **** 	return (fix16_t)int64_lo(tempOut);
 988              		.loc 1 473 0
 989 0066 3B69     		ldr	r3, [r7, #16]
 990 0068 7C69     		ldr	r4, [r7, #20]
 991 006a 181C     		mov	r0, r3
 992 006c 211C     		mov	r1, r4
 993 006e FFF7FEFF 		bl	int64_lo
 994 0072 031C     		mov	r3, r0
 474:.\libfixmath/fix16.c **** }
 995              		.loc 1 474 0
 996 0074 181C     		mov	r0, r3
 997 0076 BD46     		mov	sp, r7
 998 0078 07B0     		add	sp, sp, #28
 999              		@ sp needed
 1000 007a 90BD     		pop	{r4, r7, pc}
 1001              		.cfi_endproc
 1002              	.LFE15:
 1003              		.size	fix16_lerp16, .-fix16_lerp16
 1004              		.section	.text.fix16_lerp32,"ax",%progbits
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 27


 1005              		.align	2
 1006              		.global	fix16_lerp32
 1007              		.code	16
 1008              		.thumb_func
 1009              		.type	fix16_lerp32, %function
 1010              	fix16_lerp32:
 1011              	.LFB16:
 475:.\libfixmath/fix16.c **** 
 476:.\libfixmath/fix16.c **** #ifndef FIXMATH_NO_64BIT
 477:.\libfixmath/fix16.c **** fix16_t fix16_lerp32(fix16_t inArg0, fix16_t inArg1, uint32_t inFract) {
 1012              		.loc 1 477 0
 1013              		.cfi_startproc
 1014 0000 B0B5     		push	{r4, r5, r7, lr}
 1015              		.cfi_def_cfa_offset 16
 1016              		.cfi_offset 4, -16
 1017              		.cfi_offset 5, -12
 1018              		.cfi_offset 7, -8
 1019              		.cfi_offset 14, -4
 1020 0002 8CB0     		sub	sp, sp, #48
 1021              		.cfi_def_cfa_offset 64
 1022 0004 00AF     		add	r7, sp, #0
 1023              		.cfi_def_cfa_register 7
 1024 0006 7862     		str	r0, [r7, #36]
 1025 0008 3962     		str	r1, [r7, #32]
 1026 000a FA61     		str	r2, [r7, #28]
 478:.\libfixmath/fix16.c **** 	int64_t tempOut;
 479:.\libfixmath/fix16.c **** 	tempOut   = ((int64_t)inArg0 * (0 - inFract));
 1027              		.loc 1 479 0
 1028 000c 7B6A     		ldr	r3, [r7, #36]
 1029 000e 3B61     		str	r3, [r7, #16]
 1030 0010 DB17     		asr	r3, r3, #31
 1031 0012 7B61     		str	r3, [r7, #20]
 1032 0014 FB69     		ldr	r3, [r7, #28]
 1033 0016 5B42     		neg	r3, r3
 1034 0018 BB60     		str	r3, [r7, #8]
 1035 001a 0023     		mov	r3, #0
 1036 001c FB60     		str	r3, [r7, #12]
 1037 001e 3869     		ldr	r0, [r7, #16]
 1038 0020 7969     		ldr	r1, [r7, #20]
 1039 0022 BA68     		ldr	r2, [r7, #8]
 1040 0024 FB68     		ldr	r3, [r7, #12]
 1041 0026 FFF7FEFF 		bl	__aeabi_lmul
 1042 002a 021C     		mov	r2, r0
 1043 002c 0B1C     		mov	r3, r1
 1044 002e BA62     		str	r2, [r7, #40]
 1045 0030 FB62     		str	r3, [r7, #44]
 480:.\libfixmath/fix16.c **** 	tempOut  += ((int64_t)inArg1 * inFract);
 1046              		.loc 1 480 0
 1047 0032 3B6A     		ldr	r3, [r7, #32]
 1048 0034 3B60     		str	r3, [r7]
 1049 0036 DB17     		asr	r3, r3, #31
 1050 0038 7B60     		str	r3, [r7, #4]
 1051 003a FB69     		ldr	r3, [r7, #28]
 1052 003c 1C1C     		mov	r4, r3
 1053 003e 0023     		mov	r3, #0
 1054 0040 1D1C     		mov	r5, r3
 1055 0042 3868     		ldr	r0, [r7]
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 28


 1056 0044 7968     		ldr	r1, [r7, #4]
 1057 0046 221C     		mov	r2, r4
 1058 0048 2B1C     		mov	r3, r5
 1059 004a FFF7FEFF 		bl	__aeabi_lmul
 1060 004e 031C     		mov	r3, r0
 1061 0050 0C1C     		mov	r4, r1
 1062 0052 B96A     		ldr	r1, [r7, #40]
 1063 0054 FA6A     		ldr	r2, [r7, #44]
 1064 0056 5B18     		add	r3, r3, r1
 1065 0058 5441     		adc	r4, r4, r2
 1066 005a BB62     		str	r3, [r7, #40]
 1067 005c FC62     		str	r4, [r7, #44]
 481:.\libfixmath/fix16.c **** 	tempOut >>= 32;
 1068              		.loc 1 481 0
 1069 005e FB6A     		ldr	r3, [r7, #44]
 1070 0060 1B00     		asr	r3, r3, #0
 1071 0062 BB62     		str	r3, [r7, #40]
 1072 0064 FB6A     		ldr	r3, [r7, #44]
 1073 0066 DB17     		asr	r3, r3, #31
 1074 0068 FB62     		str	r3, [r7, #44]
 482:.\libfixmath/fix16.c **** 	return (fix16_t)tempOut;
 1075              		.loc 1 482 0
 1076 006a BB6A     		ldr	r3, [r7, #40]
 483:.\libfixmath/fix16.c **** }
 1077              		.loc 1 483 0
 1078 006c 181C     		mov	r0, r3
 1079 006e BD46     		mov	sp, r7
 1080 0070 0CB0     		add	sp, sp, #48
 1081              		@ sp needed
 1082 0072 B0BD     		pop	{r4, r5, r7, pc}
 1083              		.cfi_endproc
 1084              	.LFE16:
 1085              		.size	fix16_lerp32, .-fix16_lerp32
 1086              		.text
 1087              	.Letext0:
 1088              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 1089              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 1090              		.file 4 ".\\libfixmath\\fix16.h"
 1091              		.section	.debug_info,"",%progbits
 1092              	.Ldebug_info0:
 1093 0000 2A060000 		.4byte	0x62a
 1094 0004 0400     		.2byte	0x4
 1095 0006 00000000 		.4byte	.Ldebug_abbrev0
 1096 000a 04       		.byte	0x4
 1097 000b 01       		.uleb128 0x1
 1098 000c F0020000 		.4byte	.LASF62
 1099 0010 01       		.byte	0x1
 1100 0011 2D010000 		.4byte	.LASF63
 1101 0015 62000000 		.4byte	.LASF64
 1102 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1103 001d 00000000 		.4byte	0
 1104 0021 00000000 		.4byte	.Ldebug_line0
 1105 0025 02       		.uleb128 0x2
 1106 0026 01       		.byte	0x1
 1107 0027 06       		.byte	0x6
 1108 0028 75010000 		.4byte	.LASF0
 1109 002c 03       		.uleb128 0x3
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 29


 1110 002d 42010000 		.4byte	.LASF3
 1111 0031 02       		.byte	0x2
 1112 0032 1C       		.byte	0x1c
 1113 0033 37000000 		.4byte	0x37
 1114 0037 02       		.uleb128 0x2
 1115 0038 01       		.byte	0x1
 1116 0039 08       		.byte	0x8
 1117 003a 5E010000 		.4byte	.LASF1
 1118 003e 02       		.uleb128 0x2
 1119 003f 02       		.byte	0x2
 1120 0040 05       		.byte	0x5
 1121 0041 34000000 		.4byte	.LASF2
 1122 0045 03       		.uleb128 0x3
 1123 0046 B5000000 		.4byte	.LASF4
 1124 004a 02       		.byte	0x2
 1125 004b 26       		.byte	0x26
 1126 004c 50000000 		.4byte	0x50
 1127 0050 02       		.uleb128 0x2
 1128 0051 02       		.byte	0x2
 1129 0052 07       		.byte	0x7
 1130 0053 D5010000 		.4byte	.LASF5
 1131 0057 03       		.uleb128 0x3
 1132 0058 92020000 		.4byte	.LASF6
 1133 005c 02       		.byte	0x2
 1134 005d 37       		.byte	0x37
 1135 005e 62000000 		.4byte	0x62
 1136 0062 02       		.uleb128 0x2
 1137 0063 04       		.byte	0x4
 1138 0064 05       		.byte	0x5
 1139 0065 0A010000 		.4byte	.LASF7
 1140 0069 03       		.uleb128 0x3
 1141 006a 57000000 		.4byte	.LASF8
 1142 006e 02       		.byte	0x2
 1143 006f 38       		.byte	0x38
 1144 0070 74000000 		.4byte	0x74
 1145 0074 02       		.uleb128 0x2
 1146 0075 04       		.byte	0x4
 1147 0076 07       		.byte	0x7
 1148 0077 52020000 		.4byte	.LASF9
 1149 007b 03       		.uleb128 0x3
 1150 007c 13010000 		.4byte	.LASF10
 1151 0080 02       		.byte	0x2
 1152 0081 4D       		.byte	0x4d
 1153 0082 86000000 		.4byte	0x86
 1154 0086 02       		.uleb128 0x2
 1155 0087 08       		.byte	0x8
 1156 0088 05       		.byte	0x5
 1157 0089 FC000000 		.4byte	.LASF11
 1158 008d 03       		.uleb128 0x3
 1159 008e 15020000 		.4byte	.LASF12
 1160 0092 02       		.byte	0x2
 1161 0093 4E       		.byte	0x4e
 1162 0094 98000000 		.4byte	0x98
 1163 0098 02       		.uleb128 0x2
 1164 0099 08       		.byte	0x8
 1165 009a 07       		.byte	0x7
 1166 009b 81010000 		.4byte	.LASF13
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 30


 1167 009f 04       		.uleb128 0x4
 1168 00a0 04       		.byte	0x4
 1169 00a1 05       		.byte	0x5
 1170 00a2 696E7400 		.ascii	"int\000"
 1171 00a6 02       		.uleb128 0x2
 1172 00a7 04       		.byte	0x4
 1173 00a8 07       		.byte	0x7
 1174 00a9 A1010000 		.4byte	.LASF14
 1175 00ad 03       		.uleb128 0x3
 1176 00ae C8000000 		.4byte	.LASF15
 1177 00b2 03       		.byte	0x3
 1178 00b3 2A       		.byte	0x2a
 1179 00b4 2C000000 		.4byte	0x2c
 1180 00b8 03       		.uleb128 0x3
 1181 00b9 B8010000 		.4byte	.LASF16
 1182 00bd 03       		.byte	0x3
 1183 00be 36       		.byte	0x36
 1184 00bf 45000000 		.4byte	0x45
 1185 00c3 03       		.uleb128 0x3
 1186 00c4 EE010000 		.4byte	.LASF17
 1187 00c8 03       		.byte	0x3
 1188 00c9 41       		.byte	0x41
 1189 00ca 57000000 		.4byte	0x57
 1190 00ce 03       		.uleb128 0x3
 1191 00cf 98010000 		.4byte	.LASF18
 1192 00d3 03       		.byte	0x3
 1193 00d4 42       		.byte	0x42
 1194 00d5 69000000 		.4byte	0x69
 1195 00d9 03       		.uleb128 0x3
 1196 00da C0000000 		.4byte	.LASF19
 1197 00de 03       		.byte	0x3
 1198 00df 4D       		.byte	0x4d
 1199 00e0 7B000000 		.4byte	0x7b
 1200 00e4 03       		.uleb128 0x3
 1201 00e5 2B000000 		.4byte	.LASF20
 1202 00e9 03       		.byte	0x3
 1203 00ea 4E       		.byte	0x4e
 1204 00eb 8D000000 		.4byte	0x8d
 1205 00ef 03       		.uleb128 0x3
 1206 00f0 0D020000 		.4byte	.LASF21
 1207 00f4 04       		.byte	0x4
 1208 00f5 16       		.byte	0x16
 1209 00f6 C3000000 		.4byte	0xc3
 1210 00fa 05       		.uleb128 0x5
 1211 00fb C1010000 		.4byte	.LASF22
 1212 00ff 01       		.byte	0x1
 1213 0100 09       		.byte	0x9
 1214 0101 EF000000 		.4byte	0xef
 1215 0105 00000000 		.4byte	.LFB6
 1216 0109 3A000000 		.4byte	.LFE6-.LFB6
 1217 010d 01       		.uleb128 0x1
 1218 010e 9C       		.byte	0x9c
 1219 010f 54010000 		.4byte	0x154
 1220 0113 06       		.uleb128 0x6
 1221 0114 6100     		.ascii	"a\000"
 1222 0116 01       		.byte	0x1
 1223 0117 09       		.byte	0x9
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 31


 1224 0118 EF000000 		.4byte	0xef
 1225 011c 02       		.uleb128 0x2
 1226 011d 91       		.byte	0x91
 1227 011e 64       		.sleb128 -28
 1228 011f 06       		.uleb128 0x6
 1229 0120 6200     		.ascii	"b\000"
 1230 0122 01       		.byte	0x1
 1231 0123 09       		.byte	0x9
 1232 0124 EF000000 		.4byte	0xef
 1233 0128 02       		.uleb128 0x2
 1234 0129 91       		.byte	0x91
 1235 012a 60       		.sleb128 -32
 1236 012b 07       		.uleb128 0x7
 1237 012c 5F6100   		.ascii	"_a\000"
 1238 012f 01       		.byte	0x1
 1239 0130 0D       		.byte	0xd
 1240 0131 CE000000 		.4byte	0xce
 1241 0135 02       		.uleb128 0x2
 1242 0136 91       		.byte	0x91
 1243 0137 74       		.sleb128 -12
 1244 0138 07       		.uleb128 0x7
 1245 0139 5F6200   		.ascii	"_b\000"
 1246 013c 01       		.byte	0x1
 1247 013d 0D       		.byte	0xd
 1248 013e CE000000 		.4byte	0xce
 1249 0142 02       		.uleb128 0x2
 1250 0143 91       		.byte	0x91
 1251 0144 70       		.sleb128 -16
 1252 0145 07       		.uleb128 0x7
 1253 0146 73756D00 		.ascii	"sum\000"
 1254 014a 01       		.byte	0x1
 1255 014b 0E       		.byte	0xe
 1256 014c CE000000 		.4byte	0xce
 1257 0150 02       		.uleb128 0x2
 1258 0151 91       		.byte	0x91
 1259 0152 6C       		.sleb128 -20
 1260 0153 00       		.byte	0
 1261 0154 05       		.uleb128 0x5
 1262 0155 00000000 		.4byte	.LASF23
 1263 0159 01       		.byte	0x1
 1264 015a 18       		.byte	0x18
 1265 015b EF000000 		.4byte	0xef
 1266 015f 00000000 		.4byte	.LFB7
 1267 0163 3A000000 		.4byte	.LFE7-.LFB7
 1268 0167 01       		.uleb128 0x1
 1269 0168 9C       		.byte	0x9c
 1270 0169 AE010000 		.4byte	0x1ae
 1271 016d 06       		.uleb128 0x6
 1272 016e 6100     		.ascii	"a\000"
 1273 0170 01       		.byte	0x1
 1274 0171 18       		.byte	0x18
 1275 0172 EF000000 		.4byte	0xef
 1276 0176 02       		.uleb128 0x2
 1277 0177 91       		.byte	0x91
 1278 0178 64       		.sleb128 -28
 1279 0179 06       		.uleb128 0x6
 1280 017a 6200     		.ascii	"b\000"
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 32


 1281 017c 01       		.byte	0x1
 1282 017d 18       		.byte	0x18
 1283 017e EF000000 		.4byte	0xef
 1284 0182 02       		.uleb128 0x2
 1285 0183 91       		.byte	0x91
 1286 0184 60       		.sleb128 -32
 1287 0185 07       		.uleb128 0x7
 1288 0186 5F6100   		.ascii	"_a\000"
 1289 0189 01       		.byte	0x1
 1290 018a 1A       		.byte	0x1a
 1291 018b CE000000 		.4byte	0xce
 1292 018f 02       		.uleb128 0x2
 1293 0190 91       		.byte	0x91
 1294 0191 74       		.sleb128 -12
 1295 0192 07       		.uleb128 0x7
 1296 0193 5F6200   		.ascii	"_b\000"
 1297 0196 01       		.byte	0x1
 1298 0197 1A       		.byte	0x1a
 1299 0198 CE000000 		.4byte	0xce
 1300 019c 02       		.uleb128 0x2
 1301 019d 91       		.byte	0x91
 1302 019e 70       		.sleb128 -16
 1303 019f 08       		.uleb128 0x8
 1304 01a0 26000000 		.4byte	.LASF24
 1305 01a4 01       		.byte	0x1
 1306 01a5 1B       		.byte	0x1b
 1307 01a6 CE000000 		.4byte	0xce
 1308 01aa 02       		.uleb128 0x2
 1309 01ab 91       		.byte	0x91
 1310 01ac 6C       		.sleb128 -20
 1311 01ad 00       		.byte	0
 1312 01ae 09       		.uleb128 0x9
 1313 01af B7020000 		.4byte	.LASF25
 1314 01b3 01       		.byte	0x1
 1315 01b4 26       		.byte	0x26
 1316 01b5 EF000000 		.4byte	0xef
 1317 01b9 00000000 		.4byte	.LFB8
 1318 01bd 44000000 		.4byte	.LFE8-.LFB8
 1319 01c1 01       		.uleb128 0x1
 1320 01c2 9C       		.byte	0x9c
 1321 01c3 EE010000 		.4byte	0x1ee
 1322 01c7 06       		.uleb128 0x6
 1323 01c8 6100     		.ascii	"a\000"
 1324 01ca 01       		.byte	0x1
 1325 01cb 26       		.byte	0x26
 1326 01cc EF000000 		.4byte	0xef
 1327 01d0 02       		.uleb128 0x2
 1328 01d1 91       		.byte	0x91
 1329 01d2 6C       		.sleb128 -20
 1330 01d3 06       		.uleb128 0x6
 1331 01d4 6200     		.ascii	"b\000"
 1332 01d6 01       		.byte	0x1
 1333 01d7 26       		.byte	0x26
 1334 01d8 EF000000 		.4byte	0xef
 1335 01dc 02       		.uleb128 0x2
 1336 01dd 91       		.byte	0x91
 1337 01de 68       		.sleb128 -24
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 33


 1338 01df 08       		.uleb128 0x8
 1339 01e0 1D010000 		.4byte	.LASF26
 1340 01e4 01       		.byte	0x1
 1341 01e5 28       		.byte	0x28
 1342 01e6 EF000000 		.4byte	0xef
 1343 01ea 02       		.uleb128 0x2
 1344 01eb 91       		.byte	0x91
 1345 01ec 74       		.sleb128 -12
 1346 01ed 00       		.byte	0
 1347 01ee 09       		.uleb128 0x9
 1348 01ef 64020000 		.4byte	.LASF27
 1349 01f3 01       		.byte	0x1
 1350 01f4 30       		.byte	0x30
 1351 01f5 EF000000 		.4byte	0xef
 1352 01f9 00000000 		.4byte	.LFB9
 1353 01fd 44000000 		.4byte	.LFE9-.LFB9
 1354 0201 01       		.uleb128 0x1
 1355 0202 9C       		.byte	0x9c
 1356 0203 2E020000 		.4byte	0x22e
 1357 0207 06       		.uleb128 0x6
 1358 0208 6100     		.ascii	"a\000"
 1359 020a 01       		.byte	0x1
 1360 020b 30       		.byte	0x30
 1361 020c EF000000 		.4byte	0xef
 1362 0210 02       		.uleb128 0x2
 1363 0211 91       		.byte	0x91
 1364 0212 6C       		.sleb128 -20
 1365 0213 06       		.uleb128 0x6
 1366 0214 6200     		.ascii	"b\000"
 1367 0216 01       		.byte	0x1
 1368 0217 30       		.byte	0x30
 1369 0218 EF000000 		.4byte	0xef
 1370 021c 02       		.uleb128 0x2
 1371 021d 91       		.byte	0x91
 1372 021e 68       		.sleb128 -24
 1373 021f 08       		.uleb128 0x8
 1374 0220 1D010000 		.4byte	.LASF26
 1375 0224 01       		.byte	0x1
 1376 0225 32       		.byte	0x32
 1377 0226 EF000000 		.4byte	0xef
 1378 022a 02       		.uleb128 0x2
 1379 022b 91       		.byte	0x91
 1380 022c 74       		.sleb128 -12
 1381 022d 00       		.byte	0
 1382 022e 09       		.uleb128 0x9
 1383 022f 48020000 		.4byte	.LASF28
 1384 0233 01       		.byte	0x1
 1385 0234 44       		.byte	0x44
 1386 0235 EF000000 		.4byte	0xef
 1387 0239 00000000 		.4byte	.LFB10
 1388 023d C0000000 		.4byte	.LFE10-.LFB10
 1389 0241 01       		.uleb128 0x1
 1390 0242 9C       		.byte	0x9c
 1391 0243 8E020000 		.4byte	0x28e
 1392 0247 0A       		.uleb128 0xa
 1393 0248 0A000000 		.4byte	.LASF29
 1394 024c 01       		.byte	0x1
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 34


 1395 024d 44       		.byte	0x44
 1396 024e EF000000 		.4byte	0xef
 1397 0252 02       		.uleb128 0x2
 1398 0253 91       		.byte	0x91
 1399 0254 54       		.sleb128 -44
 1400 0255 0A       		.uleb128 0xa
 1401 0256 11000000 		.4byte	.LASF30
 1402 025a 01       		.byte	0x1
 1403 025b 44       		.byte	0x44
 1404 025c EF000000 		.4byte	0xef
 1405 0260 02       		.uleb128 0x2
 1406 0261 91       		.byte	0x91
 1407 0262 50       		.sleb128 -48
 1408 0263 08       		.uleb128 0x8
 1409 0264 05020000 		.4byte	.LASF31
 1410 0268 01       		.byte	0x1
 1411 0269 46       		.byte	0x46
 1412 026a D9000000 		.4byte	0xd9
 1413 026e 02       		.uleb128 0x2
 1414 026f 91       		.byte	0x91
 1415 0270 60       		.sleb128 -32
 1416 0271 08       		.uleb128 0x8
 1417 0272 20000000 		.4byte	.LASF32
 1418 0276 01       		.byte	0x1
 1419 0277 4A       		.byte	0x4a
 1420 0278 CE000000 		.4byte	0xce
 1421 027c 02       		.uleb128 0x2
 1422 027d 91       		.byte	0x91
 1423 027e 5C       		.sleb128 -36
 1424 027f 08       		.uleb128 0x8
 1425 0280 1D010000 		.4byte	.LASF26
 1426 0284 01       		.byte	0x1
 1427 0285 64       		.byte	0x64
 1428 0286 EF000000 		.4byte	0xef
 1429 028a 02       		.uleb128 0x2
 1430 028b 91       		.byte	0x91
 1431 028c 58       		.sleb128 -40
 1432 028d 00       		.byte	0
 1433 028e 09       		.uleb128 0x9
 1434 028f 4C000000 		.4byte	.LASF33
 1435 0293 01       		.byte	0x1
 1436 0294 FF       		.byte	0xff
 1437 0295 EF000000 		.4byte	0xef
 1438 0299 00000000 		.4byte	.LFB11
 1439 029d 54000000 		.4byte	.LFE11-.LFB11
 1440 02a1 01       		.uleb128 0x1
 1441 02a2 9C       		.byte	0x9c
 1442 02a3 D3020000 		.4byte	0x2d3
 1443 02a7 0A       		.uleb128 0xa
 1444 02a8 0A000000 		.4byte	.LASF29
 1445 02ac 01       		.byte	0x1
 1446 02ad FF       		.byte	0xff
 1447 02ae EF000000 		.4byte	0xef
 1448 02b2 02       		.uleb128 0x2
 1449 02b3 91       		.byte	0x91
 1450 02b4 6C       		.sleb128 -20
 1451 02b5 0A       		.uleb128 0xa
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 35


 1452 02b6 11000000 		.4byte	.LASF30
 1453 02ba 01       		.byte	0x1
 1454 02bb FF       		.byte	0xff
 1455 02bc EF000000 		.4byte	0xef
 1456 02c0 02       		.uleb128 0x2
 1457 02c1 91       		.byte	0x91
 1458 02c2 68       		.sleb128 -24
 1459 02c3 0B       		.uleb128 0xb
 1460 02c4 1D010000 		.4byte	.LASF26
 1461 02c8 01       		.byte	0x1
 1462 02c9 0001     		.2byte	0x100
 1463 02cb EF000000 		.4byte	0xef
 1464 02cf 02       		.uleb128 0x2
 1465 02d0 91       		.byte	0x91
 1466 02d1 74       		.sleb128 -12
 1467 02d2 00       		.byte	0
 1468 02d3 0C       		.uleb128 0xc
 1469 02d4 E6000000 		.4byte	.LASF34
 1470 02d8 01       		.byte	0x1
 1471 02d9 2101     		.2byte	0x121
 1472 02db EF000000 		.4byte	0xef
 1473 02df 00000000 		.4byte	.LFB12
 1474 02e3 58010000 		.4byte	.LFE12-.LFB12
 1475 02e7 01       		.uleb128 0x1
 1476 02e8 9C       		.byte	0x9c
 1477 02e9 98030000 		.4byte	0x398
 1478 02ed 0D       		.uleb128 0xd
 1479 02ee 6100     		.ascii	"a\000"
 1480 02f0 01       		.byte	0x1
 1481 02f1 2101     		.2byte	0x121
 1482 02f3 EF000000 		.4byte	0xef
 1483 02f7 02       		.uleb128 0x2
 1484 02f8 91       		.byte	0x91
 1485 02f9 4C       		.sleb128 -52
 1486 02fa 0D       		.uleb128 0xd
 1487 02fb 6200     		.ascii	"b\000"
 1488 02fd 01       		.byte	0x1
 1489 02fe 2101     		.2byte	0x121
 1490 0300 EF000000 		.4byte	0xef
 1491 0304 02       		.uleb128 0x2
 1492 0305 91       		.byte	0x91
 1493 0306 48       		.sleb128 -56
 1494 0307 0B       		.uleb128 0xb
 1495 0308 CB010000 		.4byte	.LASF35
 1496 030c 01       		.byte	0x1
 1497 030d 2901     		.2byte	0x129
 1498 030f CE000000 		.4byte	0xce
 1499 0313 02       		.uleb128 0x2
 1500 0314 91       		.byte	0x91
 1501 0315 6C       		.sleb128 -20
 1502 0316 0B       		.uleb128 0xb
 1503 0317 E8020000 		.4byte	.LASF36
 1504 031b 01       		.byte	0x1
 1505 031c 2A01     		.2byte	0x12a
 1506 031e CE000000 		.4byte	0xce
 1507 0322 02       		.uleb128 0x2
 1508 0323 91       		.byte	0x91
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 36


 1509 0324 68       		.sleb128 -24
 1510 0325 0B       		.uleb128 0xb
 1511 0326 D0000000 		.4byte	.LASF37
 1512 032a 01       		.byte	0x1
 1513 032b 2B01     		.2byte	0x12b
 1514 032d CE000000 		.4byte	0xce
 1515 0331 02       		.uleb128 0x2
 1516 0332 91       		.byte	0x91
 1517 0333 64       		.sleb128 -28
 1518 0334 0B       		.uleb128 0xb
 1519 0335 AF020000 		.4byte	.LASF38
 1520 0339 01       		.byte	0x1
 1521 033a 2C01     		.2byte	0x12c
 1522 033c 9F000000 		.4byte	0x9f
 1523 0340 02       		.uleb128 0x2
 1524 0341 91       		.byte	0x91
 1525 0342 60       		.sleb128 -32
 1526 0343 0B       		.uleb128 0xb
 1527 0344 1D010000 		.4byte	.LASF26
 1528 0348 01       		.byte	0x1
 1529 0349 5901     		.2byte	0x159
 1530 034b EF000000 		.4byte	0xef
 1531 034f 02       		.uleb128 0x2
 1532 0350 91       		.byte	0x91
 1533 0351 58       		.sleb128 -40
 1534 0352 0E       		.uleb128 0xe
 1535 0353 3A000000 		.4byte	.LBB2
 1536 0357 44000000 		.4byte	.LBE2-.LBB2
 1537 035b 6F030000 		.4byte	0x36f
 1538 035f 0B       		.uleb128 0xb
 1539 0360 76030000 		.4byte	.LASF39
 1540 0364 01       		.byte	0x1
 1541 0365 3301     		.2byte	0x133
 1542 0367 CE000000 		.4byte	0xce
 1543 036b 02       		.uleb128 0x2
 1544 036c 91       		.byte	0x91
 1545 036d 54       		.sleb128 -44
 1546 036e 00       		.byte	0
 1547 036f 0F       		.uleb128 0xf
 1548 0370 9E000000 		.4byte	.LBB3
 1549 0374 7A000000 		.4byte	.LBE3-.LBB3
 1550 0378 0B       		.uleb128 0xb
 1551 0379 E8010000 		.4byte	.LASF40
 1552 037d 01       		.byte	0x1
 1553 037e 4201     		.2byte	0x142
 1554 0380 9F000000 		.4byte	0x9f
 1555 0384 02       		.uleb128 0x2
 1556 0385 91       		.byte	0x91
 1557 0386 5C       		.sleb128 -36
 1558 0387 10       		.uleb128 0x10
 1559 0388 64697600 		.ascii	"div\000"
 1560 038c 01       		.byte	0x1
 1561 038d 4701     		.2byte	0x147
 1562 038f CE000000 		.4byte	0xce
 1563 0393 02       		.uleb128 0x2
 1564 0394 91       		.byte	0x91
 1565 0395 50       		.sleb128 -48
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 37


 1566 0396 00       		.byte	0
 1567 0397 00       		.byte	0
 1568 0398 0C       		.uleb128 0xc
 1569 0399 87020000 		.4byte	.LASF41
 1570 039d 01       		.byte	0x1
 1571 039e BF01     		.2byte	0x1bf
 1572 03a0 EF000000 		.4byte	0xef
 1573 03a4 00000000 		.4byte	.LFB13
 1574 03a8 54000000 		.4byte	.LFE13-.LFB13
 1575 03ac 01       		.uleb128 0x1
 1576 03ad 9C       		.byte	0x9c
 1577 03ae E0030000 		.4byte	0x3e0
 1578 03b2 11       		.uleb128 0x11
 1579 03b3 0A000000 		.4byte	.LASF29
 1580 03b7 01       		.byte	0x1
 1581 03b8 BF01     		.2byte	0x1bf
 1582 03ba EF000000 		.4byte	0xef
 1583 03be 02       		.uleb128 0x2
 1584 03bf 91       		.byte	0x91
 1585 03c0 6C       		.sleb128 -20
 1586 03c1 11       		.uleb128 0x11
 1587 03c2 11000000 		.4byte	.LASF30
 1588 03c6 01       		.byte	0x1
 1589 03c7 BF01     		.2byte	0x1bf
 1590 03c9 EF000000 		.4byte	0xef
 1591 03cd 02       		.uleb128 0x2
 1592 03ce 91       		.byte	0x91
 1593 03cf 68       		.sleb128 -24
 1594 03d0 0B       		.uleb128 0xb
 1595 03d1 1D010000 		.4byte	.LASF26
 1596 03d5 01       		.byte	0x1
 1597 03d6 C001     		.2byte	0x1c0
 1598 03d8 EF000000 		.4byte	0xef
 1599 03dc 02       		.uleb128 0x2
 1600 03dd 91       		.byte	0x91
 1601 03de 74       		.sleb128 -12
 1602 03df 00       		.byte	0
 1603 03e0 0C       		.uleb128 0xc
 1604 03e1 2F020000 		.4byte	.LASF42
 1605 03e5 01       		.byte	0x1
 1606 03e6 CE01     		.2byte	0x1ce
 1607 03e8 EF000000 		.4byte	0xef
 1608 03ec 00000000 		.4byte	.LFB14
 1609 03f0 7C000000 		.4byte	.LFE14-.LFB14
 1610 03f4 01       		.uleb128 0x1
 1611 03f5 9C       		.byte	0x9c
 1612 03f6 7B040000 		.4byte	0x47b
 1613 03fa 11       		.uleb128 0x11
 1614 03fb 0A000000 		.4byte	.LASF29
 1615 03ff 01       		.byte	0x1
 1616 0400 CE01     		.2byte	0x1ce
 1617 0402 EF000000 		.4byte	0xef
 1618 0406 02       		.uleb128 0x2
 1619 0407 91       		.byte	0x91
 1620 0408 64       		.sleb128 -28
 1621 0409 11       		.uleb128 0x11
 1622 040a 11000000 		.4byte	.LASF30
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 38


 1623 040e 01       		.byte	0x1
 1624 040f CE01     		.2byte	0x1ce
 1625 0411 EF000000 		.4byte	0xef
 1626 0415 02       		.uleb128 0x2
 1627 0416 91       		.byte	0x91
 1628 0417 60       		.sleb128 -32
 1629 0418 11       		.uleb128 0x11
 1630 0419 56010000 		.4byte	.LASF43
 1631 041d 01       		.byte	0x1
 1632 041e CE01     		.2byte	0x1ce
 1633 0420 AD000000 		.4byte	0xad
 1634 0424 02       		.uleb128 0x2
 1635 0425 91       		.byte	0x91
 1636 0426 5F       		.sleb128 -33
 1637 0427 0B       		.uleb128 0xb
 1638 0428 18000000 		.4byte	.LASF44
 1639 042c 01       		.byte	0x1
 1640 042d CF01     		.2byte	0x1cf
 1641 042f D9000000 		.4byte	0xd9
 1642 0433 02       		.uleb128 0x2
 1643 0434 91       		.byte	0x91
 1644 0435 68       		.sleb128 -24
 1645 0436 12       		.uleb128 0x12
 1646 0437 CA020000 		.4byte	.LASF45
 1647 043b 01       		.byte	0x1
 1648 043c CF01     		.2byte	0x1cf
 1649 043e 9F000000 		.4byte	0x9f
 1650 0442 48040000 		.4byte	0x448
 1651 0446 13       		.uleb128 0x13
 1652 0447 00       		.byte	0
 1653 0448 12       		.uleb128 0x12
 1654 0449 6C030000 		.4byte	.LASF46
 1655 044d 01       		.byte	0x1
 1656 044e D001     		.2byte	0x1d0
 1657 0450 9F000000 		.4byte	0x9f
 1658 0454 5A040000 		.4byte	0x45a
 1659 0458 13       		.uleb128 0x13
 1660 0459 00       		.byte	0
 1661 045a 12       		.uleb128 0x12
 1662 045b F0000000 		.4byte	.LASF47
 1663 045f 01       		.byte	0x1
 1664 0460 D101     		.2byte	0x1d1
 1665 0462 9F000000 		.4byte	0x9f
 1666 0466 6C040000 		.4byte	0x46c
 1667 046a 13       		.uleb128 0x13
 1668 046b 00       		.byte	0
 1669 046c 14       		.uleb128 0x14
 1670 046d 9C020000 		.4byte	.LASF49
 1671 0471 01       		.byte	0x1
 1672 0472 D201     		.2byte	0x1d2
 1673 0474 9F000000 		.4byte	0x9f
 1674 0478 13       		.uleb128 0x13
 1675 0479 00       		.byte	0
 1676 047a 00       		.byte	0
 1677 047b 0C       		.uleb128 0xc
 1678 047c 3B020000 		.4byte	.LASF48
 1679 0480 01       		.byte	0x1
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 39


 1680 0481 D501     		.2byte	0x1d5
 1681 0483 EF000000 		.4byte	0xef
 1682 0487 00000000 		.4byte	.LFB15
 1683 048b 7C000000 		.4byte	.LFE15-.LFB15
 1684 048f 01       		.uleb128 0x1
 1685 0490 9C       		.byte	0x9c
 1686 0491 16050000 		.4byte	0x516
 1687 0495 11       		.uleb128 0x11
 1688 0496 0A000000 		.4byte	.LASF29
 1689 049a 01       		.byte	0x1
 1690 049b D501     		.2byte	0x1d5
 1691 049d EF000000 		.4byte	0xef
 1692 04a1 02       		.uleb128 0x2
 1693 04a2 91       		.byte	0x91
 1694 04a3 64       		.sleb128 -28
 1695 04a4 11       		.uleb128 0x11
 1696 04a5 11000000 		.4byte	.LASF30
 1697 04a9 01       		.byte	0x1
 1698 04aa D501     		.2byte	0x1d5
 1699 04ac EF000000 		.4byte	0xef
 1700 04b0 02       		.uleb128 0x2
 1701 04b1 91       		.byte	0x91
 1702 04b2 60       		.sleb128 -32
 1703 04b3 11       		.uleb128 0x11
 1704 04b4 56010000 		.4byte	.LASF43
 1705 04b8 01       		.byte	0x1
 1706 04b9 D501     		.2byte	0x1d5
 1707 04bb B8000000 		.4byte	0xb8
 1708 04bf 02       		.uleb128 0x2
 1709 04c0 91       		.byte	0x91
 1710 04c1 5E       		.sleb128 -34
 1711 04c2 0B       		.uleb128 0xb
 1712 04c3 18000000 		.4byte	.LASF44
 1713 04c7 01       		.byte	0x1
 1714 04c8 D601     		.2byte	0x1d6
 1715 04ca D9000000 		.4byte	0xd9
 1716 04ce 02       		.uleb128 0x2
 1717 04cf 91       		.byte	0x91
 1718 04d0 68       		.sleb128 -24
 1719 04d1 12       		.uleb128 0x12
 1720 04d2 CA020000 		.4byte	.LASF45
 1721 04d6 01       		.byte	0x1
 1722 04d7 CF01     		.2byte	0x1cf
 1723 04d9 9F000000 		.4byte	0x9f
 1724 04dd E3040000 		.4byte	0x4e3
 1725 04e1 13       		.uleb128 0x13
 1726 04e2 00       		.byte	0
 1727 04e3 12       		.uleb128 0x12
 1728 04e4 6C030000 		.4byte	.LASF46
 1729 04e8 01       		.byte	0x1
 1730 04e9 D001     		.2byte	0x1d0
 1731 04eb 9F000000 		.4byte	0x9f
 1732 04ef F5040000 		.4byte	0x4f5
 1733 04f3 13       		.uleb128 0x13
 1734 04f4 00       		.byte	0
 1735 04f5 12       		.uleb128 0x12
 1736 04f6 F0000000 		.4byte	.LASF47
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 40


 1737 04fa 01       		.byte	0x1
 1738 04fb D101     		.2byte	0x1d1
 1739 04fd 9F000000 		.4byte	0x9f
 1740 0501 07050000 		.4byte	0x507
 1741 0505 13       		.uleb128 0x13
 1742 0506 00       		.byte	0
 1743 0507 14       		.uleb128 0x14
 1744 0508 9C020000 		.4byte	.LASF49
 1745 050c 01       		.byte	0x1
 1746 050d D201     		.2byte	0x1d2
 1747 050f 9F000000 		.4byte	0x9f
 1748 0513 13       		.uleb128 0x13
 1749 0514 00       		.byte	0
 1750 0515 00       		.byte	0
 1751 0516 0C       		.uleb128 0xc
 1752 0517 D9000000 		.4byte	.LASF50
 1753 051b 01       		.byte	0x1
 1754 051c DD01     		.2byte	0x1dd
 1755 051e EF000000 		.4byte	0xef
 1756 0522 00000000 		.4byte	.LFB16
 1757 0526 74000000 		.4byte	.LFE16-.LFB16
 1758 052a 01       		.uleb128 0x1
 1759 052b 9C       		.byte	0x9c
 1760 052c 6D050000 		.4byte	0x56d
 1761 0530 11       		.uleb128 0x11
 1762 0531 0A000000 		.4byte	.LASF29
 1763 0535 01       		.byte	0x1
 1764 0536 DD01     		.2byte	0x1dd
 1765 0538 EF000000 		.4byte	0xef
 1766 053c 02       		.uleb128 0x2
 1767 053d 91       		.byte	0x91
 1768 053e 64       		.sleb128 -28
 1769 053f 11       		.uleb128 0x11
 1770 0540 11000000 		.4byte	.LASF30
 1771 0544 01       		.byte	0x1
 1772 0545 DD01     		.2byte	0x1dd
 1773 0547 EF000000 		.4byte	0xef
 1774 054b 02       		.uleb128 0x2
 1775 054c 91       		.byte	0x91
 1776 054d 60       		.sleb128 -32
 1777 054e 11       		.uleb128 0x11
 1778 054f 56010000 		.4byte	.LASF43
 1779 0553 01       		.byte	0x1
 1780 0554 DD01     		.2byte	0x1dd
 1781 0556 CE000000 		.4byte	0xce
 1782 055a 02       		.uleb128 0x2
 1783 055b 91       		.byte	0x91
 1784 055c 5C       		.sleb128 -36
 1785 055d 0B       		.uleb128 0xb
 1786 055e 18000000 		.4byte	.LASF44
 1787 0562 01       		.byte	0x1
 1788 0563 DE01     		.2byte	0x1de
 1789 0565 D9000000 		.4byte	0xd9
 1790 0569 02       		.uleb128 0x2
 1791 056a 91       		.byte	0x91
 1792 056b 68       		.sleb128 -24
 1793 056c 00       		.byte	0
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 41


 1794 056d 08       		.uleb128 0x8
 1795 056e DC020000 		.4byte	.LASF51
 1796 0572 04       		.byte	0x4
 1797 0573 18       		.byte	0x18
 1798 0574 7E050000 		.4byte	0x57e
 1799 0578 05       		.uleb128 0x5
 1800 0579 03       		.byte	0x3
 1801 057a 00000000 		.4byte	FOUR_DIV_PI
 1802 057e 15       		.uleb128 0x15
 1803 057f EF000000 		.4byte	0xef
 1804 0583 08       		.uleb128 0x8
 1805 0584 3E000000 		.4byte	.LASF52
 1806 0588 04       		.byte	0x4
 1807 0589 19       		.byte	0x19
 1808 058a 7E050000 		.4byte	0x57e
 1809 058e 05       		.uleb128 0x5
 1810 058f 03       		.byte	0x3
 1811 0590 04000000 		.4byte	_FOUR_DIV_PI2
 1812 0594 08       		.uleb128 0x8
 1813 0595 6F020000 		.4byte	.LASF53
 1814 0599 04       		.byte	0x4
 1815 059a 1A       		.byte	0x1a
 1816 059b 7E050000 		.4byte	0x57e
 1817 059f 05       		.uleb128 0x5
 1818 05a0 03       		.byte	0x3
 1819 05a1 08000000 		.4byte	X4_CORRECTION_COMPONENT
 1820 05a5 08       		.uleb128 0x8
 1821 05a6 6C010000 		.4byte	.LASF54
 1822 05aa 04       		.byte	0x4
 1823 05ab 1B       		.byte	0x1b
 1824 05ac 7E050000 		.4byte	0x57e
 1825 05b0 05       		.uleb128 0x5
 1826 05b1 03       		.byte	0x3
 1827 05b2 0C000000 		.4byte	PI_DIV_4
 1828 05b6 08       		.uleb128 0x8
 1829 05b7 F6010000 		.4byte	.LASF55
 1830 05bb 04       		.byte	0x4
 1831 05bc 1C       		.byte	0x1c
 1832 05bd 7E050000 		.4byte	0x57e
 1833 05c1 05       		.uleb128 0x5
 1834 05c2 03       		.byte	0x3
 1835 05c3 10000000 		.4byte	THREE_PI_DIV_4
 1836 05c7 08       		.uleb128 0x8
 1837 05c8 4C010000 		.4byte	.LASF56
 1838 05cc 04       		.byte	0x4
 1839 05cd 1E       		.byte	0x1e
 1840 05ce 7E050000 		.4byte	0x57e
 1841 05d2 05       		.uleb128 0x5
 1842 05d3 03       		.byte	0x3
 1843 05d4 14000000 		.4byte	fix16_max
 1844 05d8 08       		.uleb128 0x8
 1845 05d9 AE010000 		.4byte	.LASF57
 1846 05dd 04       		.byte	0x4
 1847 05de 1F       		.byte	0x1f
 1848 05df 7E050000 		.4byte	0x57e
 1849 05e3 05       		.uleb128 0x5
 1850 05e4 03       		.byte	0x3
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 42


 1851 05e5 18000000 		.4byte	fix16_min
 1852 05e9 08       		.uleb128 0x8
 1853 05ea 20020000 		.4byte	.LASF58
 1854 05ee 04       		.byte	0x4
 1855 05ef 20       		.byte	0x20
 1856 05f0 7E050000 		.4byte	0x57e
 1857 05f4 05       		.uleb128 0x5
 1858 05f5 03       		.byte	0x3
 1859 05f6 1C000000 		.4byte	fix16_overflow
 1860 05fa 08       		.uleb128 0x8
 1861 05fb 24010000 		.4byte	.LASF59
 1862 05ff 04       		.byte	0x4
 1863 0600 22       		.byte	0x22
 1864 0601 7E050000 		.4byte	0x57e
 1865 0605 05       		.uleb128 0x5
 1866 0606 03       		.byte	0x3
 1867 0607 20000000 		.4byte	fix16_pi
 1868 060b 08       		.uleb128 0x8
 1869 060c C2020000 		.4byte	.LASF60
 1870 0610 04       		.byte	0x4
 1871 0611 23       		.byte	0x23
 1872 0612 7E050000 		.4byte	0x57e
 1873 0616 05       		.uleb128 0x5
 1874 0617 03       		.byte	0x3
 1875 0618 24000000 		.4byte	fix16_e
 1876 061c 08       		.uleb128 0x8
 1877 061d A5020000 		.4byte	.LASF61
 1878 0621 04       		.byte	0x4
 1879 0622 24       		.byte	0x24
 1880 0623 7E050000 		.4byte	0x57e
 1881 0627 05       		.uleb128 0x5
 1882 0628 03       		.byte	0x3
 1883 0629 28000000 		.4byte	fix16_one
 1884 062d 00       		.byte	0
 1885              		.section	.debug_abbrev,"",%progbits
 1886              	.Ldebug_abbrev0:
 1887 0000 01       		.uleb128 0x1
 1888 0001 11       		.uleb128 0x11
 1889 0002 01       		.byte	0x1
 1890 0003 25       		.uleb128 0x25
 1891 0004 0E       		.uleb128 0xe
 1892 0005 13       		.uleb128 0x13
 1893 0006 0B       		.uleb128 0xb
 1894 0007 03       		.uleb128 0x3
 1895 0008 0E       		.uleb128 0xe
 1896 0009 1B       		.uleb128 0x1b
 1897 000a 0E       		.uleb128 0xe
 1898 000b 55       		.uleb128 0x55
 1899 000c 17       		.uleb128 0x17
 1900 000d 11       		.uleb128 0x11
 1901 000e 01       		.uleb128 0x1
 1902 000f 10       		.uleb128 0x10
 1903 0010 17       		.uleb128 0x17
 1904 0011 00       		.byte	0
 1905 0012 00       		.byte	0
 1906 0013 02       		.uleb128 0x2
 1907 0014 24       		.uleb128 0x24
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 43


 1908 0015 00       		.byte	0
 1909 0016 0B       		.uleb128 0xb
 1910 0017 0B       		.uleb128 0xb
 1911 0018 3E       		.uleb128 0x3e
 1912 0019 0B       		.uleb128 0xb
 1913 001a 03       		.uleb128 0x3
 1914 001b 0E       		.uleb128 0xe
 1915 001c 00       		.byte	0
 1916 001d 00       		.byte	0
 1917 001e 03       		.uleb128 0x3
 1918 001f 16       		.uleb128 0x16
 1919 0020 00       		.byte	0
 1920 0021 03       		.uleb128 0x3
 1921 0022 0E       		.uleb128 0xe
 1922 0023 3A       		.uleb128 0x3a
 1923 0024 0B       		.uleb128 0xb
 1924 0025 3B       		.uleb128 0x3b
 1925 0026 0B       		.uleb128 0xb
 1926 0027 49       		.uleb128 0x49
 1927 0028 13       		.uleb128 0x13
 1928 0029 00       		.byte	0
 1929 002a 00       		.byte	0
 1930 002b 04       		.uleb128 0x4
 1931 002c 24       		.uleb128 0x24
 1932 002d 00       		.byte	0
 1933 002e 0B       		.uleb128 0xb
 1934 002f 0B       		.uleb128 0xb
 1935 0030 3E       		.uleb128 0x3e
 1936 0031 0B       		.uleb128 0xb
 1937 0032 03       		.uleb128 0x3
 1938 0033 08       		.uleb128 0x8
 1939 0034 00       		.byte	0
 1940 0035 00       		.byte	0
 1941 0036 05       		.uleb128 0x5
 1942 0037 2E       		.uleb128 0x2e
 1943 0038 01       		.byte	0x1
 1944 0039 3F       		.uleb128 0x3f
 1945 003a 19       		.uleb128 0x19
 1946 003b 03       		.uleb128 0x3
 1947 003c 0E       		.uleb128 0xe
 1948 003d 3A       		.uleb128 0x3a
 1949 003e 0B       		.uleb128 0xb
 1950 003f 3B       		.uleb128 0x3b
 1951 0040 0B       		.uleb128 0xb
 1952 0041 27       		.uleb128 0x27
 1953 0042 19       		.uleb128 0x19
 1954 0043 49       		.uleb128 0x49
 1955 0044 13       		.uleb128 0x13
 1956 0045 11       		.uleb128 0x11
 1957 0046 01       		.uleb128 0x1
 1958 0047 12       		.uleb128 0x12
 1959 0048 06       		.uleb128 0x6
 1960 0049 40       		.uleb128 0x40
 1961 004a 18       		.uleb128 0x18
 1962 004b 9742     		.uleb128 0x2117
 1963 004d 19       		.uleb128 0x19
 1964 004e 01       		.uleb128 0x1
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 44


 1965 004f 13       		.uleb128 0x13
 1966 0050 00       		.byte	0
 1967 0051 00       		.byte	0
 1968 0052 06       		.uleb128 0x6
 1969 0053 05       		.uleb128 0x5
 1970 0054 00       		.byte	0
 1971 0055 03       		.uleb128 0x3
 1972 0056 08       		.uleb128 0x8
 1973 0057 3A       		.uleb128 0x3a
 1974 0058 0B       		.uleb128 0xb
 1975 0059 3B       		.uleb128 0x3b
 1976 005a 0B       		.uleb128 0xb
 1977 005b 49       		.uleb128 0x49
 1978 005c 13       		.uleb128 0x13
 1979 005d 02       		.uleb128 0x2
 1980 005e 18       		.uleb128 0x18
 1981 005f 00       		.byte	0
 1982 0060 00       		.byte	0
 1983 0061 07       		.uleb128 0x7
 1984 0062 34       		.uleb128 0x34
 1985 0063 00       		.byte	0
 1986 0064 03       		.uleb128 0x3
 1987 0065 08       		.uleb128 0x8
 1988 0066 3A       		.uleb128 0x3a
 1989 0067 0B       		.uleb128 0xb
 1990 0068 3B       		.uleb128 0x3b
 1991 0069 0B       		.uleb128 0xb
 1992 006a 49       		.uleb128 0x49
 1993 006b 13       		.uleb128 0x13
 1994 006c 02       		.uleb128 0x2
 1995 006d 18       		.uleb128 0x18
 1996 006e 00       		.byte	0
 1997 006f 00       		.byte	0
 1998 0070 08       		.uleb128 0x8
 1999 0071 34       		.uleb128 0x34
 2000 0072 00       		.byte	0
 2001 0073 03       		.uleb128 0x3
 2002 0074 0E       		.uleb128 0xe
 2003 0075 3A       		.uleb128 0x3a
 2004 0076 0B       		.uleb128 0xb
 2005 0077 3B       		.uleb128 0x3b
 2006 0078 0B       		.uleb128 0xb
 2007 0079 49       		.uleb128 0x49
 2008 007a 13       		.uleb128 0x13
 2009 007b 02       		.uleb128 0x2
 2010 007c 18       		.uleb128 0x18
 2011 007d 00       		.byte	0
 2012 007e 00       		.byte	0
 2013 007f 09       		.uleb128 0x9
 2014 0080 2E       		.uleb128 0x2e
 2015 0081 01       		.byte	0x1
 2016 0082 3F       		.uleb128 0x3f
 2017 0083 19       		.uleb128 0x19
 2018 0084 03       		.uleb128 0x3
 2019 0085 0E       		.uleb128 0xe
 2020 0086 3A       		.uleb128 0x3a
 2021 0087 0B       		.uleb128 0xb
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 45


 2022 0088 3B       		.uleb128 0x3b
 2023 0089 0B       		.uleb128 0xb
 2024 008a 27       		.uleb128 0x27
 2025 008b 19       		.uleb128 0x19
 2026 008c 49       		.uleb128 0x49
 2027 008d 13       		.uleb128 0x13
 2028 008e 11       		.uleb128 0x11
 2029 008f 01       		.uleb128 0x1
 2030 0090 12       		.uleb128 0x12
 2031 0091 06       		.uleb128 0x6
 2032 0092 40       		.uleb128 0x40
 2033 0093 18       		.uleb128 0x18
 2034 0094 9642     		.uleb128 0x2116
 2035 0096 19       		.uleb128 0x19
 2036 0097 01       		.uleb128 0x1
 2037 0098 13       		.uleb128 0x13
 2038 0099 00       		.byte	0
 2039 009a 00       		.byte	0
 2040 009b 0A       		.uleb128 0xa
 2041 009c 05       		.uleb128 0x5
 2042 009d 00       		.byte	0
 2043 009e 03       		.uleb128 0x3
 2044 009f 0E       		.uleb128 0xe
 2045 00a0 3A       		.uleb128 0x3a
 2046 00a1 0B       		.uleb128 0xb
 2047 00a2 3B       		.uleb128 0x3b
 2048 00a3 0B       		.uleb128 0xb
 2049 00a4 49       		.uleb128 0x49
 2050 00a5 13       		.uleb128 0x13
 2051 00a6 02       		.uleb128 0x2
 2052 00a7 18       		.uleb128 0x18
 2053 00a8 00       		.byte	0
 2054 00a9 00       		.byte	0
 2055 00aa 0B       		.uleb128 0xb
 2056 00ab 34       		.uleb128 0x34
 2057 00ac 00       		.byte	0
 2058 00ad 03       		.uleb128 0x3
 2059 00ae 0E       		.uleb128 0xe
 2060 00af 3A       		.uleb128 0x3a
 2061 00b0 0B       		.uleb128 0xb
 2062 00b1 3B       		.uleb128 0x3b
 2063 00b2 05       		.uleb128 0x5
 2064 00b3 49       		.uleb128 0x49
 2065 00b4 13       		.uleb128 0x13
 2066 00b5 02       		.uleb128 0x2
 2067 00b6 18       		.uleb128 0x18
 2068 00b7 00       		.byte	0
 2069 00b8 00       		.byte	0
 2070 00b9 0C       		.uleb128 0xc
 2071 00ba 2E       		.uleb128 0x2e
 2072 00bb 01       		.byte	0x1
 2073 00bc 3F       		.uleb128 0x3f
 2074 00bd 19       		.uleb128 0x19
 2075 00be 03       		.uleb128 0x3
 2076 00bf 0E       		.uleb128 0xe
 2077 00c0 3A       		.uleb128 0x3a
 2078 00c1 0B       		.uleb128 0xb
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 46


 2079 00c2 3B       		.uleb128 0x3b
 2080 00c3 05       		.uleb128 0x5
 2081 00c4 27       		.uleb128 0x27
 2082 00c5 19       		.uleb128 0x19
 2083 00c6 49       		.uleb128 0x49
 2084 00c7 13       		.uleb128 0x13
 2085 00c8 11       		.uleb128 0x11
 2086 00c9 01       		.uleb128 0x1
 2087 00ca 12       		.uleb128 0x12
 2088 00cb 06       		.uleb128 0x6
 2089 00cc 40       		.uleb128 0x40
 2090 00cd 18       		.uleb128 0x18
 2091 00ce 9642     		.uleb128 0x2116
 2092 00d0 19       		.uleb128 0x19
 2093 00d1 01       		.uleb128 0x1
 2094 00d2 13       		.uleb128 0x13
 2095 00d3 00       		.byte	0
 2096 00d4 00       		.byte	0
 2097 00d5 0D       		.uleb128 0xd
 2098 00d6 05       		.uleb128 0x5
 2099 00d7 00       		.byte	0
 2100 00d8 03       		.uleb128 0x3
 2101 00d9 08       		.uleb128 0x8
 2102 00da 3A       		.uleb128 0x3a
 2103 00db 0B       		.uleb128 0xb
 2104 00dc 3B       		.uleb128 0x3b
 2105 00dd 05       		.uleb128 0x5
 2106 00de 49       		.uleb128 0x49
 2107 00df 13       		.uleb128 0x13
 2108 00e0 02       		.uleb128 0x2
 2109 00e1 18       		.uleb128 0x18
 2110 00e2 00       		.byte	0
 2111 00e3 00       		.byte	0
 2112 00e4 0E       		.uleb128 0xe
 2113 00e5 0B       		.uleb128 0xb
 2114 00e6 01       		.byte	0x1
 2115 00e7 11       		.uleb128 0x11
 2116 00e8 01       		.uleb128 0x1
 2117 00e9 12       		.uleb128 0x12
 2118 00ea 06       		.uleb128 0x6
 2119 00eb 01       		.uleb128 0x1
 2120 00ec 13       		.uleb128 0x13
 2121 00ed 00       		.byte	0
 2122 00ee 00       		.byte	0
 2123 00ef 0F       		.uleb128 0xf
 2124 00f0 0B       		.uleb128 0xb
 2125 00f1 01       		.byte	0x1
 2126 00f2 11       		.uleb128 0x11
 2127 00f3 01       		.uleb128 0x1
 2128 00f4 12       		.uleb128 0x12
 2129 00f5 06       		.uleb128 0x6
 2130 00f6 00       		.byte	0
 2131 00f7 00       		.byte	0
 2132 00f8 10       		.uleb128 0x10
 2133 00f9 34       		.uleb128 0x34
 2134 00fa 00       		.byte	0
 2135 00fb 03       		.uleb128 0x3
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 47


 2136 00fc 08       		.uleb128 0x8
 2137 00fd 3A       		.uleb128 0x3a
 2138 00fe 0B       		.uleb128 0xb
 2139 00ff 3B       		.uleb128 0x3b
 2140 0100 05       		.uleb128 0x5
 2141 0101 49       		.uleb128 0x49
 2142 0102 13       		.uleb128 0x13
 2143 0103 02       		.uleb128 0x2
 2144 0104 18       		.uleb128 0x18
 2145 0105 00       		.byte	0
 2146 0106 00       		.byte	0
 2147 0107 11       		.uleb128 0x11
 2148 0108 05       		.uleb128 0x5
 2149 0109 00       		.byte	0
 2150 010a 03       		.uleb128 0x3
 2151 010b 0E       		.uleb128 0xe
 2152 010c 3A       		.uleb128 0x3a
 2153 010d 0B       		.uleb128 0xb
 2154 010e 3B       		.uleb128 0x3b
 2155 010f 05       		.uleb128 0x5
 2156 0110 49       		.uleb128 0x49
 2157 0111 13       		.uleb128 0x13
 2158 0112 02       		.uleb128 0x2
 2159 0113 18       		.uleb128 0x18
 2160 0114 00       		.byte	0
 2161 0115 00       		.byte	0
 2162 0116 12       		.uleb128 0x12
 2163 0117 2E       		.uleb128 0x2e
 2164 0118 01       		.byte	0x1
 2165 0119 3F       		.uleb128 0x3f
 2166 011a 19       		.uleb128 0x19
 2167 011b 03       		.uleb128 0x3
 2168 011c 0E       		.uleb128 0xe
 2169 011d 3A       		.uleb128 0x3a
 2170 011e 0B       		.uleb128 0xb
 2171 011f 3B       		.uleb128 0x3b
 2172 0120 05       		.uleb128 0x5
 2173 0121 49       		.uleb128 0x49
 2174 0122 13       		.uleb128 0x13
 2175 0123 3C       		.uleb128 0x3c
 2176 0124 19       		.uleb128 0x19
 2177 0125 01       		.uleb128 0x1
 2178 0126 13       		.uleb128 0x13
 2179 0127 00       		.byte	0
 2180 0128 00       		.byte	0
 2181 0129 13       		.uleb128 0x13
 2182 012a 18       		.uleb128 0x18
 2183 012b 00       		.byte	0
 2184 012c 00       		.byte	0
 2185 012d 00       		.byte	0
 2186 012e 14       		.uleb128 0x14
 2187 012f 2E       		.uleb128 0x2e
 2188 0130 01       		.byte	0x1
 2189 0131 3F       		.uleb128 0x3f
 2190 0132 19       		.uleb128 0x19
 2191 0133 03       		.uleb128 0x3
 2192 0134 0E       		.uleb128 0xe
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 48


 2193 0135 3A       		.uleb128 0x3a
 2194 0136 0B       		.uleb128 0xb
 2195 0137 3B       		.uleb128 0x3b
 2196 0138 05       		.uleb128 0x5
 2197 0139 49       		.uleb128 0x49
 2198 013a 13       		.uleb128 0x13
 2199 013b 3C       		.uleb128 0x3c
 2200 013c 19       		.uleb128 0x19
 2201 013d 00       		.byte	0
 2202 013e 00       		.byte	0
 2203 013f 15       		.uleb128 0x15
 2204 0140 26       		.uleb128 0x26
 2205 0141 00       		.byte	0
 2206 0142 49       		.uleb128 0x49
 2207 0143 13       		.uleb128 0x13
 2208 0144 00       		.byte	0
 2209 0145 00       		.byte	0
 2210 0146 00       		.byte	0
 2211              		.section	.debug_aranges,"",%progbits
 2212 0000 6C000000 		.4byte	0x6c
 2213 0004 0200     		.2byte	0x2
 2214 0006 00000000 		.4byte	.Ldebug_info0
 2215 000a 04       		.byte	0x4
 2216 000b 00       		.byte	0
 2217 000c 0000     		.2byte	0
 2218 000e 0000     		.2byte	0
 2219 0010 00000000 		.4byte	.LFB6
 2220 0014 3A000000 		.4byte	.LFE6-.LFB6
 2221 0018 00000000 		.4byte	.LFB7
 2222 001c 3A000000 		.4byte	.LFE7-.LFB7
 2223 0020 00000000 		.4byte	.LFB8
 2224 0024 44000000 		.4byte	.LFE8-.LFB8
 2225 0028 00000000 		.4byte	.LFB9
 2226 002c 44000000 		.4byte	.LFE9-.LFB9
 2227 0030 00000000 		.4byte	.LFB10
 2228 0034 C0000000 		.4byte	.LFE10-.LFB10
 2229 0038 00000000 		.4byte	.LFB11
 2230 003c 54000000 		.4byte	.LFE11-.LFB11
 2231 0040 00000000 		.4byte	.LFB12
 2232 0044 58010000 		.4byte	.LFE12-.LFB12
 2233 0048 00000000 		.4byte	.LFB13
 2234 004c 54000000 		.4byte	.LFE13-.LFB13
 2235 0050 00000000 		.4byte	.LFB14
 2236 0054 7C000000 		.4byte	.LFE14-.LFB14
 2237 0058 00000000 		.4byte	.LFB15
 2238 005c 7C000000 		.4byte	.LFE15-.LFB15
 2239 0060 00000000 		.4byte	.LFB16
 2240 0064 74000000 		.4byte	.LFE16-.LFB16
 2241 0068 00000000 		.4byte	0
 2242 006c 00000000 		.4byte	0
 2243              		.section	.debug_ranges,"",%progbits
 2244              	.Ldebug_ranges0:
 2245 0000 00000000 		.4byte	.LFB6
 2246 0004 3A000000 		.4byte	.LFE6
 2247 0008 00000000 		.4byte	.LFB7
 2248 000c 3A000000 		.4byte	.LFE7
 2249 0010 00000000 		.4byte	.LFB8
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 49


 2250 0014 44000000 		.4byte	.LFE8
 2251 0018 00000000 		.4byte	.LFB9
 2252 001c 44000000 		.4byte	.LFE9
 2253 0020 00000000 		.4byte	.LFB10
 2254 0024 C0000000 		.4byte	.LFE10
 2255 0028 00000000 		.4byte	.LFB11
 2256 002c 54000000 		.4byte	.LFE11
 2257 0030 00000000 		.4byte	.LFB12
 2258 0034 58010000 		.4byte	.LFE12
 2259 0038 00000000 		.4byte	.LFB13
 2260 003c 54000000 		.4byte	.LFE13
 2261 0040 00000000 		.4byte	.LFB14
 2262 0044 7C000000 		.4byte	.LFE14
 2263 0048 00000000 		.4byte	.LFB15
 2264 004c 7C000000 		.4byte	.LFE15
 2265 0050 00000000 		.4byte	.LFB16
 2266 0054 74000000 		.4byte	.LFE16
 2267 0058 00000000 		.4byte	0
 2268 005c 00000000 		.4byte	0
 2269              		.section	.debug_line,"",%progbits
 2270              	.Ldebug_line0:
 2271 0000 A0020000 		.section	.debug_str,"MS",%progbits,1
 2271      02003401 
 2271      00000201 
 2271      FB0E0D00 
 2271      01010101 
 2272              	.LASF23:
 2273 0000 66697831 		.ascii	"fix16_sub\000"
 2273      365F7375 
 2273      6200
 2274              	.LASF29:
 2275 000a 696E4172 		.ascii	"inArg0\000"
 2275      673000
 2276              	.LASF30:
 2277 0011 696E4172 		.ascii	"inArg1\000"
 2277      673100
 2278              	.LASF44:
 2279 0018 74656D70 		.ascii	"tempOut\000"
 2279      4F757400 
 2280              	.LASF32:
 2281 0020 75707065 		.ascii	"upper\000"
 2281      7200
 2282              	.LASF24:
 2283 0026 64696666 		.ascii	"diff\000"
 2283      00
 2284              	.LASF20:
 2285 002b 75696E74 		.ascii	"uint64_t\000"
 2285      36345F74 
 2285      00
 2286              	.LASF2:
 2287 0034 73686F72 		.ascii	"short int\000"
 2287      7420696E 
 2287      7400
 2288              	.LASF52:
 2289 003e 5F464F55 		.ascii	"_FOUR_DIV_PI2\000"
 2289      525F4449 
 2289      565F5049 
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 50


 2289      3200
 2290              	.LASF33:
 2291 004c 66697831 		.ascii	"fix16_smul\000"
 2291      365F736D 
 2291      756C00
 2292              	.LASF8:
 2293 0057 5F5F7569 		.ascii	"__uint32_t\000"
 2293      6E743332 
 2293      5F7400
 2294              	.LASF64:
 2295 0062 433A5C55 		.ascii	"C:\\Users\\Felix\\Git Repository\\E4PRJ4\\Implement"
 2295      73657273 
 2295      5C46656C 
 2295      69785C47 
 2295      69742052 
 2296 0090 6572696E 		.ascii	"ering\\Vuggesystem\\Vinkelsensor.cydsn\000"
 2296      675C5675 
 2296      67676573 
 2296      79737465 
 2296      6D5C5669 
 2297              	.LASF4:
 2298 00b5 5F5F7569 		.ascii	"__uint16_t\000"
 2298      6E743136 
 2298      5F7400
 2299              	.LASF19:
 2300 00c0 696E7436 		.ascii	"int64_t\000"
 2300      345F7400 
 2301              	.LASF15:
 2302 00c8 75696E74 		.ascii	"uint8_t\000"
 2302      385F7400 
 2303              	.LASF37:
 2304 00d0 71756F74 		.ascii	"quotient\000"
 2304      69656E74 
 2304      00
 2305              	.LASF50:
 2306 00d9 66697831 		.ascii	"fix16_lerp32\000"
 2306      365F6C65 
 2306      72703332 
 2306      00
 2307              	.LASF34:
 2308 00e6 66697831 		.ascii	"fix16_div\000"
 2308      365F6469 
 2308      7600
 2309              	.LASF47:
 2310 00f0 696E7436 		.ascii	"int64_shift\000"
 2310      345F7368 
 2310      69667400 
 2311              	.LASF11:
 2312 00fc 6C6F6E67 		.ascii	"long long int\000"
 2312      206C6F6E 
 2312      6720696E 
 2312      7400
 2313              	.LASF7:
 2314 010a 6C6F6E67 		.ascii	"long int\000"
 2314      20696E74 
 2314      00
 2315              	.LASF10:
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 51


 2316 0113 5F5F696E 		.ascii	"__int64_t\000"
 2316      7436345F 
 2316      7400
 2317              	.LASF26:
 2318 011d 72657375 		.ascii	"result\000"
 2318      6C7400
 2319              	.LASF59:
 2320 0124 66697831 		.ascii	"fix16_pi\000"
 2320      365F7069 
 2320      00
 2321              	.LASF63:
 2322 012d 2E5C6C69 		.ascii	".\\libfixmath\\fix16.c\000"
 2322      62666978 
 2322      6D617468 
 2322      5C666978 
 2322      31362E63 
 2323              	.LASF3:
 2324 0142 5F5F7569 		.ascii	"__uint8_t\000"
 2324      6E74385F 
 2324      7400
 2325              	.LASF56:
 2326 014c 66697831 		.ascii	"fix16_max\000"
 2326      365F6D61 
 2326      7800
 2327              	.LASF43:
 2328 0156 696E4672 		.ascii	"inFract\000"
 2328      61637400 
 2329              	.LASF1:
 2330 015e 756E7369 		.ascii	"unsigned char\000"
 2330      676E6564 
 2330      20636861 
 2330      7200
 2331              	.LASF54:
 2332 016c 50495F44 		.ascii	"PI_DIV_4\000"
 2332      49565F34 
 2332      00
 2333              	.LASF0:
 2334 0175 7369676E 		.ascii	"signed char\000"
 2334      65642063 
 2334      68617200 
 2335              	.LASF13:
 2336 0181 6C6F6E67 		.ascii	"long long unsigned int\000"
 2336      206C6F6E 
 2336      6720756E 
 2336      7369676E 
 2336      65642069 
 2337              	.LASF18:
 2338 0198 75696E74 		.ascii	"uint32_t\000"
 2338      33325F74 
 2338      00
 2339              	.LASF14:
 2340 01a1 756E7369 		.ascii	"unsigned int\000"
 2340      676E6564 
 2340      20696E74 
 2340      00
 2341              	.LASF57:
 2342 01ae 66697831 		.ascii	"fix16_min\000"
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 52


 2342      365F6D69 
 2342      6E00
 2343              	.LASF16:
 2344 01b8 75696E74 		.ascii	"uint16_t\000"
 2344      31365F74 
 2344      00
 2345              	.LASF22:
 2346 01c1 66697831 		.ascii	"fix16_add\000"
 2346      365F6164 
 2346      6400
 2347              	.LASF35:
 2348 01cb 72656D61 		.ascii	"remainder\000"
 2348      696E6465 
 2348      7200
 2349              	.LASF5:
 2350 01d5 73686F72 		.ascii	"short unsigned int\000"
 2350      7420756E 
 2350      7369676E 
 2350      65642069 
 2350      6E7400
 2351              	.LASF40:
 2352 01e8 73686966 		.ascii	"shift\000"
 2352      7400
 2353              	.LASF17:
 2354 01ee 696E7433 		.ascii	"int32_t\000"
 2354      325F7400 
 2355              	.LASF55:
 2356 01f6 54485245 		.ascii	"THREE_PI_DIV_4\000"
 2356      455F5049 
 2356      5F444956 
 2356      5F3400
 2357              	.LASF31:
 2358 0205 70726F64 		.ascii	"product\000"
 2358      75637400 
 2359              	.LASF21:
 2360 020d 66697831 		.ascii	"fix16_t\000"
 2360      365F7400 
 2361              	.LASF12:
 2362 0215 5F5F7569 		.ascii	"__uint64_t\000"
 2362      6E743634 
 2362      5F7400
 2363              	.LASF58:
 2364 0220 66697831 		.ascii	"fix16_overflow\000"
 2364      365F6F76 
 2364      6572666C 
 2364      6F7700
 2365              	.LASF42:
 2366 022f 66697831 		.ascii	"fix16_lerp8\000"
 2366      365F6C65 
 2366      72703800 
 2367              	.LASF48:
 2368 023b 66697831 		.ascii	"fix16_lerp16\000"
 2368      365F6C65 
 2368      72703136 
 2368      00
 2369              	.LASF28:
 2370 0248 66697831 		.ascii	"fix16_mul\000"
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 53


 2370      365F6D75 
 2370      6C00
 2371              	.LASF9:
 2372 0252 6C6F6E67 		.ascii	"long unsigned int\000"
 2372      20756E73 
 2372      69676E65 
 2372      6420696E 
 2372      7400
 2373              	.LASF27:
 2374 0264 66697831 		.ascii	"fix16_ssub\000"
 2374      365F7373 
 2374      756200
 2375              	.LASF53:
 2376 026f 58345F43 		.ascii	"X4_CORRECTION_COMPONENT\000"
 2376      4F525245 
 2376      4354494F 
 2376      4E5F434F 
 2376      4D504F4E 
 2377              	.LASF41:
 2378 0287 66697831 		.ascii	"fix16_sdiv\000"
 2378      365F7364 
 2378      697600
 2379              	.LASF6:
 2380 0292 5F5F696E 		.ascii	"__int32_t\000"
 2380      7433325F 
 2380      7400
 2381              	.LASF49:
 2382 029c 696E7436 		.ascii	"int64_lo\000"
 2382      345F6C6F 
 2382      00
 2383              	.LASF61:
 2384 02a5 66697831 		.ascii	"fix16_one\000"
 2384      365F6F6E 
 2384      6500
 2385              	.LASF38:
 2386 02af 6269745F 		.ascii	"bit_pos\000"
 2386      706F7300 
 2387              	.LASF25:
 2388 02b7 66697831 		.ascii	"fix16_sadd\000"
 2388      365F7361 
 2388      646400
 2389              	.LASF60:
 2390 02c2 66697831 		.ascii	"fix16_e\000"
 2390      365F6500 
 2391              	.LASF45:
 2392 02ca 696E7436 		.ascii	"int64_mul_i32_i32\000"
 2392      345F6D75 
 2392      6C5F6933 
 2392      325F6933 
 2392      3200
 2393              	.LASF51:
 2394 02dc 464F5552 		.ascii	"FOUR_DIV_PI\000"
 2394      5F444956 
 2394      5F504900 
 2395              	.LASF36:
 2396 02e8 64697669 		.ascii	"divider\000"
 2396      64657200 
ARM GAS  C:\Users\Felix\AppData\Local\Temp\ccHz6Ccb.s 			page 54


 2397              	.LASF62:
 2398 02f0 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2398      4320342E 
 2398      382E3420 
 2398      32303134 
 2398      30353236 
 2399 0323 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2399      20726576 
 2399      6973696F 
 2399      6E203231 
 2399      31333538 
 2400 0356 30202D66 		.ascii	"0 -ffunction-sections\000"
 2400      66756E63 
 2400      74696F6E 
 2400      2D736563 
 2400      74696F6E 
 2401              	.LASF46:
 2402 036c 696E7436 		.ascii	"int64_add\000"
 2402      345F6164 
 2402      6400
 2403              	.LASF39:
 2404 0376 73686966 		.ascii	"shifted_div\000"
 2404      7465645F 
 2404      64697600 
 2405              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
