ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"debugOut_IntClock.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.debugOut_IntClock_Start,"ax",%progbits
  18              		.align	2
  19              		.global	debugOut_IntClock_Start
  20              		.code	16
  21              		.thumb_func
  22              		.type	debugOut_IntClock_Start, %function
  23              	debugOut_IntClock_Start:
  24              	.LFB0:
  25              		.file 1 ".\\Generated_Source\\PSoC4\\debugOut_IntClock.c"
   1:.\Generated_Source\PSoC4/debugOut_IntClock.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * File Name: debugOut_IntClock.c
   3:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Version 2.20
   4:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
   5:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  Description:
   6:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *   Provides system API for the clocking, interrupts and watchdog timer.
   7:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
   8:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  Note:
   9:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *   Documentation of the API's in this file is located in the
  10:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *   System Reference Guide provided with PSoC Creator.
  11:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
  12:.\Generated_Source\PSoC4/debugOut_IntClock.c **** ********************************************************************************
  13:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  14:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * the software package with which this file was provided.
  17:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *******************************************************************************/
  18:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
  19:.\Generated_Source\PSoC4/debugOut_IntClock.c **** #include <cydevice_trm.h>
  20:.\Generated_Source\PSoC4/debugOut_IntClock.c **** #include "debugOut_IntClock.h"
  21:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
  22:.\Generated_Source\PSoC4/debugOut_IntClock.c **** #if defined CYREG_PERI_DIV_CMD
  23:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
  24:.\Generated_Source\PSoC4/debugOut_IntClock.c **** /*******************************************************************************
  25:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Function Name: debugOut_IntClock_StartEx
  26:.\Generated_Source\PSoC4/debugOut_IntClock.c **** ********************************************************************************
  27:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
  28:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Summary:
  29:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  Starts the clock, aligned to the specified running clock.
  30:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
  31:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Parameters:
  32:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  alignClkDiv:  The divider to which phase alignment is performed when the
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 2


  33:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *    clock is started.
  34:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
  35:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Returns:
  36:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  None
  37:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
  38:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *******************************************************************************/
  39:.\Generated_Source\PSoC4/debugOut_IntClock.c **** void debugOut_IntClock_StartEx(uint32 alignClkDiv)
  40:.\Generated_Source\PSoC4/debugOut_IntClock.c **** {
  41:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     /* Make sure any previous start command has finished. */
  42:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     while((debugOut_IntClock_CMD_REG & debugOut_IntClock_CMD_ENABLE_MASK) != 0u)
  43:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     {
  44:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     }
  45:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     
  46:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     /* Specify the target divider and it's alignment divider, and enable. */
  47:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     debugOut_IntClock_CMD_REG =
  48:.\Generated_Source\PSoC4/debugOut_IntClock.c ****         ((uint32)debugOut_IntClock__DIV_ID << debugOut_IntClock_CMD_DIV_SHIFT)|
  49:.\Generated_Source\PSoC4/debugOut_IntClock.c ****         (alignClkDiv << debugOut_IntClock_CMD_PA_DIV_SHIFT) |
  50:.\Generated_Source\PSoC4/debugOut_IntClock.c ****         (uint32)debugOut_IntClock_CMD_ENABLE_MASK;
  51:.\Generated_Source\PSoC4/debugOut_IntClock.c **** }
  52:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
  53:.\Generated_Source\PSoC4/debugOut_IntClock.c **** #else
  54:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
  55:.\Generated_Source\PSoC4/debugOut_IntClock.c **** /*******************************************************************************
  56:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Function Name: debugOut_IntClock_Start
  57:.\Generated_Source\PSoC4/debugOut_IntClock.c **** ********************************************************************************
  58:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
  59:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Summary:
  60:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  Starts the clock.
  61:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
  62:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Parameters:
  63:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  None
  64:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
  65:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Returns:
  66:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  None
  67:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
  68:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *******************************************************************************/
  69:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
  70:.\Generated_Source\PSoC4/debugOut_IntClock.c **** void debugOut_IntClock_Start(void)
  71:.\Generated_Source\PSoC4/debugOut_IntClock.c **** {
  26              		.loc 1 71 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 00AF     		add	r7, sp, #0
  33              		.cfi_def_cfa_register 7
  72:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     /* Set the bit to enable the clock. */
  73:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     debugOut_IntClock_ENABLE_REG |= debugOut_IntClock__ENABLE_MASK;
  34              		.loc 1 73 0
  35 0004 044B     		ldr	r3, .L2
  36 0006 044A     		ldr	r2, .L2
  37 0008 1268     		ldr	r2, [r2]
  38 000a 8021     		mov	r1, #128
  39 000c 0906     		lsl	r1, r1, #24
  40 000e 0A43     		orr	r2, r1
  41 0010 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 3


  74:.\Generated_Source\PSoC4/debugOut_IntClock.c **** }
  42              		.loc 1 74 0
  43 0012 BD46     		mov	sp, r7
  44              		@ sp needed
  45 0014 80BD     		pop	{r7, pc}
  46              	.L3:
  47 0016 C046     		.align	2
  48              	.L2:
  49 0018 04000240 		.word	1073872900
  50              		.cfi_endproc
  51              	.LFE0:
  52              		.size	debugOut_IntClock_Start, .-debugOut_IntClock_Start
  53              		.section	.text.debugOut_IntClock_Stop,"ax",%progbits
  54              		.align	2
  55              		.global	debugOut_IntClock_Stop
  56              		.code	16
  57              		.thumb_func
  58              		.type	debugOut_IntClock_Stop, %function
  59              	debugOut_IntClock_Stop:
  60              	.LFB1:
  75:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
  76:.\Generated_Source\PSoC4/debugOut_IntClock.c **** #endif /* CYREG_PERI_DIV_CMD */
  77:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
  78:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
  79:.\Generated_Source\PSoC4/debugOut_IntClock.c **** /*******************************************************************************
  80:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Function Name: debugOut_IntClock_Stop
  81:.\Generated_Source\PSoC4/debugOut_IntClock.c **** ********************************************************************************
  82:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
  83:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Summary:
  84:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  Stops the clock and returns immediately. This API does not require the
  85:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  source clock to be running but may return before the hardware is actually
  86:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  disabled.
  87:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
  88:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Parameters:
  89:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  None
  90:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
  91:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Returns:
  92:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  None
  93:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
  94:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *******************************************************************************/
  95:.\Generated_Source\PSoC4/debugOut_IntClock.c **** void debugOut_IntClock_Stop(void)
  96:.\Generated_Source\PSoC4/debugOut_IntClock.c **** {
  61              		.loc 1 96 0
  62              		.cfi_startproc
  63 0000 80B5     		push	{r7, lr}
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
  67 0002 00AF     		add	r7, sp, #0
  68              		.cfi_def_cfa_register 7
  97:.\Generated_Source\PSoC4/debugOut_IntClock.c **** #if defined CYREG_PERI_DIV_CMD
  98:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
  99:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     /* Make sure any previous start command has finished. */
 100:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     while((debugOut_IntClock_CMD_REG & debugOut_IntClock_CMD_ENABLE_MASK) != 0u)
 101:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     {
 102:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     }
 103:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 4


 104:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     /* Specify the target divider and it's alignment divider, and disable. */
 105:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     debugOut_IntClock_CMD_REG =
 106:.\Generated_Source\PSoC4/debugOut_IntClock.c ****         ((uint32)debugOut_IntClock__DIV_ID << debugOut_IntClock_CMD_DIV_SHIFT)|
 107:.\Generated_Source\PSoC4/debugOut_IntClock.c ****         ((uint32)debugOut_IntClock_CMD_DISABLE_MASK);
 108:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
 109:.\Generated_Source\PSoC4/debugOut_IntClock.c **** #else
 110:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
 111:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     /* Clear the bit to disable the clock. */
 112:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     debugOut_IntClock_ENABLE_REG &= (uint32)(~debugOut_IntClock__ENABLE_MASK);
  69              		.loc 1 112 0
  70 0004 034B     		ldr	r3, .L5
  71 0006 034A     		ldr	r2, .L5
  72 0008 1268     		ldr	r2, [r2]
  73 000a 5200     		lsl	r2, r2, #1
  74 000c 5208     		lsr	r2, r2, #1
  75 000e 1A60     		str	r2, [r3]
 113:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     
 114:.\Generated_Source\PSoC4/debugOut_IntClock.c **** #endif /* CYREG_PERI_DIV_CMD */
 115:.\Generated_Source\PSoC4/debugOut_IntClock.c **** }
  76              		.loc 1 115 0
  77 0010 BD46     		mov	sp, r7
  78              		@ sp needed
  79 0012 80BD     		pop	{r7, pc}
  80              	.L6:
  81              		.align	2
  82              	.L5:
  83 0014 04000240 		.word	1073872900
  84              		.cfi_endproc
  85              	.LFE1:
  86              		.size	debugOut_IntClock_Stop, .-debugOut_IntClock_Stop
  87              		.section	.text.debugOut_IntClock_SetFractionalDividerRegister,"ax",%progbits
  88              		.align	2
  89              		.global	debugOut_IntClock_SetFractionalDividerRegister
  90              		.code	16
  91              		.thumb_func
  92              		.type	debugOut_IntClock_SetFractionalDividerRegister, %function
  93              	debugOut_IntClock_SetFractionalDividerRegister:
  94              	.LFB2:
 116:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
 117:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
 118:.\Generated_Source\PSoC4/debugOut_IntClock.c **** /*******************************************************************************
 119:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Function Name: debugOut_IntClock_SetFractionalDividerRegister
 120:.\Generated_Source\PSoC4/debugOut_IntClock.c **** ********************************************************************************
 121:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
 122:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Summary:
 123:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  Modifies the clock divider and the fractional divider.
 124:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
 125:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Parameters:
 126:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  clkDivider:  Divider register value (0-65535). This value is NOT the
 127:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *    divider; the clock hardware divides by clkDivider plus one. For example,
 128:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *    to divide the clock by 2, this parameter should be set to 1.
 129:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  fracDivider:  Fractional Divider register value (0-31).
 130:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Returns:
 131:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  None
 132:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
 133:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *******************************************************************************/
 134:.\Generated_Source\PSoC4/debugOut_IntClock.c **** void debugOut_IntClock_SetFractionalDividerRegister(uint16 clkDivider, uint8 clkFractional)
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 5


 135:.\Generated_Source\PSoC4/debugOut_IntClock.c **** {
  95              		.loc 1 135 0
  96              		.cfi_startproc
  97 0000 80B5     		push	{r7, lr}
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 7, -8
 100              		.cfi_offset 14, -4
 101 0002 84B0     		sub	sp, sp, #16
 102              		.cfi_def_cfa_offset 24
 103 0004 00AF     		add	r7, sp, #0
 104              		.cfi_def_cfa_register 7
 105 0006 0A1C     		mov	r2, r1
 106 0008 BB1D     		add	r3, r7, #6
 107 000a 011C     		add	r1, r0, #0
 108 000c 1980     		strh	r1, [r3]
 109 000e 7B1D     		add	r3, r7, #5
 110 0010 1A70     		strb	r2, [r3]
 136:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     uint32 maskVal;
 137:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     uint32 regVal;
 138:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     
 139:.\Generated_Source\PSoC4/debugOut_IntClock.c **** #if defined (debugOut_IntClock__FRAC_MASK) || defined (CYREG_PERI_DIV_CMD)
 140:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     
 141:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 	/* get all but divider bits */
 142:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     maskVal = debugOut_IntClock_DIV_REG & 
 143:.\Generated_Source\PSoC4/debugOut_IntClock.c ****                     (uint32)(~(uint32)(debugOut_IntClock_DIV_INT_MASK | debugOut_IntClock_DIV_FRAC_
 144:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 	/* combine mask and new divider vals into 32-bit value */
 145:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     regVal = maskVal |
 146:.\Generated_Source\PSoC4/debugOut_IntClock.c ****         ((uint32)((uint32)clkDivider <<  debugOut_IntClock_DIV_INT_SHIFT) & debugOut_IntClock_DIV_I
 147:.\Generated_Source\PSoC4/debugOut_IntClock.c ****         ((uint32)((uint32)clkFractional << debugOut_IntClock_DIV_FRAC_SHIFT) & debugOut_IntClock_DI
 148:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     
 149:.\Generated_Source\PSoC4/debugOut_IntClock.c **** #else
 150:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     /* get all but integer divider bits */
 151:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     maskVal = debugOut_IntClock_DIV_REG & (uint32)(~(uint32)debugOut_IntClock__DIVIDER_MASK);
 111              		.loc 1 151 0
 112 0012 084B     		ldr	r3, .L8
 113 0014 1B68     		ldr	r3, [r3]
 114 0016 1B0C     		lsr	r3, r3, #16
 115 0018 1B04     		lsl	r3, r3, #16
 116 001a FB60     		str	r3, [r7, #12]
 152:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     /* combine mask and new divider val into 32-bit value */
 153:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     regVal = clkDivider | maskVal;
 117              		.loc 1 153 0
 118 001c BB1D     		add	r3, r7, #6
 119 001e 1A88     		ldrh	r2, [r3]
 120 0020 FB68     		ldr	r3, [r7, #12]
 121 0022 1343     		orr	r3, r2
 122 0024 BB60     		str	r3, [r7, #8]
 154:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     
 155:.\Generated_Source\PSoC4/debugOut_IntClock.c **** #endif /* debugOut_IntClock__FRAC_MASK || CYREG_PERI_DIV_CMD */
 156:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
 157:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     debugOut_IntClock_DIV_REG = regVal;
 123              		.loc 1 157 0
 124 0026 034B     		ldr	r3, .L8
 125 0028 BA68     		ldr	r2, [r7, #8]
 126 002a 1A60     		str	r2, [r3]
 158:.\Generated_Source\PSoC4/debugOut_IntClock.c **** }
 127              		.loc 1 158 0
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 6


 128 002c BD46     		mov	sp, r7
 129 002e 04B0     		add	sp, sp, #16
 130              		@ sp needed
 131 0030 80BD     		pop	{r7, pc}
 132              	.L9:
 133 0032 C046     		.align	2
 134              	.L8:
 135 0034 04000240 		.word	1073872900
 136              		.cfi_endproc
 137              	.LFE2:
 138              		.size	debugOut_IntClock_SetFractionalDividerRegister, .-debugOut_IntClock_SetFractionalDividerRegi
 139              		.section	.text.debugOut_IntClock_GetDividerRegister,"ax",%progbits
 140              		.align	2
 141              		.global	debugOut_IntClock_GetDividerRegister
 142              		.code	16
 143              		.thumb_func
 144              		.type	debugOut_IntClock_GetDividerRegister, %function
 145              	debugOut_IntClock_GetDividerRegister:
 146              	.LFB3:
 159:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
 160:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
 161:.\Generated_Source\PSoC4/debugOut_IntClock.c **** /*******************************************************************************
 162:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Function Name: debugOut_IntClock_GetDividerRegister
 163:.\Generated_Source\PSoC4/debugOut_IntClock.c **** ********************************************************************************
 164:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
 165:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Summary:
 166:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  Gets the clock divider register value.
 167:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
 168:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Parameters:
 169:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  None
 170:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
 171:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Returns:
 172:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  Divide value of the clock minus 1. For example, if the clock is set to
 173:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  divide by 2, the return value will be 1.
 174:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
 175:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *******************************************************************************/
 176:.\Generated_Source\PSoC4/debugOut_IntClock.c **** uint16 debugOut_IntClock_GetDividerRegister(void)
 177:.\Generated_Source\PSoC4/debugOut_IntClock.c **** {
 147              		.loc 1 177 0
 148              		.cfi_startproc
 149 0000 80B5     		push	{r7, lr}
 150              		.cfi_def_cfa_offset 8
 151              		.cfi_offset 7, -8
 152              		.cfi_offset 14, -4
 153 0002 00AF     		add	r7, sp, #0
 154              		.cfi_def_cfa_register 7
 178:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     return (uint16)((debugOut_IntClock_DIV_REG & debugOut_IntClock_DIV_INT_MASK)
 155              		.loc 1 178 0
 156 0004 024B     		ldr	r3, .L12
 157 0006 1B68     		ldr	r3, [r3]
 158 0008 9BB2     		uxth	r3, r3
 179:.\Generated_Source\PSoC4/debugOut_IntClock.c ****         >> debugOut_IntClock_DIV_INT_SHIFT);
 180:.\Generated_Source\PSoC4/debugOut_IntClock.c **** }
 159              		.loc 1 180 0
 160 000a 181C     		mov	r0, r3
 161 000c BD46     		mov	sp, r7
 162              		@ sp needed
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 7


 163 000e 80BD     		pop	{r7, pc}
 164              	.L13:
 165              		.align	2
 166              	.L12:
 167 0010 04000240 		.word	1073872900
 168              		.cfi_endproc
 169              	.LFE3:
 170              		.size	debugOut_IntClock_GetDividerRegister, .-debugOut_IntClock_GetDividerRegister
 171              		.section	.text.debugOut_IntClock_GetFractionalDividerRegister,"ax",%progbits
 172              		.align	2
 173              		.global	debugOut_IntClock_GetFractionalDividerRegister
 174              		.code	16
 175              		.thumb_func
 176              		.type	debugOut_IntClock_GetFractionalDividerRegister, %function
 177              	debugOut_IntClock_GetFractionalDividerRegister:
 178              	.LFB4:
 181:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
 182:.\Generated_Source\PSoC4/debugOut_IntClock.c **** 
 183:.\Generated_Source\PSoC4/debugOut_IntClock.c **** /*******************************************************************************
 184:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Function Name: debugOut_IntClock_GetFractionalDividerRegister
 185:.\Generated_Source\PSoC4/debugOut_IntClock.c **** ********************************************************************************
 186:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
 187:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Summary:
 188:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  Gets the clock fractional divider register value.
 189:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
 190:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Parameters:
 191:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  None
 192:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
 193:.\Generated_Source\PSoC4/debugOut_IntClock.c **** * Returns:
 194:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  Fractional Divide value of the clock
 195:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *  0 if the fractional divider is not in use.
 196:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *
 197:.\Generated_Source\PSoC4/debugOut_IntClock.c **** *******************************************************************************/
 198:.\Generated_Source\PSoC4/debugOut_IntClock.c **** uint8 debugOut_IntClock_GetFractionalDividerRegister(void)
 199:.\Generated_Source\PSoC4/debugOut_IntClock.c **** {
 179              		.loc 1 199 0
 180              		.cfi_startproc
 181 0000 80B5     		push	{r7, lr}
 182              		.cfi_def_cfa_offset 8
 183              		.cfi_offset 7, -8
 184              		.cfi_offset 14, -4
 185 0002 00AF     		add	r7, sp, #0
 186              		.cfi_def_cfa_register 7
 200:.\Generated_Source\PSoC4/debugOut_IntClock.c **** #if defined (debugOut_IntClock__FRAC_MASK)
 201:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     /* return fractional divider bits */
 202:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     return (uint8)((debugOut_IntClock_DIV_REG & debugOut_IntClock_DIV_FRAC_MASK)
 203:.\Generated_Source\PSoC4/debugOut_IntClock.c ****         >> debugOut_IntClock_DIV_FRAC_SHIFT);
 204:.\Generated_Source\PSoC4/debugOut_IntClock.c **** #else
 205:.\Generated_Source\PSoC4/debugOut_IntClock.c ****     return 0u;
 187              		.loc 1 205 0
 188 0004 0023     		mov	r3, #0
 206:.\Generated_Source\PSoC4/debugOut_IntClock.c **** #endif /* debugOut_IntClock__FRAC_MASK */
 207:.\Generated_Source\PSoC4/debugOut_IntClock.c **** }
 189              		.loc 1 207 0
 190 0006 181C     		mov	r0, r3
 191 0008 BD46     		mov	sp, r7
 192              		@ sp needed
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 8


 193 000a 80BD     		pop	{r7, pc}
 194              		.cfi_endproc
 195              	.LFE4:
 196              		.size	debugOut_IntClock_GetFractionalDividerRegister, .-debugOut_IntClock_GetFractionalDividerRegi
 197              		.text
 198              	.Letext0:
 199              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 200              		.section	.debug_info,"",%progbits
 201              	.Ldebug_info0:
 202 0000 49010000 		.4byte	0x149
 203 0004 0400     		.2byte	0x4
 204 0006 00000000 		.4byte	.Ldebug_abbrev0
 205 000a 04       		.byte	0x4
 206 000b 01       		.uleb128 0x1
 207 000c 2B010000 		.4byte	.LASF24
 208 0010 01       		.byte	0x1
 209 0011 0E000000 		.4byte	.LASF25
 210 0015 33020000 		.4byte	.LASF26
 211 0019 00000000 		.4byte	.Ldebug_ranges0+0
 212 001d 00000000 		.4byte	0
 213 0021 00000000 		.4byte	.Ldebug_line0
 214 0025 02       		.uleb128 0x2
 215 0026 01       		.byte	0x1
 216 0027 06       		.byte	0x6
 217 0028 02020000 		.4byte	.LASF0
 218 002c 02       		.uleb128 0x2
 219 002d 01       		.byte	0x1
 220 002e 08       		.byte	0x8
 221 002f B6000000 		.4byte	.LASF1
 222 0033 02       		.uleb128 0x2
 223 0034 02       		.byte	0x2
 224 0035 05       		.byte	0x5
 225 0036 BA010000 		.4byte	.LASF2
 226 003a 02       		.uleb128 0x2
 227 003b 02       		.byte	0x2
 228 003c 07       		.byte	0x7
 229 003d D6000000 		.4byte	.LASF3
 230 0041 02       		.uleb128 0x2
 231 0042 04       		.byte	0x4
 232 0043 05       		.byte	0x5
 233 0044 F9010000 		.4byte	.LASF4
 234 0048 02       		.uleb128 0x2
 235 0049 04       		.byte	0x4
 236 004a 07       		.byte	0x7
 237 004b C4000000 		.4byte	.LASF5
 238 004f 02       		.uleb128 0x2
 239 0050 08       		.byte	0x8
 240 0051 05       		.byte	0x5
 241 0052 A7010000 		.4byte	.LASF6
 242 0056 02       		.uleb128 0x2
 243 0057 08       		.byte	0x8
 244 0058 07       		.byte	0x7
 245 0059 9F000000 		.4byte	.LASF7
 246 005d 03       		.uleb128 0x3
 247 005e 04       		.byte	0x4
 248 005f 05       		.byte	0x5
 249 0060 696E7400 		.ascii	"int\000"
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 9


 250 0064 02       		.uleb128 0x2
 251 0065 04       		.byte	0x4
 252 0066 07       		.byte	0x7
 253 0067 1E010000 		.4byte	.LASF8
 254 006b 04       		.uleb128 0x4
 255 006c C4010000 		.4byte	.LASF9
 256 0070 02       		.byte	0x2
 257 0071 A1       		.byte	0xa1
 258 0072 2C000000 		.4byte	0x2c
 259 0076 04       		.uleb128 0x4
 260 0077 10010000 		.4byte	.LASF10
 261 007b 02       		.byte	0x2
 262 007c A2       		.byte	0xa2
 263 007d 3A000000 		.4byte	0x3a
 264 0081 04       		.uleb128 0x4
 265 0082 17010000 		.4byte	.LASF11
 266 0086 02       		.byte	0x2
 267 0087 A3       		.byte	0xa3
 268 0088 48000000 		.4byte	0x48
 269 008c 02       		.uleb128 0x2
 270 008d 04       		.byte	0x4
 271 008e 04       		.byte	0x4
 272 008f 99000000 		.4byte	.LASF12
 273 0093 02       		.uleb128 0x2
 274 0094 08       		.byte	0x8
 275 0095 04       		.byte	0x4
 276 0096 F4000000 		.4byte	.LASF13
 277 009a 02       		.uleb128 0x2
 278 009b 01       		.byte	0x1
 279 009c 08       		.byte	0x8
 280 009d B5010000 		.4byte	.LASF14
 281 00a1 05       		.uleb128 0x5
 282 00a2 00000000 		.4byte	.LASF15
 283 00a6 02       		.byte	0x2
 284 00a7 4D01     		.2byte	0x14d
 285 00a9 AD000000 		.4byte	0xad
 286 00ad 06       		.uleb128 0x6
 287 00ae 81000000 		.4byte	0x81
 288 00b2 07       		.uleb128 0x7
 289 00b3 52000000 		.4byte	.LASF16
 290 00b7 01       		.byte	0x1
 291 00b8 46       		.byte	0x46
 292 00b9 00000000 		.4byte	.LFB0
 293 00bd 1C000000 		.4byte	.LFE0-.LFB0
 294 00c1 01       		.uleb128 0x1
 295 00c2 9C       		.byte	0x9c
 296 00c3 07       		.uleb128 0x7
 297 00c4 3B000000 		.4byte	.LASF17
 298 00c8 01       		.byte	0x1
 299 00c9 5F       		.byte	0x5f
 300 00ca 00000000 		.4byte	.LFB1
 301 00ce 18000000 		.4byte	.LFE1-.LFB1
 302 00d2 01       		.uleb128 0x1
 303 00d3 9C       		.byte	0x9c
 304 00d4 08       		.uleb128 0x8
 305 00d5 6A000000 		.4byte	.LASF27
 306 00d9 01       		.byte	0x1
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 10


 307 00da 86       		.byte	0x86
 308 00db 00000000 		.4byte	.LFB2
 309 00df 38000000 		.4byte	.LFE2-.LFB2
 310 00e3 01       		.uleb128 0x1
 311 00e4 9C       		.byte	0x9c
 312 00e5 22010000 		.4byte	0x122
 313 00e9 09       		.uleb128 0x9
 314 00ea E9000000 		.4byte	.LASF18
 315 00ee 01       		.byte	0x1
 316 00ef 86       		.byte	0x86
 317 00f0 76000000 		.4byte	0x76
 318 00f4 02       		.uleb128 0x2
 319 00f5 91       		.byte	0x91
 320 00f6 6E       		.sleb128 -18
 321 00f7 09       		.uleb128 0x9
 322 00f8 02010000 		.4byte	.LASF19
 323 00fc 01       		.byte	0x1
 324 00fd 86       		.byte	0x86
 325 00fe 6B000000 		.4byte	0x6b
 326 0102 02       		.uleb128 0x2
 327 0103 91       		.byte	0x91
 328 0104 6D       		.sleb128 -19
 329 0105 0A       		.uleb128 0xa
 330 0106 06000000 		.4byte	.LASF20
 331 010a 01       		.byte	0x1
 332 010b 88       		.byte	0x88
 333 010c 81000000 		.4byte	0x81
 334 0110 02       		.uleb128 0x2
 335 0111 91       		.byte	0x91
 336 0112 74       		.sleb128 -12
 337 0113 0A       		.uleb128 0xa
 338 0114 FB000000 		.4byte	.LASF21
 339 0118 01       		.byte	0x1
 340 0119 89       		.byte	0x89
 341 011a 81000000 		.4byte	0x81
 342 011e 02       		.uleb128 0x2
 343 011f 91       		.byte	0x91
 344 0120 70       		.sleb128 -16
 345 0121 00       		.byte	0
 346 0122 0B       		.uleb128 0xb
 347 0123 0E020000 		.4byte	.LASF22
 348 0127 01       		.byte	0x1
 349 0128 B0       		.byte	0xb0
 350 0129 76000000 		.4byte	0x76
 351 012d 00000000 		.4byte	.LFB3
 352 0131 14000000 		.4byte	.LFE3-.LFB3
 353 0135 01       		.uleb128 0x1
 354 0136 9C       		.byte	0x9c
 355 0137 0B       		.uleb128 0xb
 356 0138 CA010000 		.4byte	.LASF23
 357 013c 01       		.byte	0x1
 358 013d C6       		.byte	0xc6
 359 013e 6B000000 		.4byte	0x6b
 360 0142 00000000 		.4byte	.LFB4
 361 0146 0C000000 		.4byte	.LFE4-.LFB4
 362 014a 01       		.uleb128 0x1
 363 014b 9C       		.byte	0x9c
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 11


 364 014c 00       		.byte	0
 365              		.section	.debug_abbrev,"",%progbits
 366              	.Ldebug_abbrev0:
 367 0000 01       		.uleb128 0x1
 368 0001 11       		.uleb128 0x11
 369 0002 01       		.byte	0x1
 370 0003 25       		.uleb128 0x25
 371 0004 0E       		.uleb128 0xe
 372 0005 13       		.uleb128 0x13
 373 0006 0B       		.uleb128 0xb
 374 0007 03       		.uleb128 0x3
 375 0008 0E       		.uleb128 0xe
 376 0009 1B       		.uleb128 0x1b
 377 000a 0E       		.uleb128 0xe
 378 000b 55       		.uleb128 0x55
 379 000c 17       		.uleb128 0x17
 380 000d 11       		.uleb128 0x11
 381 000e 01       		.uleb128 0x1
 382 000f 10       		.uleb128 0x10
 383 0010 17       		.uleb128 0x17
 384 0011 00       		.byte	0
 385 0012 00       		.byte	0
 386 0013 02       		.uleb128 0x2
 387 0014 24       		.uleb128 0x24
 388 0015 00       		.byte	0
 389 0016 0B       		.uleb128 0xb
 390 0017 0B       		.uleb128 0xb
 391 0018 3E       		.uleb128 0x3e
 392 0019 0B       		.uleb128 0xb
 393 001a 03       		.uleb128 0x3
 394 001b 0E       		.uleb128 0xe
 395 001c 00       		.byte	0
 396 001d 00       		.byte	0
 397 001e 03       		.uleb128 0x3
 398 001f 24       		.uleb128 0x24
 399 0020 00       		.byte	0
 400 0021 0B       		.uleb128 0xb
 401 0022 0B       		.uleb128 0xb
 402 0023 3E       		.uleb128 0x3e
 403 0024 0B       		.uleb128 0xb
 404 0025 03       		.uleb128 0x3
 405 0026 08       		.uleb128 0x8
 406 0027 00       		.byte	0
 407 0028 00       		.byte	0
 408 0029 04       		.uleb128 0x4
 409 002a 16       		.uleb128 0x16
 410 002b 00       		.byte	0
 411 002c 03       		.uleb128 0x3
 412 002d 0E       		.uleb128 0xe
 413 002e 3A       		.uleb128 0x3a
 414 002f 0B       		.uleb128 0xb
 415 0030 3B       		.uleb128 0x3b
 416 0031 0B       		.uleb128 0xb
 417 0032 49       		.uleb128 0x49
 418 0033 13       		.uleb128 0x13
 419 0034 00       		.byte	0
 420 0035 00       		.byte	0
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 12


 421 0036 05       		.uleb128 0x5
 422 0037 16       		.uleb128 0x16
 423 0038 00       		.byte	0
 424 0039 03       		.uleb128 0x3
 425 003a 0E       		.uleb128 0xe
 426 003b 3A       		.uleb128 0x3a
 427 003c 0B       		.uleb128 0xb
 428 003d 3B       		.uleb128 0x3b
 429 003e 05       		.uleb128 0x5
 430 003f 49       		.uleb128 0x49
 431 0040 13       		.uleb128 0x13
 432 0041 00       		.byte	0
 433 0042 00       		.byte	0
 434 0043 06       		.uleb128 0x6
 435 0044 35       		.uleb128 0x35
 436 0045 00       		.byte	0
 437 0046 49       		.uleb128 0x49
 438 0047 13       		.uleb128 0x13
 439 0048 00       		.byte	0
 440 0049 00       		.byte	0
 441 004a 07       		.uleb128 0x7
 442 004b 2E       		.uleb128 0x2e
 443 004c 00       		.byte	0
 444 004d 3F       		.uleb128 0x3f
 445 004e 19       		.uleb128 0x19
 446 004f 03       		.uleb128 0x3
 447 0050 0E       		.uleb128 0xe
 448 0051 3A       		.uleb128 0x3a
 449 0052 0B       		.uleb128 0xb
 450 0053 3B       		.uleb128 0x3b
 451 0054 0B       		.uleb128 0xb
 452 0055 27       		.uleb128 0x27
 453 0056 19       		.uleb128 0x19
 454 0057 11       		.uleb128 0x11
 455 0058 01       		.uleb128 0x1
 456 0059 12       		.uleb128 0x12
 457 005a 06       		.uleb128 0x6
 458 005b 40       		.uleb128 0x40
 459 005c 18       		.uleb128 0x18
 460 005d 9742     		.uleb128 0x2117
 461 005f 19       		.uleb128 0x19
 462 0060 00       		.byte	0
 463 0061 00       		.byte	0
 464 0062 08       		.uleb128 0x8
 465 0063 2E       		.uleb128 0x2e
 466 0064 01       		.byte	0x1
 467 0065 3F       		.uleb128 0x3f
 468 0066 19       		.uleb128 0x19
 469 0067 03       		.uleb128 0x3
 470 0068 0E       		.uleb128 0xe
 471 0069 3A       		.uleb128 0x3a
 472 006a 0B       		.uleb128 0xb
 473 006b 3B       		.uleb128 0x3b
 474 006c 0B       		.uleb128 0xb
 475 006d 27       		.uleb128 0x27
 476 006e 19       		.uleb128 0x19
 477 006f 11       		.uleb128 0x11
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 13


 478 0070 01       		.uleb128 0x1
 479 0071 12       		.uleb128 0x12
 480 0072 06       		.uleb128 0x6
 481 0073 40       		.uleb128 0x40
 482 0074 18       		.uleb128 0x18
 483 0075 9742     		.uleb128 0x2117
 484 0077 19       		.uleb128 0x19
 485 0078 01       		.uleb128 0x1
 486 0079 13       		.uleb128 0x13
 487 007a 00       		.byte	0
 488 007b 00       		.byte	0
 489 007c 09       		.uleb128 0x9
 490 007d 05       		.uleb128 0x5
 491 007e 00       		.byte	0
 492 007f 03       		.uleb128 0x3
 493 0080 0E       		.uleb128 0xe
 494 0081 3A       		.uleb128 0x3a
 495 0082 0B       		.uleb128 0xb
 496 0083 3B       		.uleb128 0x3b
 497 0084 0B       		.uleb128 0xb
 498 0085 49       		.uleb128 0x49
 499 0086 13       		.uleb128 0x13
 500 0087 02       		.uleb128 0x2
 501 0088 18       		.uleb128 0x18
 502 0089 00       		.byte	0
 503 008a 00       		.byte	0
 504 008b 0A       		.uleb128 0xa
 505 008c 34       		.uleb128 0x34
 506 008d 00       		.byte	0
 507 008e 03       		.uleb128 0x3
 508 008f 0E       		.uleb128 0xe
 509 0090 3A       		.uleb128 0x3a
 510 0091 0B       		.uleb128 0xb
 511 0092 3B       		.uleb128 0x3b
 512 0093 0B       		.uleb128 0xb
 513 0094 49       		.uleb128 0x49
 514 0095 13       		.uleb128 0x13
 515 0096 02       		.uleb128 0x2
 516 0097 18       		.uleb128 0x18
 517 0098 00       		.byte	0
 518 0099 00       		.byte	0
 519 009a 0B       		.uleb128 0xb
 520 009b 2E       		.uleb128 0x2e
 521 009c 00       		.byte	0
 522 009d 3F       		.uleb128 0x3f
 523 009e 19       		.uleb128 0x19
 524 009f 03       		.uleb128 0x3
 525 00a0 0E       		.uleb128 0xe
 526 00a1 3A       		.uleb128 0x3a
 527 00a2 0B       		.uleb128 0xb
 528 00a3 3B       		.uleb128 0x3b
 529 00a4 0B       		.uleb128 0xb
 530 00a5 27       		.uleb128 0x27
 531 00a6 19       		.uleb128 0x19
 532 00a7 49       		.uleb128 0x49
 533 00a8 13       		.uleb128 0x13
 534 00a9 11       		.uleb128 0x11
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 14


 535 00aa 01       		.uleb128 0x1
 536 00ab 12       		.uleb128 0x12
 537 00ac 06       		.uleb128 0x6
 538 00ad 40       		.uleb128 0x40
 539 00ae 18       		.uleb128 0x18
 540 00af 9742     		.uleb128 0x2117
 541 00b1 19       		.uleb128 0x19
 542 00b2 00       		.byte	0
 543 00b3 00       		.byte	0
 544 00b4 00       		.byte	0
 545              		.section	.debug_aranges,"",%progbits
 546 0000 3C000000 		.4byte	0x3c
 547 0004 0200     		.2byte	0x2
 548 0006 00000000 		.4byte	.Ldebug_info0
 549 000a 04       		.byte	0x4
 550 000b 00       		.byte	0
 551 000c 0000     		.2byte	0
 552 000e 0000     		.2byte	0
 553 0010 00000000 		.4byte	.LFB0
 554 0014 1C000000 		.4byte	.LFE0-.LFB0
 555 0018 00000000 		.4byte	.LFB1
 556 001c 18000000 		.4byte	.LFE1-.LFB1
 557 0020 00000000 		.4byte	.LFB2
 558 0024 38000000 		.4byte	.LFE2-.LFB2
 559 0028 00000000 		.4byte	.LFB3
 560 002c 14000000 		.4byte	.LFE3-.LFB3
 561 0030 00000000 		.4byte	.LFB4
 562 0034 0C000000 		.4byte	.LFE4-.LFB4
 563 0038 00000000 		.4byte	0
 564 003c 00000000 		.4byte	0
 565              		.section	.debug_ranges,"",%progbits
 566              	.Ldebug_ranges0:
 567 0000 00000000 		.4byte	.LFB0
 568 0004 1C000000 		.4byte	.LFE0
 569 0008 00000000 		.4byte	.LFB1
 570 000c 18000000 		.4byte	.LFE1
 571 0010 00000000 		.4byte	.LFB2
 572 0014 38000000 		.4byte	.LFE2
 573 0018 00000000 		.4byte	.LFB3
 574 001c 14000000 		.4byte	.LFE3
 575 0020 00000000 		.4byte	.LFB4
 576 0024 0C000000 		.4byte	.LFE4
 577 0028 00000000 		.4byte	0
 578 002c 00000000 		.4byte	0
 579              		.section	.debug_line,"",%progbits
 580              	.Ldebug_line0:
 581 0000 B6000000 		.section	.debug_str,"MS",%progbits,1
 581      02005000 
 581      00000201 
 581      FB0E0D00 
 581      01010101 
 582              	.LASF15:
 583 0000 72656733 		.ascii	"reg32\000"
 583      3200
 584              	.LASF20:
 585 0006 6D61736B 		.ascii	"maskVal\000"
 585      56616C00 
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 15


 586              	.LASF25:
 587 000e 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\debugOut_IntClock.c\000"
 587      6E657261 
 587      7465645F 
 587      536F7572 
 587      63655C50 
 588              	.LASF17:
 589 003b 64656275 		.ascii	"debugOut_IntClock_Stop\000"
 589      674F7574 
 589      5F496E74 
 589      436C6F63 
 589      6B5F5374 
 590              	.LASF16:
 591 0052 64656275 		.ascii	"debugOut_IntClock_Start\000"
 591      674F7574 
 591      5F496E74 
 591      436C6F63 
 591      6B5F5374 
 592              	.LASF27:
 593 006a 64656275 		.ascii	"debugOut_IntClock_SetFractionalDividerRegister\000"
 593      674F7574 
 593      5F496E74 
 593      436C6F63 
 593      6B5F5365 
 594              	.LASF12:
 595 0099 666C6F61 		.ascii	"float\000"
 595      7400
 596              	.LASF7:
 597 009f 6C6F6E67 		.ascii	"long long unsigned int\000"
 597      206C6F6E 
 597      6720756E 
 597      7369676E 
 597      65642069 
 598              	.LASF1:
 599 00b6 756E7369 		.ascii	"unsigned char\000"
 599      676E6564 
 599      20636861 
 599      7200
 600              	.LASF5:
 601 00c4 6C6F6E67 		.ascii	"long unsigned int\000"
 601      20756E73 
 601      69676E65 
 601      6420696E 
 601      7400
 602              	.LASF3:
 603 00d6 73686F72 		.ascii	"short unsigned int\000"
 603      7420756E 
 603      7369676E 
 603      65642069 
 603      6E7400
 604              	.LASF18:
 605 00e9 636C6B44 		.ascii	"clkDivider\000"
 605      69766964 
 605      657200
 606              	.LASF13:
 607 00f4 646F7562 		.ascii	"double\000"
 607      6C6500
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 16


 608              	.LASF21:
 609 00fb 72656756 		.ascii	"regVal\000"
 609      616C00
 610              	.LASF19:
 611 0102 636C6B46 		.ascii	"clkFractional\000"
 611      72616374 
 611      696F6E61 
 611      6C00
 612              	.LASF10:
 613 0110 75696E74 		.ascii	"uint16\000"
 613      313600
 614              	.LASF11:
 615 0117 75696E74 		.ascii	"uint32\000"
 615      333200
 616              	.LASF8:
 617 011e 756E7369 		.ascii	"unsigned int\000"
 617      676E6564 
 617      20696E74 
 617      00
 618              	.LASF24:
 619 012b 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 619      4320342E 
 619      382E3420 
 619      32303134 
 619      30353236 
 620 015e 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 620      20726576 
 620      6973696F 
 620      6E203231 
 620      31333538 
 621 0191 30202D66 		.ascii	"0 -ffunction-sections\000"
 621      66756E63 
 621      74696F6E 
 621      2D736563 
 621      74696F6E 
 622              	.LASF6:
 623 01a7 6C6F6E67 		.ascii	"long long int\000"
 623      206C6F6E 
 623      6720696E 
 623      7400
 624              	.LASF14:
 625 01b5 63686172 		.ascii	"char\000"
 625      00
 626              	.LASF2:
 627 01ba 73686F72 		.ascii	"short int\000"
 627      7420696E 
 627      7400
 628              	.LASF9:
 629 01c4 75696E74 		.ascii	"uint8\000"
 629      3800
 630              	.LASF23:
 631 01ca 64656275 		.ascii	"debugOut_IntClock_GetFractionalDividerRegister\000"
 631      674F7574 
 631      5F496E74 
 631      436C6F63 
 631      6B5F4765 
 632              	.LASF4:
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccmxTLu2.s 			page 17


 633 01f9 6C6F6E67 		.ascii	"long int\000"
 633      20696E74 
 633      00
 634              	.LASF0:
 635 0202 7369676E 		.ascii	"signed char\000"
 635      65642063 
 635      68617200 
 636              	.LASF22:
 637 020e 64656275 		.ascii	"debugOut_IntClock_GetDividerRegister\000"
 637      674F7574 
 637      5F496E74 
 637      436C6F63 
 637      6B5F4765 
 638              	.LASF26:
 639 0233 433A5C55 		.ascii	"C:\\Users\\Jeppe\\Documents\\Engineer\\4_Semester\\"
 639      73657273 
 639      5C4A6570 
 639      70655C44 
 639      6F63756D 
 640 0260 45345052 		.ascii	"E4PRJ4\\Implementering\\Vuggesystem\\vuggeControl\\"
 640      4A345C49 
 640      6D706C65 
 640      6D656E74 
 640      6572696E 
 641 028f 76756767 		.ascii	"vuggeControl.cydsn\000"
 641      65436F6E 
 641      74726F6C 
 641      2E637964 
 641      736E00
 642              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
