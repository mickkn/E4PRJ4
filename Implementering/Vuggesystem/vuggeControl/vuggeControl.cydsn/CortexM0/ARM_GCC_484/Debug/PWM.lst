ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PWM.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	PWM_initVar
  18              		.bss
  19              		.type	PWM_initVar, %object
  20              		.size	PWM_initVar, 1
  21              	PWM_initVar:
  22 0000 00       		.space	1
  23              		.section	.text.PWM_Start,"ax",%progbits
  24              		.align	2
  25              		.global	PWM_Start
  26              		.code	16
  27              		.thumb_func
  28              		.type	PWM_Start, %function
  29              	PWM_Start:
  30              	.LFB0:
  31              		.file 1 ".\\Generated_Source\\PSoC4\\PWM.c"
   1:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/PWM.c **** * File Name: PWM.c
   3:.\Generated_Source\PSoC4/PWM.c **** * Version 3.20
   4:.\Generated_Source\PSoC4/PWM.c **** *
   5:.\Generated_Source\PSoC4/PWM.c **** * Description:
   6:.\Generated_Source\PSoC4/PWM.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:.\Generated_Source\PSoC4/PWM.c **** *  comparitors. Each instance of this user module is capable of generating
   8:.\Generated_Source\PSoC4/PWM.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:.\Generated_Source\PSoC4/PWM.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:.\Generated_Source\PSoC4/PWM.c **** *  The compare value output may be configured to be active when the present
  11:.\Generated_Source\PSoC4/PWM.c **** *  counter is less than or less than/equal to the compare value.
  12:.\Generated_Source\PSoC4/PWM.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:.\Generated_Source\PSoC4/PWM.c **** *  width wide when the counter is equal to zero.
  14:.\Generated_Source\PSoC4/PWM.c **** *
  15:.\Generated_Source\PSoC4/PWM.c **** * Note:
  16:.\Generated_Source\PSoC4/PWM.c **** *
  17:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************
  18:.\Generated_Source\PSoC4/PWM.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:.\Generated_Source\PSoC4/PWM.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:.\Generated_Source\PSoC4/PWM.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:.\Generated_Source\PSoC4/PWM.c **** * the software package with which this file was provided.
  22:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************/
  23:.\Generated_Source\PSoC4/PWM.c **** 
  24:.\Generated_Source\PSoC4/PWM.c **** #include "PWM.h"
  25:.\Generated_Source\PSoC4/PWM.c **** 
  26:.\Generated_Source\PSoC4/PWM.c **** /* Error message for removed <resource> through optimization */
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 2


  27:.\Generated_Source\PSoC4/PWM.c **** #ifdef PWM_PWMUDB_genblk1_ctrlreg__REMOVED
  28:.\Generated_Source\PSoC4/PWM.c ****     #error PWM_v3_20 detected with a constant 0 for the enable or \
  29:.\Generated_Source\PSoC4/PWM.c ****          constant 1 for reset. This will prevent the component from operating.
  30:.\Generated_Source\PSoC4/PWM.c **** #endif /* PWM_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:.\Generated_Source\PSoC4/PWM.c **** 
  32:.\Generated_Source\PSoC4/PWM.c **** uint8 PWM_initVar = 0u;
  33:.\Generated_Source\PSoC4/PWM.c **** 
  34:.\Generated_Source\PSoC4/PWM.c **** 
  35:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
  36:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Start
  37:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
  38:.\Generated_Source\PSoC4/PWM.c **** *
  39:.\Generated_Source\PSoC4/PWM.c **** * Summary:
  40:.\Generated_Source\PSoC4/PWM.c **** *  The start function initializes the pwm with the default values, the
  41:.\Generated_Source\PSoC4/PWM.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:.\Generated_Source\PSoC4/PWM.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:.\Generated_Source\PSoC4/PWM.c **** *
  44:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
  45:.\Generated_Source\PSoC4/PWM.c **** *  None
  46:.\Generated_Source\PSoC4/PWM.c **** *
  47:.\Generated_Source\PSoC4/PWM.c **** * Return:
  48:.\Generated_Source\PSoC4/PWM.c **** *  None
  49:.\Generated_Source\PSoC4/PWM.c **** *
  50:.\Generated_Source\PSoC4/PWM.c **** * Global variables:
  51:.\Generated_Source\PSoC4/PWM.c **** *  PWM_initVar: Is modified when this function is called for the
  52:.\Generated_Source\PSoC4/PWM.c **** *   first time. Is used to ensure that initialization happens only once.
  53:.\Generated_Source\PSoC4/PWM.c **** *
  54:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
  55:.\Generated_Source\PSoC4/PWM.c **** void PWM_Start(void) 
  56:.\Generated_Source\PSoC4/PWM.c **** {
  32              		.loc 1 56 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  57:.\Generated_Source\PSoC4/PWM.c ****     /* If not Initialized then initialize all required hardware and software */
  58:.\Generated_Source\PSoC4/PWM.c ****     if(PWM_initVar == 0u)
  40              		.loc 1 58 0
  41 0004 064B     		ldr	r3, .L3
  42 0006 1B78     		ldrb	r3, [r3]
  43 0008 002B     		cmp	r3, #0
  44 000a 04D1     		bne	.L2
  59:.\Generated_Source\PSoC4/PWM.c ****     {
  60:.\Generated_Source\PSoC4/PWM.c ****         PWM_Init();
  45              		.loc 1 60 0
  46 000c FFF7FEFF 		bl	PWM_Init
  61:.\Generated_Source\PSoC4/PWM.c ****         PWM_initVar = 1u;
  47              		.loc 1 61 0
  48 0010 034B     		ldr	r3, .L3
  49 0012 0122     		mov	r2, #1
  50 0014 1A70     		strb	r2, [r3]
  51              	.L2:
  62:.\Generated_Source\PSoC4/PWM.c ****     }
  63:.\Generated_Source\PSoC4/PWM.c ****     PWM_Enable();
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 3


  52              		.loc 1 63 0
  53 0016 FFF7FEFF 		bl	PWM_Enable
  64:.\Generated_Source\PSoC4/PWM.c **** 
  65:.\Generated_Source\PSoC4/PWM.c **** }
  54              		.loc 1 65 0
  55 001a BD46     		mov	sp, r7
  56              		@ sp needed
  57 001c 80BD     		pop	{r7, pc}
  58              	.L4:
  59 001e C046     		.align	2
  60              	.L3:
  61 0020 00000000 		.word	PWM_initVar
  62              		.cfi_endproc
  63              	.LFE0:
  64              		.size	PWM_Start, .-PWM_Start
  65              		.section	.text.PWM_Init,"ax",%progbits
  66              		.align	2
  67              		.global	PWM_Init
  68              		.code	16
  69              		.thumb_func
  70              		.type	PWM_Init, %function
  71              	PWM_Init:
  72              	.LFB1:
  66:.\Generated_Source\PSoC4/PWM.c **** 
  67:.\Generated_Source\PSoC4/PWM.c **** 
  68:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
  69:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Init
  70:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
  71:.\Generated_Source\PSoC4/PWM.c **** *
  72:.\Generated_Source\PSoC4/PWM.c **** * Summary:
  73:.\Generated_Source\PSoC4/PWM.c **** *  Initialize component's parameters to the parameters set by user in the
  74:.\Generated_Source\PSoC4/PWM.c **** *  customizer of the component placed onto schematic. Usually called in
  75:.\Generated_Source\PSoC4/PWM.c **** *  PWM_Start().
  76:.\Generated_Source\PSoC4/PWM.c **** *
  77:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
  78:.\Generated_Source\PSoC4/PWM.c **** *  None
  79:.\Generated_Source\PSoC4/PWM.c **** *
  80:.\Generated_Source\PSoC4/PWM.c **** * Return:
  81:.\Generated_Source\PSoC4/PWM.c **** *  None
  82:.\Generated_Source\PSoC4/PWM.c **** *
  83:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
  84:.\Generated_Source\PSoC4/PWM.c **** void PWM_Init(void) 
  85:.\Generated_Source\PSoC4/PWM.c **** {
  73              		.loc 1 85 0
  74              		.cfi_startproc
  75 0000 80B5     		push	{r7, lr}
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 7, -8
  78              		.cfi_offset 14, -4
  79 0002 82B0     		sub	sp, sp, #8
  80              		.cfi_def_cfa_offset 16
  81 0004 00AF     		add	r7, sp, #0
  82              		.cfi_def_cfa_register 7
  86:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UsingFixedFunction || PWM_UseControl)
  87:.\Generated_Source\PSoC4/PWM.c ****         uint8 ctrl;
  88:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UsingFixedFunction || PWM_UseControl) */
  89:.\Generated_Source\PSoC4/PWM.c **** 
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 4


  90:.\Generated_Source\PSoC4/PWM.c ****     #if(!PWM_UsingFixedFunction)
  91:.\Generated_Source\PSoC4/PWM.c ****         #if(PWM_UseStatus)
  92:.\Generated_Source\PSoC4/PWM.c ****             /* Interrupt State Backup for Critical Region*/
  93:.\Generated_Source\PSoC4/PWM.c ****             uint8 PWM_interruptState;
  94:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UseStatus) */
  95:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (!PWM_UsingFixedFunction) */
  96:.\Generated_Source\PSoC4/PWM.c **** 
  97:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UsingFixedFunction)
  98:.\Generated_Source\PSoC4/PWM.c ****         /* You are allowed to write the compare value (FF only) */
  99:.\Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL |= PWM_CFG0_MODE;
 100:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM_DeadBand2_4)
 101:.\Generated_Source\PSoC4/PWM.c ****             PWM_CONTROL |= PWM_CFG0_DB;
 102:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_DeadBand2_4) */
 103:.\Generated_Source\PSoC4/PWM.c **** 
 104:.\Generated_Source\PSoC4/PWM.c ****         ctrl = PWM_CONTROL3 & ((uint8 )(~PWM_CTRL_CMPMODE1_MASK));
 105:.\Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL3 = ctrl | PWM_DEFAULT_COMPARE1_MODE;
 106:.\Generated_Source\PSoC4/PWM.c **** 
 107:.\Generated_Source\PSoC4/PWM.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:.\Generated_Source\PSoC4/PWM.c ****         PWM_RT1 &= ((uint8)(~PWM_RT1_MASK));
 109:.\Generated_Source\PSoC4/PWM.c ****         PWM_RT1 |= PWM_SYNC;
 110:.\Generated_Source\PSoC4/PWM.c **** 
 111:.\Generated_Source\PSoC4/PWM.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:.\Generated_Source\PSoC4/PWM.c ****         PWM_RT1 &= ((uint8)(~PWM_SYNCDSI_MASK));
 113:.\Generated_Source\PSoC4/PWM.c ****         PWM_RT1 |= PWM_SYNCDSI_EN;
 114:.\Generated_Source\PSoC4/PWM.c **** 
 115:.\Generated_Source\PSoC4/PWM.c ****     #elif (PWM_UseControl)
 116:.\Generated_Source\PSoC4/PWM.c ****         /* Set the default compare mode defined in the parameter */
 117:.\Generated_Source\PSoC4/PWM.c ****         ctrl = PWM_CONTROL & ((uint8)(~PWM_CTRL_CMPMODE2_MASK)) &
  83              		.loc 1 117 0
  84 0006 124B     		ldr	r3, .L6
  85 0008 1B78     		ldrb	r3, [r3]
  86 000a DAB2     		uxtb	r2, r3
  87 000c FB1D     		add	r3, r7, #7
  88 000e 3F21     		mov	r1, #63
  89 0010 8A43     		bic	r2, r1
  90 0012 1A70     		strb	r2, [r3]
 118:.\Generated_Source\PSoC4/PWM.c ****                 ((uint8)(~PWM_CTRL_CMPMODE1_MASK));
 119:.\Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL = ctrl | PWM_DEFAULT_COMPARE2_MODE |
  91              		.loc 1 119 0
  92 0014 0E4B     		ldr	r3, .L6
  93 0016 FA1D     		add	r2, r7, #7
  94 0018 1278     		ldrb	r2, [r2]
  95 001a 0921     		mov	r1, #9
  96 001c 0A43     		orr	r2, r1
  97 001e D2B2     		uxtb	r2, r2
  98 0020 1A70     		strb	r2, [r3]
 120:.\Generated_Source\PSoC4/PWM.c ****                                    PWM_DEFAULT_COMPARE1_MODE;
 121:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 122:.\Generated_Source\PSoC4/PWM.c **** 
 123:.\Generated_Source\PSoC4/PWM.c ****     #if (!PWM_UsingFixedFunction)
 124:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM_Resolution == 8)
 125:.\Generated_Source\PSoC4/PWM.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:.\Generated_Source\PSoC4/PWM.c ****             PWM_AUX_CONTROLDP0 |= (PWM_AUX_CTRL_FIFO0_CLR);
  99              		.loc 1 126 0
 100 0022 0C4B     		ldr	r3, .L6+4
 101 0024 0B4A     		ldr	r2, .L6+4
 102 0026 1278     		ldrb	r2, [r2]
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 5


 103 0028 D2B2     		uxtb	r2, r2
 104 002a 0121     		mov	r1, #1
 105 002c 0A43     		orr	r2, r1
 106 002e D2B2     		uxtb	r2, r2
 107 0030 1A70     		strb	r2, [r3]
 127:.\Generated_Source\PSoC4/PWM.c ****         #else /* (PWM_Resolution == 16)*/
 128:.\Generated_Source\PSoC4/PWM.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:.\Generated_Source\PSoC4/PWM.c ****             PWM_AUX_CONTROLDP0 |= (PWM_AUX_CTRL_FIFO0_CLR);
 130:.\Generated_Source\PSoC4/PWM.c ****             PWM_AUX_CONTROLDP1 |= (PWM_AUX_CTRL_FIFO0_CLR);
 131:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_Resolution == 8) */
 132:.\Generated_Source\PSoC4/PWM.c **** 
 133:.\Generated_Source\PSoC4/PWM.c ****         PWM_WriteCounter(PWM_INIT_PERIOD_VALUE);
 108              		.loc 1 133 0
 109 0032 C720     		mov	r0, #199
 110 0034 FFF7FEFF 		bl	PWM_WriteCounter
 134:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (!PWM_UsingFixedFunction) */
 135:.\Generated_Source\PSoC4/PWM.c **** 
 136:.\Generated_Source\PSoC4/PWM.c ****     PWM_WritePeriod(PWM_INIT_PERIOD_VALUE);
 111              		.loc 1 136 0
 112 0038 C720     		mov	r0, #199
 113 003a FFF7FEFF 		bl	PWM_WritePeriod
 137:.\Generated_Source\PSoC4/PWM.c **** 
 138:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM_UseOneCompareMode)
 139:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteCompare(PWM_INIT_COMPARE_VALUE1);
 114              		.loc 1 139 0
 115 003e 4120     		mov	r0, #65
 116 0040 FFF7FEFF 		bl	PWM_WriteCompare
 140:.\Generated_Source\PSoC4/PWM.c ****         #else
 141:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteCompare1(PWM_INIT_COMPARE_VALUE1);
 142:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteCompare2(PWM_INIT_COMPARE_VALUE2);
 143:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UseOneCompareMode) */
 144:.\Generated_Source\PSoC4/PWM.c **** 
 145:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM_KillModeMinTime)
 146:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteKillTime(PWM_MinimumKillTime);
 147:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_KillModeMinTime) */
 148:.\Generated_Source\PSoC4/PWM.c **** 
 149:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM_DeadBandUsed)
 150:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteDeadTime(PWM_INIT_DEAD_TIME);
 117              		.loc 1 150 0
 118 0044 0320     		mov	r0, #3
 119 0046 FFF7FEFF 		bl	PWM_WriteDeadTime
 151:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_DeadBandUsed) */
 152:.\Generated_Source\PSoC4/PWM.c **** 
 153:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UseStatus || PWM_UsingFixedFunction)
 154:.\Generated_Source\PSoC4/PWM.c ****         PWM_SetInterruptMode(PWM_INIT_INTERRUPTS_MODE);
 155:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UseStatus || PWM_UsingFixedFunction) */
 156:.\Generated_Source\PSoC4/PWM.c **** 
 157:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UsingFixedFunction)
 158:.\Generated_Source\PSoC4/PWM.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:.\Generated_Source\PSoC4/PWM.c ****         PWM_GLOBAL_ENABLE |= PWM_BLOCK_EN_MASK;
 160:.\Generated_Source\PSoC4/PWM.c ****         /* Set the Interrupt source to come from the status register */
 161:.\Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL2 |= PWM_CTRL2_IRQ_SEL;
 162:.\Generated_Source\PSoC4/PWM.c ****     #else
 163:.\Generated_Source\PSoC4/PWM.c ****         #if(PWM_UseStatus)
 164:.\Generated_Source\PSoC4/PWM.c **** 
 165:.\Generated_Source\PSoC4/PWM.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:.\Generated_Source\PSoC4/PWM.c ****             /* Enter Critical Region*/
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 6


 167:.\Generated_Source\PSoC4/PWM.c ****             PWM_interruptState = CyEnterCriticalSection();
 168:.\Generated_Source\PSoC4/PWM.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:.\Generated_Source\PSoC4/PWM.c ****             PWM_STATUS_AUX_CTRL |= PWM_STATUS_ACTL_INT_EN_MASK;
 170:.\Generated_Source\PSoC4/PWM.c **** 
 171:.\Generated_Source\PSoC4/PWM.c ****              /* Exit Critical Region*/
 172:.\Generated_Source\PSoC4/PWM.c ****             CyExitCriticalSection(PWM_interruptState);
 173:.\Generated_Source\PSoC4/PWM.c **** 
 174:.\Generated_Source\PSoC4/PWM.c ****             /* Clear the FIFO to enable the PWM_STATUS_FIFOFULL
 175:.\Generated_Source\PSoC4/PWM.c ****                    bit to be set on FIFO full. */
 176:.\Generated_Source\PSoC4/PWM.c ****             PWM_ClearFIFO();
 177:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UseStatus) */
 178:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 179:.\Generated_Source\PSoC4/PWM.c **** }
 120              		.loc 1 179 0
 121 004a BD46     		mov	sp, r7
 122 004c 02B0     		add	sp, sp, #8
 123              		@ sp needed
 124 004e 80BD     		pop	{r7, pc}
 125              	.L7:
 126              		.align	2
 127              	.L6:
 128 0050 70000F40 		.word	1074724976
 129 0054 90000F40 		.word	1074725008
 130              		.cfi_endproc
 131              	.LFE1:
 132              		.size	PWM_Init, .-PWM_Init
 133              		.section	.text.PWM_Enable,"ax",%progbits
 134              		.align	2
 135              		.global	PWM_Enable
 136              		.code	16
 137              		.thumb_func
 138              		.type	PWM_Enable, %function
 139              	PWM_Enable:
 140              	.LFB2:
 180:.\Generated_Source\PSoC4/PWM.c **** 
 181:.\Generated_Source\PSoC4/PWM.c **** 
 182:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 183:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Enable
 184:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 185:.\Generated_Source\PSoC4/PWM.c **** *
 186:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 187:.\Generated_Source\PSoC4/PWM.c **** *  Enables the PWM block operation
 188:.\Generated_Source\PSoC4/PWM.c **** *
 189:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 190:.\Generated_Source\PSoC4/PWM.c **** *  None
 191:.\Generated_Source\PSoC4/PWM.c **** *
 192:.\Generated_Source\PSoC4/PWM.c **** * Return:
 193:.\Generated_Source\PSoC4/PWM.c **** *  None
 194:.\Generated_Source\PSoC4/PWM.c **** *
 195:.\Generated_Source\PSoC4/PWM.c **** * Side Effects:
 196:.\Generated_Source\PSoC4/PWM.c **** *  This works only if software enable mode is chosen
 197:.\Generated_Source\PSoC4/PWM.c **** *
 198:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 199:.\Generated_Source\PSoC4/PWM.c **** void PWM_Enable(void) 
 200:.\Generated_Source\PSoC4/PWM.c **** {
 141              		.loc 1 200 0
 142              		.cfi_startproc
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 7


 143 0000 80B5     		push	{r7, lr}
 144              		.cfi_def_cfa_offset 8
 145              		.cfi_offset 7, -8
 146              		.cfi_offset 14, -4
 147 0002 00AF     		add	r7, sp, #0
 148              		.cfi_def_cfa_register 7
 201:.\Generated_Source\PSoC4/PWM.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UsingFixedFunction)
 203:.\Generated_Source\PSoC4/PWM.c ****         PWM_GLOBAL_ENABLE |= PWM_BLOCK_EN_MASK;
 204:.\Generated_Source\PSoC4/PWM.c ****         PWM_GLOBAL_STBY_ENABLE |= PWM_BLOCK_STBY_EN_MASK;
 205:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 206:.\Generated_Source\PSoC4/PWM.c **** 
 207:.\Generated_Source\PSoC4/PWM.c ****     /* Enable the PWM from the control register  */
 208:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UseControl || PWM_UsingFixedFunction)
 209:.\Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL |= PWM_CTRL_ENABLE;
 149              		.loc 1 209 0
 150 0004 054B     		ldr	r3, .L9
 151 0006 054A     		ldr	r2, .L9
 152 0008 1278     		ldrb	r2, [r2]
 153 000a D2B2     		uxtb	r2, r2
 154 000c 8021     		mov	r1, #128
 155 000e 4942     		neg	r1, r1
 156 0010 0A43     		orr	r2, r1
 157 0012 D2B2     		uxtb	r2, r2
 158 0014 1A70     		strb	r2, [r3]
 210:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UseControl || PWM_UsingFixedFunction) */
 211:.\Generated_Source\PSoC4/PWM.c **** }
 159              		.loc 1 211 0
 160 0016 BD46     		mov	sp, r7
 161              		@ sp needed
 162 0018 80BD     		pop	{r7, pc}
 163              	.L10:
 164 001a C046     		.align	2
 165              	.L9:
 166 001c 70000F40 		.word	1074724976
 167              		.cfi_endproc
 168              	.LFE2:
 169              		.size	PWM_Enable, .-PWM_Enable
 170              		.section	.text.PWM_Stop,"ax",%progbits
 171              		.align	2
 172              		.global	PWM_Stop
 173              		.code	16
 174              		.thumb_func
 175              		.type	PWM_Stop, %function
 176              	PWM_Stop:
 177              	.LFB3:
 212:.\Generated_Source\PSoC4/PWM.c **** 
 213:.\Generated_Source\PSoC4/PWM.c **** 
 214:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 215:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Stop
 216:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 217:.\Generated_Source\PSoC4/PWM.c **** *
 218:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 219:.\Generated_Source\PSoC4/PWM.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:.\Generated_Source\PSoC4/PWM.c **** *  interrupts.
 221:.\Generated_Source\PSoC4/PWM.c **** *
 222:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 8


 223:.\Generated_Source\PSoC4/PWM.c **** *  None
 224:.\Generated_Source\PSoC4/PWM.c **** *
 225:.\Generated_Source\PSoC4/PWM.c **** * Return:
 226:.\Generated_Source\PSoC4/PWM.c **** *  None
 227:.\Generated_Source\PSoC4/PWM.c **** *
 228:.\Generated_Source\PSoC4/PWM.c **** * Side Effects:
 229:.\Generated_Source\PSoC4/PWM.c **** *  If the Enable mode is set to Hardware only then this function
 230:.\Generated_Source\PSoC4/PWM.c **** *  has no effect on the operation of the PWM
 231:.\Generated_Source\PSoC4/PWM.c **** *
 232:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 233:.\Generated_Source\PSoC4/PWM.c **** void PWM_Stop(void) 
 234:.\Generated_Source\PSoC4/PWM.c **** {
 178              		.loc 1 234 0
 179              		.cfi_startproc
 180 0000 80B5     		push	{r7, lr}
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 7, -8
 183              		.cfi_offset 14, -4
 184 0002 00AF     		add	r7, sp, #0
 185              		.cfi_def_cfa_register 7
 235:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UseControl || PWM_UsingFixedFunction)
 236:.\Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL &= ((uint8)(~PWM_CTRL_ENABLE));
 186              		.loc 1 236 0
 187 0004 044B     		ldr	r3, .L12
 188 0006 044A     		ldr	r2, .L12
 189 0008 1278     		ldrb	r2, [r2]
 190 000a D1B2     		uxtb	r1, r2
 191 000c 7F22     		mov	r2, #127
 192 000e 0A40     		and	r2, r1
 193 0010 D2B2     		uxtb	r2, r2
 194 0012 1A70     		strb	r2, [r3]
 237:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UseControl || PWM_UsingFixedFunction) */
 238:.\Generated_Source\PSoC4/PWM.c **** 
 239:.\Generated_Source\PSoC4/PWM.c ****     /* Globally disable the Fixed Function Block chosen */
 240:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UsingFixedFunction)
 241:.\Generated_Source\PSoC4/PWM.c ****         PWM_GLOBAL_ENABLE &= ((uint8)(~PWM_BLOCK_EN_MASK));
 242:.\Generated_Source\PSoC4/PWM.c ****         PWM_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_BLOCK_STBY_EN_MASK));
 243:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 244:.\Generated_Source\PSoC4/PWM.c **** }
 195              		.loc 1 244 0
 196 0014 BD46     		mov	sp, r7
 197              		@ sp needed
 198 0016 80BD     		pop	{r7, pc}
 199              	.L13:
 200              		.align	2
 201              	.L12:
 202 0018 70000F40 		.word	1074724976
 203              		.cfi_endproc
 204              	.LFE3:
 205              		.size	PWM_Stop, .-PWM_Stop
 206              		.section	.text.PWM_WriteCounter,"ax",%progbits
 207              		.align	2
 208              		.global	PWM_WriteCounter
 209              		.code	16
 210              		.thumb_func
 211              		.type	PWM_WriteCounter, %function
 212              	PWM_WriteCounter:
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 9


 213              	.LFB4:
 245:.\Generated_Source\PSoC4/PWM.c **** 
 246:.\Generated_Source\PSoC4/PWM.c **** #if (PWM_UseOneCompareMode)
 247:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_CompareMode1SW)
 248:.\Generated_Source\PSoC4/PWM.c **** 
 249:.\Generated_Source\PSoC4/PWM.c **** 
 250:.\Generated_Source\PSoC4/PWM.c ****         /*******************************************************************************
 251:.\Generated_Source\PSoC4/PWM.c ****         * Function Name: PWM_SetCompareMode
 252:.\Generated_Source\PSoC4/PWM.c ****         ********************************************************************************
 253:.\Generated_Source\PSoC4/PWM.c ****         *
 254:.\Generated_Source\PSoC4/PWM.c ****         * Summary:
 255:.\Generated_Source\PSoC4/PWM.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:.\Generated_Source\PSoC4/PWM.c ****         *  Center Align Mode or One Output Mode.
 257:.\Generated_Source\PSoC4/PWM.c ****         *
 258:.\Generated_Source\PSoC4/PWM.c ****         * Parameters:
 259:.\Generated_Source\PSoC4/PWM.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:.\Generated_Source\PSoC4/PWM.c ****         *                defined in the H file as input arguments.
 261:.\Generated_Source\PSoC4/PWM.c ****         *
 262:.\Generated_Source\PSoC4/PWM.c ****         * Return:
 263:.\Generated_Source\PSoC4/PWM.c ****         *  None
 264:.\Generated_Source\PSoC4/PWM.c ****         *
 265:.\Generated_Source\PSoC4/PWM.c ****         *******************************************************************************/
 266:.\Generated_Source\PSoC4/PWM.c ****         void PWM_SetCompareMode(uint8 comparemode) 
 267:.\Generated_Source\PSoC4/PWM.c ****         {
 268:.\Generated_Source\PSoC4/PWM.c ****             #if(PWM_UsingFixedFunction)
 269:.\Generated_Source\PSoC4/PWM.c **** 
 270:.\Generated_Source\PSoC4/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 271:.\Generated_Source\PSoC4/PWM.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHIF
 272:.\Generated_Source\PSoC4/PWM.c ****                 #else
 273:.\Generated_Source\PSoC4/PWM.c ****                     uint8 comparemodemasked = comparemode;
 274:.\Generated_Source\PSoC4/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 275:.\Generated_Source\PSoC4/PWM.c **** 
 276:.\Generated_Source\PSoC4/PWM.c ****                 PWM_CONTROL3 &= ((uint8)(~PWM_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:.\Generated_Source\PSoC4/PWM.c ****                 PWM_CONTROL3 |= comparemodemasked;
 278:.\Generated_Source\PSoC4/PWM.c **** 
 279:.\Generated_Source\PSoC4/PWM.c ****             #elif (PWM_UseControl)
 280:.\Generated_Source\PSoC4/PWM.c **** 
 281:.\Generated_Source\PSoC4/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 282:.\Generated_Source\PSoC4/PWM.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHI
 283:.\Generated_Source\PSoC4/PWM.c ****                                                 PWM_CTRL_CMPMODE1_MASK;
 284:.\Generated_Source\PSoC4/PWM.c ****                 #else
 285:.\Generated_Source\PSoC4/PWM.c ****                     uint8 comparemode1masked = comparemode & PWM_CTRL_CMPMODE1_MASK;
 286:.\Generated_Source\PSoC4/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 287:.\Generated_Source\PSoC4/PWM.c **** 
 288:.\Generated_Source\PSoC4/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE2_SHIFT)
 289:.\Generated_Source\PSoC4/PWM.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE2_SHI
 290:.\Generated_Source\PSoC4/PWM.c ****                                                PWM_CTRL_CMPMODE2_MASK;
 291:.\Generated_Source\PSoC4/PWM.c ****                 #else
 292:.\Generated_Source\PSoC4/PWM.c ****                     uint8 comparemode2masked = comparemode & PWM_CTRL_CMPMODE2_MASK;
 293:.\Generated_Source\PSoC4/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE2_SHIFT) */
 294:.\Generated_Source\PSoC4/PWM.c **** 
 295:.\Generated_Source\PSoC4/PWM.c ****                 /*Clear existing mode */
 296:.\Generated_Source\PSoC4/PWM.c ****                 PWM_CONTROL &= ((uint8)(~(PWM_CTRL_CMPMODE1_MASK |
 297:.\Generated_Source\PSoC4/PWM.c ****                                             PWM_CTRL_CMPMODE2_MASK)));
 298:.\Generated_Source\PSoC4/PWM.c ****                 PWM_CONTROL |= (comparemode1masked | comparemode2masked);
 299:.\Generated_Source\PSoC4/PWM.c **** 
 300:.\Generated_Source\PSoC4/PWM.c ****             #else
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 10


 301:.\Generated_Source\PSoC4/PWM.c ****                 uint8 temp = comparemode;
 302:.\Generated_Source\PSoC4/PWM.c ****             #endif /* (PWM_UsingFixedFunction) */
 303:.\Generated_Source\PSoC4/PWM.c ****         }
 304:.\Generated_Source\PSoC4/PWM.c ****     #endif /* PWM_CompareMode1SW */
 305:.\Generated_Source\PSoC4/PWM.c **** 
 306:.\Generated_Source\PSoC4/PWM.c **** #else /* UseOneCompareMode */
 307:.\Generated_Source\PSoC4/PWM.c **** 
 308:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_CompareMode1SW)
 309:.\Generated_Source\PSoC4/PWM.c **** 
 310:.\Generated_Source\PSoC4/PWM.c **** 
 311:.\Generated_Source\PSoC4/PWM.c ****         /*******************************************************************************
 312:.\Generated_Source\PSoC4/PWM.c ****         * Function Name: PWM_SetCompareMode1
 313:.\Generated_Source\PSoC4/PWM.c ****         ********************************************************************************
 314:.\Generated_Source\PSoC4/PWM.c ****         *
 315:.\Generated_Source\PSoC4/PWM.c ****         * Summary:
 316:.\Generated_Source\PSoC4/PWM.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:.\Generated_Source\PSoC4/PWM.c ****         *
 318:.\Generated_Source\PSoC4/PWM.c ****         * Parameters:
 319:.\Generated_Source\PSoC4/PWM.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:.\Generated_Source\PSoC4/PWM.c ****         *                defined in the H file as input arguments.
 321:.\Generated_Source\PSoC4/PWM.c ****         *
 322:.\Generated_Source\PSoC4/PWM.c ****         * Return:
 323:.\Generated_Source\PSoC4/PWM.c ****         *  None
 324:.\Generated_Source\PSoC4/PWM.c ****         *
 325:.\Generated_Source\PSoC4/PWM.c ****         *******************************************************************************/
 326:.\Generated_Source\PSoC4/PWM.c ****         void PWM_SetCompareMode1(uint8 comparemode) 
 327:.\Generated_Source\PSoC4/PWM.c ****         {
 328:.\Generated_Source\PSoC4/PWM.c ****             #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 329:.\Generated_Source\PSoC4/PWM.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHIFT)) 
 330:.\Generated_Source\PSoC4/PWM.c ****                                            PWM_CTRL_CMPMODE1_MASK;
 331:.\Generated_Source\PSoC4/PWM.c ****             #else
 332:.\Generated_Source\PSoC4/PWM.c ****                 uint8 comparemodemasked = comparemode & PWM_CTRL_CMPMODE1_MASK;
 333:.\Generated_Source\PSoC4/PWM.c ****             #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 334:.\Generated_Source\PSoC4/PWM.c **** 
 335:.\Generated_Source\PSoC4/PWM.c ****             #if (PWM_UseControl)
 336:.\Generated_Source\PSoC4/PWM.c ****                 PWM_CONTROL &= ((uint8)(~PWM_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:.\Generated_Source\PSoC4/PWM.c ****                 PWM_CONTROL |= comparemodemasked;
 338:.\Generated_Source\PSoC4/PWM.c ****             #endif /* (PWM_UseControl) */
 339:.\Generated_Source\PSoC4/PWM.c ****         }
 340:.\Generated_Source\PSoC4/PWM.c ****     #endif /* PWM_CompareMode1SW */
 341:.\Generated_Source\PSoC4/PWM.c **** 
 342:.\Generated_Source\PSoC4/PWM.c **** #if (PWM_CompareMode2SW)
 343:.\Generated_Source\PSoC4/PWM.c **** 
 344:.\Generated_Source\PSoC4/PWM.c **** 
 345:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 346:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_SetCompareMode2
 347:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 348:.\Generated_Source\PSoC4/PWM.c ****     *
 349:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 350:.\Generated_Source\PSoC4/PWM.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:.\Generated_Source\PSoC4/PWM.c ****     *
 352:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 353:.\Generated_Source\PSoC4/PWM.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:.\Generated_Source\PSoC4/PWM.c ****     *                defined in the H file as input arguments.
 355:.\Generated_Source\PSoC4/PWM.c ****     *
 356:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 357:.\Generated_Source\PSoC4/PWM.c ****     *  None
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 11


 358:.\Generated_Source\PSoC4/PWM.c ****     *
 359:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 360:.\Generated_Source\PSoC4/PWM.c ****     void PWM_SetCompareMode2(uint8 comparemode) 
 361:.\Generated_Source\PSoC4/PWM.c ****     {
 362:.\Generated_Source\PSoC4/PWM.c **** 
 363:.\Generated_Source\PSoC4/PWM.c ****         #if(0 != PWM_CTRL_CMPMODE2_SHIFT)
 364:.\Generated_Source\PSoC4/PWM.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE2_SHIFT)) &
 365:.\Generated_Source\PSoC4/PWM.c ****                                                  PWM_CTRL_CMPMODE2_MASK;
 366:.\Generated_Source\PSoC4/PWM.c ****         #else
 367:.\Generated_Source\PSoC4/PWM.c ****             uint8 comparemodemasked = comparemode & PWM_CTRL_CMPMODE2_MASK;
 368:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (0 != PWM_CTRL_CMPMODE2_SHIFT) */
 369:.\Generated_Source\PSoC4/PWM.c **** 
 370:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM_UseControl)
 371:.\Generated_Source\PSoC4/PWM.c ****             PWM_CONTROL &= ((uint8)(~PWM_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:.\Generated_Source\PSoC4/PWM.c ****             PWM_CONTROL |= comparemodemasked;
 373:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UseControl) */
 374:.\Generated_Source\PSoC4/PWM.c ****     }
 375:.\Generated_Source\PSoC4/PWM.c ****     #endif /*PWM_CompareMode2SW */
 376:.\Generated_Source\PSoC4/PWM.c **** 
 377:.\Generated_Source\PSoC4/PWM.c **** #endif /* UseOneCompareMode */
 378:.\Generated_Source\PSoC4/PWM.c **** 
 379:.\Generated_Source\PSoC4/PWM.c **** 
 380:.\Generated_Source\PSoC4/PWM.c **** #if (!PWM_UsingFixedFunction)
 381:.\Generated_Source\PSoC4/PWM.c **** 
 382:.\Generated_Source\PSoC4/PWM.c **** 
 383:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 384:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_WriteCounter
 385:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 386:.\Generated_Source\PSoC4/PWM.c ****     *
 387:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 388:.\Generated_Source\PSoC4/PWM.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:.\Generated_Source\PSoC4/PWM.c ****     *  implemented for that currently running period and only that period. This API
 390:.\Generated_Source\PSoC4/PWM.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:.\Generated_Source\PSoC4/PWM.c ****     *  PWM implementation.
 392:.\Generated_Source\PSoC4/PWM.c ****     *
 393:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 394:.\Generated_Source\PSoC4/PWM.c ****     *  counter:  The period new period counter value.
 395:.\Generated_Source\PSoC4/PWM.c ****     *
 396:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 397:.\Generated_Source\PSoC4/PWM.c ****     *  None
 398:.\Generated_Source\PSoC4/PWM.c ****     *
 399:.\Generated_Source\PSoC4/PWM.c ****     * Side Effects:
 400:.\Generated_Source\PSoC4/PWM.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:.\Generated_Source\PSoC4/PWM.c ****     *
 402:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 403:.\Generated_Source\PSoC4/PWM.c ****     void PWM_WriteCounter(uint8 counter) \
 404:.\Generated_Source\PSoC4/PWM.c ****                                        
 405:.\Generated_Source\PSoC4/PWM.c ****     {
 214              		.loc 1 405 0
 215              		.cfi_startproc
 216 0000 80B5     		push	{r7, lr}
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 7, -8
 219              		.cfi_offset 14, -4
 220 0002 82B0     		sub	sp, sp, #8
 221              		.cfi_def_cfa_offset 16
 222 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 12


 223              		.cfi_def_cfa_register 7
 224 0006 021C     		mov	r2, r0
 225 0008 FB1D     		add	r3, r7, #7
 226 000a 1A70     		strb	r2, [r3]
 406:.\Generated_Source\PSoC4/PWM.c ****         CY_SET_REG8(PWM_COUNTER_LSB_PTR, counter);
 227              		.loc 1 406 0
 228 000c 034B     		ldr	r3, .L15
 229 000e FA1D     		add	r2, r7, #7
 230 0010 1278     		ldrb	r2, [r2]
 231 0012 1A70     		strb	r2, [r3]
 407:.\Generated_Source\PSoC4/PWM.c ****     }
 232              		.loc 1 407 0
 233 0014 BD46     		mov	sp, r7
 234 0016 02B0     		add	sp, sp, #8
 235              		@ sp needed
 236 0018 80BD     		pop	{r7, pc}
 237              	.L16:
 238 001a C046     		.align	2
 239              	.L15:
 240 001c 00000F40 		.word	1074724864
 241              		.cfi_endproc
 242              	.LFE4:
 243              		.size	PWM_WriteCounter, .-PWM_WriteCounter
 244              		.section	.text.PWM_ReadCounter,"ax",%progbits
 245              		.align	2
 246              		.global	PWM_ReadCounter
 247              		.code	16
 248              		.thumb_func
 249              		.type	PWM_ReadCounter, %function
 250              	PWM_ReadCounter:
 251              	.LFB5:
 408:.\Generated_Source\PSoC4/PWM.c **** 
 409:.\Generated_Source\PSoC4/PWM.c **** 
 410:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 411:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadCounter
 412:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 413:.\Generated_Source\PSoC4/PWM.c ****     *
 414:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 415:.\Generated_Source\PSoC4/PWM.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:.\Generated_Source\PSoC4/PWM.c ****     *  if the counter is enabled or running.
 417:.\Generated_Source\PSoC4/PWM.c ****     *
 418:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 419:.\Generated_Source\PSoC4/PWM.c ****     *  None
 420:.\Generated_Source\PSoC4/PWM.c ****     *
 421:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 422:.\Generated_Source\PSoC4/PWM.c ****     *  The current value of the counter.
 423:.\Generated_Source\PSoC4/PWM.c ****     *
 424:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 425:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadCounter(void) 
 426:.\Generated_Source\PSoC4/PWM.c ****     {
 252              		.loc 1 426 0
 253              		.cfi_startproc
 254 0000 80B5     		push	{r7, lr}
 255              		.cfi_def_cfa_offset 8
 256              		.cfi_offset 7, -8
 257              		.cfi_offset 14, -4
 258 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 13


 259              		.cfi_def_cfa_register 7
 427:.\Generated_Source\PSoC4/PWM.c ****         /* Force capture by reading Accumulator */
 428:.\Generated_Source\PSoC4/PWM.c ****         /* Must first do a software capture to be able to read the counter */
 429:.\Generated_Source\PSoC4/PWM.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:.\Generated_Source\PSoC4/PWM.c ****           (void)CY_GET_REG8(PWM_COUNTERCAP_LSB_PTR_8BIT);
 260              		.loc 1 430 0
 261 0004 034B     		ldr	r3, .L19
 262 0006 1B78     		ldrb	r3, [r3]
 431:.\Generated_Source\PSoC4/PWM.c **** 
 432:.\Generated_Source\PSoC4/PWM.c ****         /* Read the data from the FIFO */
 433:.\Generated_Source\PSoC4/PWM.c ****         return (CY_GET_REG8(PWM_CAPTURE_LSB_PTR));
 263              		.loc 1 433 0
 264 0008 034B     		ldr	r3, .L19+4
 265 000a 1B78     		ldrb	r3, [r3]
 266 000c DBB2     		uxtb	r3, r3
 434:.\Generated_Source\PSoC4/PWM.c ****     }
 267              		.loc 1 434 0
 268 000e 181C     		mov	r0, r3
 269 0010 BD46     		mov	sp, r7
 270              		@ sp needed
 271 0012 80BD     		pop	{r7, pc}
 272              	.L20:
 273              		.align	2
 274              	.L19:
 275 0014 10000F40 		.word	1074724880
 276 0018 50000F40 		.word	1074724944
 277              		.cfi_endproc
 278              	.LFE5:
 279              		.size	PWM_ReadCounter, .-PWM_ReadCounter
 280              		.section	.text.PWM_WritePeriod,"ax",%progbits
 281              		.align	2
 282              		.global	PWM_WritePeriod
 283              		.code	16
 284              		.thumb_func
 285              		.type	PWM_WritePeriod, %function
 286              	PWM_WritePeriod:
 287              	.LFB6:
 435:.\Generated_Source\PSoC4/PWM.c **** 
 436:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UseStatus)
 437:.\Generated_Source\PSoC4/PWM.c **** 
 438:.\Generated_Source\PSoC4/PWM.c **** 
 439:.\Generated_Source\PSoC4/PWM.c ****         /*******************************************************************************
 440:.\Generated_Source\PSoC4/PWM.c ****         * Function Name: PWM_ClearFIFO
 441:.\Generated_Source\PSoC4/PWM.c ****         ********************************************************************************
 442:.\Generated_Source\PSoC4/PWM.c ****         *
 443:.\Generated_Source\PSoC4/PWM.c ****         * Summary:
 444:.\Generated_Source\PSoC4/PWM.c ****         *  This function clears all capture data from the capture FIFO
 445:.\Generated_Source\PSoC4/PWM.c ****         *
 446:.\Generated_Source\PSoC4/PWM.c ****         * Parameters:
 447:.\Generated_Source\PSoC4/PWM.c ****         *  None
 448:.\Generated_Source\PSoC4/PWM.c ****         *
 449:.\Generated_Source\PSoC4/PWM.c ****         * Return:
 450:.\Generated_Source\PSoC4/PWM.c ****         *  None
 451:.\Generated_Source\PSoC4/PWM.c ****         *
 452:.\Generated_Source\PSoC4/PWM.c ****         *******************************************************************************/
 453:.\Generated_Source\PSoC4/PWM.c ****         void PWM_ClearFIFO(void) 
 454:.\Generated_Source\PSoC4/PWM.c ****         {
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 14


 455:.\Generated_Source\PSoC4/PWM.c ****             while(0u != (PWM_ReadStatusRegister() & PWM_STATUS_FIFONEMPTY))
 456:.\Generated_Source\PSoC4/PWM.c ****             {
 457:.\Generated_Source\PSoC4/PWM.c ****                 (void)PWM_ReadCapture();
 458:.\Generated_Source\PSoC4/PWM.c ****             }
 459:.\Generated_Source\PSoC4/PWM.c ****         }
 460:.\Generated_Source\PSoC4/PWM.c **** 
 461:.\Generated_Source\PSoC4/PWM.c ****     #endif /* PWM_UseStatus */
 462:.\Generated_Source\PSoC4/PWM.c **** 
 463:.\Generated_Source\PSoC4/PWM.c **** #endif /* !PWM_UsingFixedFunction */
 464:.\Generated_Source\PSoC4/PWM.c **** 
 465:.\Generated_Source\PSoC4/PWM.c **** 
 466:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 467:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_WritePeriod
 468:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 469:.\Generated_Source\PSoC4/PWM.c **** *
 470:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 471:.\Generated_Source\PSoC4/PWM.c **** *  This function is used to change the period of the counter.  The new period
 472:.\Generated_Source\PSoC4/PWM.c **** *  will be loaded the next time terminal count is detected.
 473:.\Generated_Source\PSoC4/PWM.c **** *
 474:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 475:.\Generated_Source\PSoC4/PWM.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:.\Generated_Source\PSoC4/PWM.c **** *           will result in the counter remaining at zero.
 477:.\Generated_Source\PSoC4/PWM.c **** *
 478:.\Generated_Source\PSoC4/PWM.c **** * Return:
 479:.\Generated_Source\PSoC4/PWM.c **** *  None
 480:.\Generated_Source\PSoC4/PWM.c **** *
 481:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 482:.\Generated_Source\PSoC4/PWM.c **** void PWM_WritePeriod(uint8 period) 
 483:.\Generated_Source\PSoC4/PWM.c **** {
 288              		.loc 1 483 0
 289              		.cfi_startproc
 290 0000 80B5     		push	{r7, lr}
 291              		.cfi_def_cfa_offset 8
 292              		.cfi_offset 7, -8
 293              		.cfi_offset 14, -4
 294 0002 82B0     		sub	sp, sp, #8
 295              		.cfi_def_cfa_offset 16
 296 0004 00AF     		add	r7, sp, #0
 297              		.cfi_def_cfa_register 7
 298 0006 021C     		mov	r2, r0
 299 0008 FB1D     		add	r3, r7, #7
 300 000a 1A70     		strb	r2, [r3]
 484:.\Generated_Source\PSoC4/PWM.c ****     #if(PWM_UsingFixedFunction)
 485:.\Generated_Source\PSoC4/PWM.c ****         CY_SET_REG16(PWM_PERIOD_LSB_PTR, (uint16)period);
 486:.\Generated_Source\PSoC4/PWM.c ****     #else
 487:.\Generated_Source\PSoC4/PWM.c ****         CY_SET_REG8(PWM_PERIOD_LSB_PTR, period);
 301              		.loc 1 487 0
 302 000c 034B     		ldr	r3, .L22
 303 000e FA1D     		add	r2, r7, #7
 304 0010 1278     		ldrb	r2, [r2]
 305 0012 1A70     		strb	r2, [r3]
 488:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 489:.\Generated_Source\PSoC4/PWM.c **** }
 306              		.loc 1 489 0
 307 0014 BD46     		mov	sp, r7
 308 0016 02B0     		add	sp, sp, #8
 309              		@ sp needed
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 15


 310 0018 80BD     		pop	{r7, pc}
 311              	.L23:
 312 001a C046     		.align	2
 313              	.L22:
 314 001c 40000F40 		.word	1074724928
 315              		.cfi_endproc
 316              	.LFE6:
 317              		.size	PWM_WritePeriod, .-PWM_WritePeriod
 318              		.section	.text.PWM_WriteCompare,"ax",%progbits
 319              		.align	2
 320              		.global	PWM_WriteCompare
 321              		.code	16
 322              		.thumb_func
 323              		.type	PWM_WriteCompare, %function
 324              	PWM_WriteCompare:
 325              	.LFB7:
 490:.\Generated_Source\PSoC4/PWM.c **** 
 491:.\Generated_Source\PSoC4/PWM.c **** #if (PWM_UseOneCompareMode)
 492:.\Generated_Source\PSoC4/PWM.c **** 
 493:.\Generated_Source\PSoC4/PWM.c **** 
 494:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 495:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_WriteCompare
 496:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 497:.\Generated_Source\PSoC4/PWM.c ****     *
 498:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 499:.\Generated_Source\PSoC4/PWM.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:.\Generated_Source\PSoC4/PWM.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:.\Generated_Source\PSoC4/PWM.c ****     *  The compare output will be driven high when the present counter value is
 502:.\Generated_Source\PSoC4/PWM.c ****     *  compared to the compare value based on the compare mode defined in
 503:.\Generated_Source\PSoC4/PWM.c ****     *  Dither Mode.
 504:.\Generated_Source\PSoC4/PWM.c ****     *
 505:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 506:.\Generated_Source\PSoC4/PWM.c ****     *  compare:  New compare value.
 507:.\Generated_Source\PSoC4/PWM.c ****     *
 508:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 509:.\Generated_Source\PSoC4/PWM.c ****     *  None
 510:.\Generated_Source\PSoC4/PWM.c ****     *
 511:.\Generated_Source\PSoC4/PWM.c ****     * Side Effects:
 512:.\Generated_Source\PSoC4/PWM.c ****     *  This function is only available if the PWM mode parameter is set to
 513:.\Generated_Source\PSoC4/PWM.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:.\Generated_Source\PSoC4/PWM.c ****     *
 515:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 516:.\Generated_Source\PSoC4/PWM.c ****     void PWM_WriteCompare(uint8 compare) \
 517:.\Generated_Source\PSoC4/PWM.c ****                                        
 518:.\Generated_Source\PSoC4/PWM.c ****     {
 326              		.loc 1 518 0
 327              		.cfi_startproc
 328 0000 80B5     		push	{r7, lr}
 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 7, -8
 331              		.cfi_offset 14, -4
 332 0002 82B0     		sub	sp, sp, #8
 333              		.cfi_def_cfa_offset 16
 334 0004 00AF     		add	r7, sp, #0
 335              		.cfi_def_cfa_register 7
 336 0006 021C     		mov	r2, r0
 337 0008 FB1D     		add	r3, r7, #7
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 16


 338 000a 1A70     		strb	r2, [r3]
 519:.\Generated_Source\PSoC4/PWM.c ****         #if(PWM_UsingFixedFunction)
 520:.\Generated_Source\PSoC4/PWM.c ****             CY_SET_REG16(PWM_COMPARE1_LSB_PTR, (uint16)compare);
 521:.\Generated_Source\PSoC4/PWM.c ****         #else
 522:.\Generated_Source\PSoC4/PWM.c ****             CY_SET_REG8(PWM_COMPARE1_LSB_PTR, compare);
 339              		.loc 1 522 0
 340 000c 034B     		ldr	r3, .L25
 341 000e FA1D     		add	r2, r7, #7
 342 0010 1278     		ldrb	r2, [r2]
 343 0012 1A70     		strb	r2, [r3]
 523:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 524:.\Generated_Source\PSoC4/PWM.c **** 
 525:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM_PWMMode == PWM__B_PWM__DITHER)
 526:.\Generated_Source\PSoC4/PWM.c ****             #if(PWM_UsingFixedFunction)
 527:.\Generated_Source\PSoC4/PWM.c ****                 CY_SET_REG16(PWM_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:.\Generated_Source\PSoC4/PWM.c ****             #else
 529:.\Generated_Source\PSoC4/PWM.c ****                 CY_SET_REG8(PWM_COMPARE2_LSB_PTR, (compare + 1u));
 530:.\Generated_Source\PSoC4/PWM.c ****             #endif /* (PWM_UsingFixedFunction) */
 531:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_PWMMode == PWM__B_PWM__DITHER) */
 532:.\Generated_Source\PSoC4/PWM.c ****     }
 344              		.loc 1 532 0
 345 0014 BD46     		mov	sp, r7
 346 0016 02B0     		add	sp, sp, #8
 347              		@ sp needed
 348 0018 80BD     		pop	{r7, pc}
 349              	.L26:
 350 001a C046     		.align	2
 351              	.L25:
 352 001c 20000F40 		.word	1074724896
 353              		.cfi_endproc
 354              	.LFE7:
 355              		.size	PWM_WriteCompare, .-PWM_WriteCompare
 356              		.section	.text.PWM_WriteDeadTime,"ax",%progbits
 357              		.align	2
 358              		.global	PWM_WriteDeadTime
 359              		.code	16
 360              		.thumb_func
 361              		.type	PWM_WriteDeadTime, %function
 362              	PWM_WriteDeadTime:
 363              	.LFB8:
 533:.\Generated_Source\PSoC4/PWM.c **** 
 534:.\Generated_Source\PSoC4/PWM.c **** 
 535:.\Generated_Source\PSoC4/PWM.c **** #else
 536:.\Generated_Source\PSoC4/PWM.c **** 
 537:.\Generated_Source\PSoC4/PWM.c **** 
 538:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 539:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_WriteCompare1
 540:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 541:.\Generated_Source\PSoC4/PWM.c ****     *
 542:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 543:.\Generated_Source\PSoC4/PWM.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:.\Generated_Source\PSoC4/PWM.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:.\Generated_Source\PSoC4/PWM.c ****     *  driven high when the present counter value is less than or less than or
 546:.\Generated_Source\PSoC4/PWM.c ****     *  equal to the compare register, depending on the mode.
 547:.\Generated_Source\PSoC4/PWM.c ****     *
 548:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 549:.\Generated_Source\PSoC4/PWM.c ****     *  compare:  New compare value.
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 17


 550:.\Generated_Source\PSoC4/PWM.c ****     *
 551:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 552:.\Generated_Source\PSoC4/PWM.c ****     *  None
 553:.\Generated_Source\PSoC4/PWM.c ****     *
 554:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 555:.\Generated_Source\PSoC4/PWM.c ****     void PWM_WriteCompare1(uint8 compare) \
 556:.\Generated_Source\PSoC4/PWM.c ****                                         
 557:.\Generated_Source\PSoC4/PWM.c ****     {
 558:.\Generated_Source\PSoC4/PWM.c ****         #if(PWM_UsingFixedFunction)
 559:.\Generated_Source\PSoC4/PWM.c ****             CY_SET_REG16(PWM_COMPARE1_LSB_PTR, (uint16)compare);
 560:.\Generated_Source\PSoC4/PWM.c ****         #else
 561:.\Generated_Source\PSoC4/PWM.c ****             CY_SET_REG8(PWM_COMPARE1_LSB_PTR, compare);
 562:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 563:.\Generated_Source\PSoC4/PWM.c ****     }
 564:.\Generated_Source\PSoC4/PWM.c **** 
 565:.\Generated_Source\PSoC4/PWM.c **** 
 566:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 567:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_WriteCompare2
 568:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 569:.\Generated_Source\PSoC4/PWM.c ****     *
 570:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 571:.\Generated_Source\PSoC4/PWM.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:.\Generated_Source\PSoC4/PWM.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:.\Generated_Source\PSoC4/PWM.c ****     *  The compare output will be driven high when the present counter value is
 574:.\Generated_Source\PSoC4/PWM.c ****     *  less than or less than or equal to the compare register, depending on the
 575:.\Generated_Source\PSoC4/PWM.c ****     *  mode.
 576:.\Generated_Source\PSoC4/PWM.c ****     *
 577:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 578:.\Generated_Source\PSoC4/PWM.c ****     *  compare:  New compare value.
 579:.\Generated_Source\PSoC4/PWM.c ****     *
 580:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 581:.\Generated_Source\PSoC4/PWM.c ****     *  None
 582:.\Generated_Source\PSoC4/PWM.c ****     *
 583:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 584:.\Generated_Source\PSoC4/PWM.c ****     void PWM_WriteCompare2(uint8 compare) \
 585:.\Generated_Source\PSoC4/PWM.c ****                                         
 586:.\Generated_Source\PSoC4/PWM.c ****     {
 587:.\Generated_Source\PSoC4/PWM.c ****         #if(PWM_UsingFixedFunction)
 588:.\Generated_Source\PSoC4/PWM.c ****             CY_SET_REG16(PWM_COMPARE2_LSB_PTR, compare);
 589:.\Generated_Source\PSoC4/PWM.c ****         #else
 590:.\Generated_Source\PSoC4/PWM.c ****             CY_SET_REG8(PWM_COMPARE2_LSB_PTR, compare);
 591:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 592:.\Generated_Source\PSoC4/PWM.c ****     }
 593:.\Generated_Source\PSoC4/PWM.c **** #endif /* UseOneCompareMode */
 594:.\Generated_Source\PSoC4/PWM.c **** 
 595:.\Generated_Source\PSoC4/PWM.c **** #if (PWM_DeadBandUsed)
 596:.\Generated_Source\PSoC4/PWM.c **** 
 597:.\Generated_Source\PSoC4/PWM.c **** 
 598:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 599:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_WriteDeadTime
 600:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 601:.\Generated_Source\PSoC4/PWM.c ****     *
 602:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 603:.\Generated_Source\PSoC4/PWM.c ****     *  This function writes the dead-band counts to the corresponding register
 604:.\Generated_Source\PSoC4/PWM.c ****     *
 605:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 606:.\Generated_Source\PSoC4/PWM.c ****     *  deadtime:  Number of counts for dead time
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 18


 607:.\Generated_Source\PSoC4/PWM.c ****     *
 608:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 609:.\Generated_Source\PSoC4/PWM.c ****     *  None
 610:.\Generated_Source\PSoC4/PWM.c ****     *
 611:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 612:.\Generated_Source\PSoC4/PWM.c ****     void PWM_WriteDeadTime(uint8 deadtime) 
 613:.\Generated_Source\PSoC4/PWM.c ****     {
 364              		.loc 1 613 0
 365              		.cfi_startproc
 366 0000 80B5     		push	{r7, lr}
 367              		.cfi_def_cfa_offset 8
 368              		.cfi_offset 7, -8
 369              		.cfi_offset 14, -4
 370 0002 82B0     		sub	sp, sp, #8
 371              		.cfi_def_cfa_offset 16
 372 0004 00AF     		add	r7, sp, #0
 373              		.cfi_def_cfa_register 7
 374 0006 021C     		mov	r2, r0
 375 0008 FB1D     		add	r3, r7, #7
 376 000a 1A70     		strb	r2, [r3]
 614:.\Generated_Source\PSoC4/PWM.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:.\Generated_Source\PSoC4/PWM.c ****         #if(!PWM_DeadBand2_4)
 616:.\Generated_Source\PSoC4/PWM.c ****             CY_SET_REG8(PWM_DEADBAND_COUNT_PTR, deadtime);
 617:.\Generated_Source\PSoC4/PWM.c ****         #else
 618:.\Generated_Source\PSoC4/PWM.c ****             /* Otherwise the data has to be masked and offset */
 619:.\Generated_Source\PSoC4/PWM.c ****             /* Clear existing data */
 620:.\Generated_Source\PSoC4/PWM.c ****             PWM_DEADBAND_COUNT &= ((uint8)(~PWM_DEADBAND_COUNT_MASK));
 377              		.loc 1 620 0
 378 000c 0C4B     		ldr	r3, .L28
 379 000e 0C4A     		ldr	r2, .L28
 380 0010 1278     		ldrb	r2, [r2]
 381 0012 D2B2     		uxtb	r2, r2
 382 0014 0321     		mov	r1, #3
 383 0016 8A43     		bic	r2, r1
 384 0018 D2B2     		uxtb	r2, r2
 385 001a 1A70     		strb	r2, [r3]
 621:.\Generated_Source\PSoC4/PWM.c **** 
 622:.\Generated_Source\PSoC4/PWM.c ****             /* Set new dead time */
 623:.\Generated_Source\PSoC4/PWM.c ****             #if(PWM_DEADBAND_COUNT_SHIFT)
 624:.\Generated_Source\PSoC4/PWM.c ****                 PWM_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_DEADBAND_COUNT_SHIFT)) &
 625:.\Generated_Source\PSoC4/PWM.c ****                                                     PWM_DEADBAND_COUNT_MASK;
 626:.\Generated_Source\PSoC4/PWM.c ****             #else
 627:.\Generated_Source\PSoC4/PWM.c ****                 PWM_DEADBAND_COUNT |= deadtime & PWM_DEADBAND_COUNT_MASK;
 386              		.loc 1 627 0
 387 001c 084B     		ldr	r3, .L28
 388 001e 084A     		ldr	r2, .L28
 389 0020 1278     		ldrb	r2, [r2]
 390 0022 D2B2     		uxtb	r2, r2
 391 0024 D1B2     		uxtb	r1, r2
 392 0026 FA1D     		add	r2, r7, #7
 393 0028 1278     		ldrb	r2, [r2]
 394 002a 101C     		add	r0, r2, #0
 395 002c 0322     		mov	r2, #3
 396 002e 0240     		and	r2, r0
 397 0030 D2B2     		uxtb	r2, r2
 398 0032 0A43     		orr	r2, r1
 399 0034 D2B2     		uxtb	r2, r2
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 19


 400 0036 D2B2     		uxtb	r2, r2
 401 0038 1A70     		strb	r2, [r3]
 628:.\Generated_Source\PSoC4/PWM.c ****             #endif /* (PWM_DEADBAND_COUNT_SHIFT) */
 629:.\Generated_Source\PSoC4/PWM.c **** 
 630:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (!PWM_DeadBand2_4) */
 631:.\Generated_Source\PSoC4/PWM.c ****     }
 402              		.loc 1 631 0
 403 003a BD46     		mov	sp, r7
 404 003c 02B0     		add	sp, sp, #8
 405              		@ sp needed
 406 003e 80BD     		pop	{r7, pc}
 407              	.L29:
 408              		.align	2
 409              	.L28:
 410 0040 71000F40 		.word	1074724977
 411              		.cfi_endproc
 412              	.LFE8:
 413              		.size	PWM_WriteDeadTime, .-PWM_WriteDeadTime
 414              		.section	.text.PWM_ReadDeadTime,"ax",%progbits
 415              		.align	2
 416              		.global	PWM_ReadDeadTime
 417              		.code	16
 418              		.thumb_func
 419              		.type	PWM_ReadDeadTime, %function
 420              	PWM_ReadDeadTime:
 421              	.LFB9:
 632:.\Generated_Source\PSoC4/PWM.c **** 
 633:.\Generated_Source\PSoC4/PWM.c **** 
 634:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 635:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadDeadTime
 636:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 637:.\Generated_Source\PSoC4/PWM.c ****     *
 638:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 639:.\Generated_Source\PSoC4/PWM.c ****     *  This function reads the dead-band counts from the corresponding register
 640:.\Generated_Source\PSoC4/PWM.c ****     *
 641:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 642:.\Generated_Source\PSoC4/PWM.c ****     *  None
 643:.\Generated_Source\PSoC4/PWM.c ****     *
 644:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 645:.\Generated_Source\PSoC4/PWM.c ****     *  Dead Band Counts
 646:.\Generated_Source\PSoC4/PWM.c ****     *
 647:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 648:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadDeadTime(void) 
 649:.\Generated_Source\PSoC4/PWM.c ****     {
 422              		.loc 1 649 0
 423              		.cfi_startproc
 424 0000 80B5     		push	{r7, lr}
 425              		.cfi_def_cfa_offset 8
 426              		.cfi_offset 7, -8
 427              		.cfi_offset 14, -4
 428 0002 00AF     		add	r7, sp, #0
 429              		.cfi_def_cfa_register 7
 650:.\Generated_Source\PSoC4/PWM.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:.\Generated_Source\PSoC4/PWM.c ****         #if(!PWM_DeadBand2_4)
 652:.\Generated_Source\PSoC4/PWM.c ****             return (CY_GET_REG8(PWM_DEADBAND_COUNT_PTR));
 653:.\Generated_Source\PSoC4/PWM.c ****         #else
 654:.\Generated_Source\PSoC4/PWM.c **** 
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 20


 655:.\Generated_Source\PSoC4/PWM.c ****             /* Otherwise the data has to be masked and offset */
 656:.\Generated_Source\PSoC4/PWM.c ****             #if(PWM_DEADBAND_COUNT_SHIFT)
 657:.\Generated_Source\PSoC4/PWM.c ****                 return ((uint8)(((uint8)(PWM_DEADBAND_COUNT & PWM_DEADBAND_COUNT_MASK)) >>
 658:.\Generated_Source\PSoC4/PWM.c ****                                                                            PWM_DEADBAND_COUNT_SHIFT
 659:.\Generated_Source\PSoC4/PWM.c ****             #else
 660:.\Generated_Source\PSoC4/PWM.c ****                 return (PWM_DEADBAND_COUNT & PWM_DEADBAND_COUNT_MASK);
 430              		.loc 1 660 0
 431 0004 044B     		ldr	r3, .L32
 432 0006 1B78     		ldrb	r3, [r3]
 433 0008 DAB2     		uxtb	r2, r3
 434 000a 0323     		mov	r3, #3
 435 000c 1340     		and	r3, r2
 436 000e DBB2     		uxtb	r3, r3
 661:.\Generated_Source\PSoC4/PWM.c ****             #endif /* (PWM_DEADBAND_COUNT_SHIFT) */
 662:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (!PWM_DeadBand2_4) */
 663:.\Generated_Source\PSoC4/PWM.c ****     }
 437              		.loc 1 663 0
 438 0010 181C     		mov	r0, r3
 439 0012 BD46     		mov	sp, r7
 440              		@ sp needed
 441 0014 80BD     		pop	{r7, pc}
 442              	.L33:
 443 0016 C046     		.align	2
 444              	.L32:
 445 0018 71000F40 		.word	1074724977
 446              		.cfi_endproc
 447              	.LFE9:
 448              		.size	PWM_ReadDeadTime, .-PWM_ReadDeadTime
 449              		.section	.text.PWM_ReadControlRegister,"ax",%progbits
 450              		.align	2
 451              		.global	PWM_ReadControlRegister
 452              		.code	16
 453              		.thumb_func
 454              		.type	PWM_ReadControlRegister, %function
 455              	PWM_ReadControlRegister:
 456              	.LFB10:
 664:.\Generated_Source\PSoC4/PWM.c **** #endif /* DeadBandUsed */
 665:.\Generated_Source\PSoC4/PWM.c **** 
 666:.\Generated_Source\PSoC4/PWM.c **** #if (PWM_UseStatus || PWM_UsingFixedFunction)
 667:.\Generated_Source\PSoC4/PWM.c **** 
 668:.\Generated_Source\PSoC4/PWM.c **** 
 669:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 670:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_SetInterruptMode
 671:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 672:.\Generated_Source\PSoC4/PWM.c ****     *
 673:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 674:.\Generated_Source\PSoC4/PWM.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:.\Generated_Source\PSoC4/PWM.c ****     *  source status register.
 676:.\Generated_Source\PSoC4/PWM.c ****     *
 677:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 678:.\Generated_Source\PSoC4/PWM.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:.\Generated_Source\PSoC4/PWM.c ****     *
 680:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 681:.\Generated_Source\PSoC4/PWM.c ****     *  None
 682:.\Generated_Source\PSoC4/PWM.c ****     *
 683:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 684:.\Generated_Source\PSoC4/PWM.c ****     void PWM_SetInterruptMode(uint8 interruptMode) 
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 21


 685:.\Generated_Source\PSoC4/PWM.c ****     {
 686:.\Generated_Source\PSoC4/PWM.c ****         CY_SET_REG8(PWM_STATUS_MASK_PTR, interruptMode);
 687:.\Generated_Source\PSoC4/PWM.c ****     }
 688:.\Generated_Source\PSoC4/PWM.c **** 
 689:.\Generated_Source\PSoC4/PWM.c **** 
 690:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 691:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadStatusRegister
 692:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 693:.\Generated_Source\PSoC4/PWM.c ****     *
 694:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 695:.\Generated_Source\PSoC4/PWM.c ****     *  This function returns the current state of the status register.
 696:.\Generated_Source\PSoC4/PWM.c ****     *
 697:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 698:.\Generated_Source\PSoC4/PWM.c ****     *  None
 699:.\Generated_Source\PSoC4/PWM.c ****     *
 700:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 701:.\Generated_Source\PSoC4/PWM.c ****     *  uint8 : Current status register value. The status register bits are:
 702:.\Generated_Source\PSoC4/PWM.c ****     *  [7:6] : Unused(0)
 703:.\Generated_Source\PSoC4/PWM.c ****     *  [5]   : Kill event output
 704:.\Generated_Source\PSoC4/PWM.c ****     *  [4]   : FIFO not empty
 705:.\Generated_Source\PSoC4/PWM.c ****     *  [3]   : FIFO full
 706:.\Generated_Source\PSoC4/PWM.c ****     *  [2]   : Terminal count
 707:.\Generated_Source\PSoC4/PWM.c ****     *  [1]   : Compare output 2
 708:.\Generated_Source\PSoC4/PWM.c ****     *  [0]   : Compare output 1
 709:.\Generated_Source\PSoC4/PWM.c ****     *
 710:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 711:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadStatusRegister(void) 
 712:.\Generated_Source\PSoC4/PWM.c ****     {
 713:.\Generated_Source\PSoC4/PWM.c ****         return (CY_GET_REG8(PWM_STATUS_PTR));
 714:.\Generated_Source\PSoC4/PWM.c ****     }
 715:.\Generated_Source\PSoC4/PWM.c **** 
 716:.\Generated_Source\PSoC4/PWM.c **** #endif /* (PWM_UseStatus || PWM_UsingFixedFunction) */
 717:.\Generated_Source\PSoC4/PWM.c **** 
 718:.\Generated_Source\PSoC4/PWM.c **** 
 719:.\Generated_Source\PSoC4/PWM.c **** #if (PWM_UseControl)
 720:.\Generated_Source\PSoC4/PWM.c **** 
 721:.\Generated_Source\PSoC4/PWM.c **** 
 722:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 723:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadControlRegister
 724:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 725:.\Generated_Source\PSoC4/PWM.c ****     *
 726:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 727:.\Generated_Source\PSoC4/PWM.c ****     *  Returns the current state of the control register. This API is available
 728:.\Generated_Source\PSoC4/PWM.c ****     *  only if the control register is not removed.
 729:.\Generated_Source\PSoC4/PWM.c ****     *
 730:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 731:.\Generated_Source\PSoC4/PWM.c ****     *  None
 732:.\Generated_Source\PSoC4/PWM.c ****     *
 733:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 734:.\Generated_Source\PSoC4/PWM.c ****     *  uint8 : Current control register value
 735:.\Generated_Source\PSoC4/PWM.c ****     *
 736:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 737:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadControlRegister(void) 
 738:.\Generated_Source\PSoC4/PWM.c ****     {
 457              		.loc 1 738 0
 458              		.cfi_startproc
 459 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 22


 460              		.cfi_def_cfa_offset 8
 461              		.cfi_offset 7, -8
 462              		.cfi_offset 14, -4
 463 0002 82B0     		sub	sp, sp, #8
 464              		.cfi_def_cfa_offset 16
 465 0004 00AF     		add	r7, sp, #0
 466              		.cfi_def_cfa_register 7
 739:.\Generated_Source\PSoC4/PWM.c ****         uint8 result;
 740:.\Generated_Source\PSoC4/PWM.c **** 
 741:.\Generated_Source\PSoC4/PWM.c ****         result = CY_GET_REG8(PWM_CONTROL_PTR);
 467              		.loc 1 741 0
 468 0006 054A     		ldr	r2, .L36
 469 0008 FB1D     		add	r3, r7, #7
 470 000a 1278     		ldrb	r2, [r2]
 471 000c 1A70     		strb	r2, [r3]
 742:.\Generated_Source\PSoC4/PWM.c ****         return (result);
 472              		.loc 1 742 0
 473 000e FB1D     		add	r3, r7, #7
 474 0010 1B78     		ldrb	r3, [r3]
 743:.\Generated_Source\PSoC4/PWM.c ****     }
 475              		.loc 1 743 0
 476 0012 181C     		mov	r0, r3
 477 0014 BD46     		mov	sp, r7
 478 0016 02B0     		add	sp, sp, #8
 479              		@ sp needed
 480 0018 80BD     		pop	{r7, pc}
 481              	.L37:
 482 001a C046     		.align	2
 483              	.L36:
 484 001c 70000F40 		.word	1074724976
 485              		.cfi_endproc
 486              	.LFE10:
 487              		.size	PWM_ReadControlRegister, .-PWM_ReadControlRegister
 488              		.section	.text.PWM_WriteControlRegister,"ax",%progbits
 489              		.align	2
 490              		.global	PWM_WriteControlRegister
 491              		.code	16
 492              		.thumb_func
 493              		.type	PWM_WriteControlRegister, %function
 494              	PWM_WriteControlRegister:
 495              	.LFB11:
 744:.\Generated_Source\PSoC4/PWM.c **** 
 745:.\Generated_Source\PSoC4/PWM.c **** 
 746:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 747:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_WriteControlRegister
 748:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 749:.\Generated_Source\PSoC4/PWM.c ****     *
 750:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 751:.\Generated_Source\PSoC4/PWM.c ****     *  Sets the bit field of the control register. This API is available only if
 752:.\Generated_Source\PSoC4/PWM.c ****     *  the control register is not removed.
 753:.\Generated_Source\PSoC4/PWM.c ****     *
 754:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 755:.\Generated_Source\PSoC4/PWM.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:.\Generated_Source\PSoC4/PWM.c ****     *  [7]   : PWM Enable
 757:.\Generated_Source\PSoC4/PWM.c ****     *  [6]   : Reset
 758:.\Generated_Source\PSoC4/PWM.c ****     *  [5:3] : Compare Mode2
 759:.\Generated_Source\PSoC4/PWM.c ****     *  [2:0] : Compare Mode2
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 23


 760:.\Generated_Source\PSoC4/PWM.c ****     *
 761:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 762:.\Generated_Source\PSoC4/PWM.c ****     *  None
 763:.\Generated_Source\PSoC4/PWM.c ****     *
 764:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 765:.\Generated_Source\PSoC4/PWM.c ****     void PWM_WriteControlRegister(uint8 control) 
 766:.\Generated_Source\PSoC4/PWM.c ****     {
 496              		.loc 1 766 0
 497              		.cfi_startproc
 498 0000 80B5     		push	{r7, lr}
 499              		.cfi_def_cfa_offset 8
 500              		.cfi_offset 7, -8
 501              		.cfi_offset 14, -4
 502 0002 82B0     		sub	sp, sp, #8
 503              		.cfi_def_cfa_offset 16
 504 0004 00AF     		add	r7, sp, #0
 505              		.cfi_def_cfa_register 7
 506 0006 021C     		mov	r2, r0
 507 0008 FB1D     		add	r3, r7, #7
 508 000a 1A70     		strb	r2, [r3]
 767:.\Generated_Source\PSoC4/PWM.c ****         CY_SET_REG8(PWM_CONTROL_PTR, control);
 509              		.loc 1 767 0
 510 000c 034B     		ldr	r3, .L39
 511 000e FA1D     		add	r2, r7, #7
 512 0010 1278     		ldrb	r2, [r2]
 513 0012 1A70     		strb	r2, [r3]
 768:.\Generated_Source\PSoC4/PWM.c ****     }
 514              		.loc 1 768 0
 515 0014 BD46     		mov	sp, r7
 516 0016 02B0     		add	sp, sp, #8
 517              		@ sp needed
 518 0018 80BD     		pop	{r7, pc}
 519              	.L40:
 520 001a C046     		.align	2
 521              	.L39:
 522 001c 70000F40 		.word	1074724976
 523              		.cfi_endproc
 524              	.LFE11:
 525              		.size	PWM_WriteControlRegister, .-PWM_WriteControlRegister
 526              		.section	.text.PWM_ReadCapture,"ax",%progbits
 527              		.align	2
 528              		.global	PWM_ReadCapture
 529              		.code	16
 530              		.thumb_func
 531              		.type	PWM_ReadCapture, %function
 532              	PWM_ReadCapture:
 533              	.LFB12:
 769:.\Generated_Source\PSoC4/PWM.c **** 
 770:.\Generated_Source\PSoC4/PWM.c **** #endif /* (PWM_UseControl) */
 771:.\Generated_Source\PSoC4/PWM.c **** 
 772:.\Generated_Source\PSoC4/PWM.c **** 
 773:.\Generated_Source\PSoC4/PWM.c **** #if (!PWM_UsingFixedFunction)
 774:.\Generated_Source\PSoC4/PWM.c **** 
 775:.\Generated_Source\PSoC4/PWM.c **** 
 776:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 777:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadCapture
 778:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 24


 779:.\Generated_Source\PSoC4/PWM.c ****     *
 780:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 781:.\Generated_Source\PSoC4/PWM.c ****     *  Reads the capture value from the capture FIFO.
 782:.\Generated_Source\PSoC4/PWM.c ****     *
 783:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 784:.\Generated_Source\PSoC4/PWM.c ****     *  None
 785:.\Generated_Source\PSoC4/PWM.c ****     *
 786:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 787:.\Generated_Source\PSoC4/PWM.c ****     *  uint8/uint16: The current capture value
 788:.\Generated_Source\PSoC4/PWM.c ****     *
 789:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 790:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadCapture(void) 
 791:.\Generated_Source\PSoC4/PWM.c ****     {
 534              		.loc 1 791 0
 535              		.cfi_startproc
 536 0000 80B5     		push	{r7, lr}
 537              		.cfi_def_cfa_offset 8
 538              		.cfi_offset 7, -8
 539              		.cfi_offset 14, -4
 540 0002 00AF     		add	r7, sp, #0
 541              		.cfi_def_cfa_register 7
 792:.\Generated_Source\PSoC4/PWM.c ****         return (CY_GET_REG8(PWM_CAPTURE_LSB_PTR));
 542              		.loc 1 792 0
 543 0004 024B     		ldr	r3, .L43
 544 0006 1B78     		ldrb	r3, [r3]
 545 0008 DBB2     		uxtb	r3, r3
 793:.\Generated_Source\PSoC4/PWM.c ****     }
 546              		.loc 1 793 0
 547 000a 181C     		mov	r0, r3
 548 000c BD46     		mov	sp, r7
 549              		@ sp needed
 550 000e 80BD     		pop	{r7, pc}
 551              	.L44:
 552              		.align	2
 553              	.L43:
 554 0010 50000F40 		.word	1074724944
 555              		.cfi_endproc
 556              	.LFE12:
 557              		.size	PWM_ReadCapture, .-PWM_ReadCapture
 558              		.section	.text.PWM_ReadCompare,"ax",%progbits
 559              		.align	2
 560              		.global	PWM_ReadCompare
 561              		.code	16
 562              		.thumb_func
 563              		.type	PWM_ReadCompare, %function
 564              	PWM_ReadCompare:
 565              	.LFB13:
 794:.\Generated_Source\PSoC4/PWM.c **** 
 795:.\Generated_Source\PSoC4/PWM.c **** #endif /* (!PWM_UsingFixedFunction) */
 796:.\Generated_Source\PSoC4/PWM.c **** 
 797:.\Generated_Source\PSoC4/PWM.c **** 
 798:.\Generated_Source\PSoC4/PWM.c **** #if (PWM_UseOneCompareMode)
 799:.\Generated_Source\PSoC4/PWM.c **** 
 800:.\Generated_Source\PSoC4/PWM.c **** 
 801:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 802:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadCompare
 803:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 25


 804:.\Generated_Source\PSoC4/PWM.c ****     *
 805:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 806:.\Generated_Source\PSoC4/PWM.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:.\Generated_Source\PSoC4/PWM.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:.\Generated_Source\PSoC4/PWM.c ****     *
 809:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 810:.\Generated_Source\PSoC4/PWM.c ****     *  None
 811:.\Generated_Source\PSoC4/PWM.c ****     *
 812:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 813:.\Generated_Source\PSoC4/PWM.c ****     *  uint8/uint16: Current compare value
 814:.\Generated_Source\PSoC4/PWM.c ****     *
 815:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 816:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadCompare(void) 
 817:.\Generated_Source\PSoC4/PWM.c ****     {
 566              		.loc 1 817 0
 567              		.cfi_startproc
 568 0000 80B5     		push	{r7, lr}
 569              		.cfi_def_cfa_offset 8
 570              		.cfi_offset 7, -8
 571              		.cfi_offset 14, -4
 572 0002 00AF     		add	r7, sp, #0
 573              		.cfi_def_cfa_register 7
 818:.\Generated_Source\PSoC4/PWM.c ****         #if(PWM_UsingFixedFunction)
 819:.\Generated_Source\PSoC4/PWM.c ****             return ((uint8)CY_GET_REG16(PWM_COMPARE1_LSB_PTR));
 820:.\Generated_Source\PSoC4/PWM.c ****         #else
 821:.\Generated_Source\PSoC4/PWM.c ****             return (CY_GET_REG8(PWM_COMPARE1_LSB_PTR));
 574              		.loc 1 821 0
 575 0004 024B     		ldr	r3, .L47
 576 0006 1B78     		ldrb	r3, [r3]
 577 0008 DBB2     		uxtb	r3, r3
 822:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 823:.\Generated_Source\PSoC4/PWM.c ****     }
 578              		.loc 1 823 0
 579 000a 181C     		mov	r0, r3
 580 000c BD46     		mov	sp, r7
 581              		@ sp needed
 582 000e 80BD     		pop	{r7, pc}
 583              	.L48:
 584              		.align	2
 585              	.L47:
 586 0010 20000F40 		.word	1074724896
 587              		.cfi_endproc
 588              	.LFE13:
 589              		.size	PWM_ReadCompare, .-PWM_ReadCompare
 590              		.section	.text.PWM_ReadPeriod,"ax",%progbits
 591              		.align	2
 592              		.global	PWM_ReadPeriod
 593              		.code	16
 594              		.thumb_func
 595              		.type	PWM_ReadPeriod, %function
 596              	PWM_ReadPeriod:
 597              	.LFB14:
 824:.\Generated_Source\PSoC4/PWM.c **** 
 825:.\Generated_Source\PSoC4/PWM.c **** #else
 826:.\Generated_Source\PSoC4/PWM.c **** 
 827:.\Generated_Source\PSoC4/PWM.c **** 
 828:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 26


 829:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadCompare1
 830:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 831:.\Generated_Source\PSoC4/PWM.c ****     *
 832:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 833:.\Generated_Source\PSoC4/PWM.c ****     *  Reads the compare value for the compare1 output.
 834:.\Generated_Source\PSoC4/PWM.c ****     *
 835:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 836:.\Generated_Source\PSoC4/PWM.c ****     *  None
 837:.\Generated_Source\PSoC4/PWM.c ****     *
 838:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 839:.\Generated_Source\PSoC4/PWM.c ****     *  uint8/uint16: Current compare value.
 840:.\Generated_Source\PSoC4/PWM.c ****     *
 841:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 842:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadCompare1(void) 
 843:.\Generated_Source\PSoC4/PWM.c ****     {
 844:.\Generated_Source\PSoC4/PWM.c ****         return (CY_GET_REG8(PWM_COMPARE1_LSB_PTR));
 845:.\Generated_Source\PSoC4/PWM.c ****     }
 846:.\Generated_Source\PSoC4/PWM.c **** 
 847:.\Generated_Source\PSoC4/PWM.c **** 
 848:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 849:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadCompare2
 850:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 851:.\Generated_Source\PSoC4/PWM.c ****     *
 852:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 853:.\Generated_Source\PSoC4/PWM.c ****     *  Reads the compare value for the compare2 output.
 854:.\Generated_Source\PSoC4/PWM.c ****     *
 855:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 856:.\Generated_Source\PSoC4/PWM.c ****     *  None
 857:.\Generated_Source\PSoC4/PWM.c ****     *
 858:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 859:.\Generated_Source\PSoC4/PWM.c ****     *  uint8/uint16: Current compare value.
 860:.\Generated_Source\PSoC4/PWM.c ****     *
 861:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 862:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadCompare2(void) 
 863:.\Generated_Source\PSoC4/PWM.c ****     {
 864:.\Generated_Source\PSoC4/PWM.c ****         return (CY_GET_REG8(PWM_COMPARE2_LSB_PTR));
 865:.\Generated_Source\PSoC4/PWM.c ****     }
 866:.\Generated_Source\PSoC4/PWM.c **** 
 867:.\Generated_Source\PSoC4/PWM.c **** #endif /* (PWM_UseOneCompareMode) */
 868:.\Generated_Source\PSoC4/PWM.c **** 
 869:.\Generated_Source\PSoC4/PWM.c **** 
 870:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 871:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadPeriod
 872:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 873:.\Generated_Source\PSoC4/PWM.c **** *
 874:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 875:.\Generated_Source\PSoC4/PWM.c **** *  Reads the period value used by the PWM hardware.
 876:.\Generated_Source\PSoC4/PWM.c **** *
 877:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 878:.\Generated_Source\PSoC4/PWM.c **** *  None
 879:.\Generated_Source\PSoC4/PWM.c **** *
 880:.\Generated_Source\PSoC4/PWM.c **** * Return:
 881:.\Generated_Source\PSoC4/PWM.c **** *  uint8/16: Period value
 882:.\Generated_Source\PSoC4/PWM.c **** *
 883:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 884:.\Generated_Source\PSoC4/PWM.c **** uint8 PWM_ReadPeriod(void) 
 885:.\Generated_Source\PSoC4/PWM.c **** {
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 27


 598              		.loc 1 885 0
 599              		.cfi_startproc
 600 0000 80B5     		push	{r7, lr}
 601              		.cfi_def_cfa_offset 8
 602              		.cfi_offset 7, -8
 603              		.cfi_offset 14, -4
 604 0002 00AF     		add	r7, sp, #0
 605              		.cfi_def_cfa_register 7
 886:.\Generated_Source\PSoC4/PWM.c ****     #if(PWM_UsingFixedFunction)
 887:.\Generated_Source\PSoC4/PWM.c ****         return ((uint8)CY_GET_REG16(PWM_PERIOD_LSB_PTR));
 888:.\Generated_Source\PSoC4/PWM.c ****     #else
 889:.\Generated_Source\PSoC4/PWM.c ****         return (CY_GET_REG8(PWM_PERIOD_LSB_PTR));
 606              		.loc 1 889 0
 607 0004 024B     		ldr	r3, .L51
 608 0006 1B78     		ldrb	r3, [r3]
 609 0008 DBB2     		uxtb	r3, r3
 890:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 891:.\Generated_Source\PSoC4/PWM.c **** }
 610              		.loc 1 891 0
 611 000a 181C     		mov	r0, r3
 612 000c BD46     		mov	sp, r7
 613              		@ sp needed
 614 000e 80BD     		pop	{r7, pc}
 615              	.L52:
 616              		.align	2
 617              	.L51:
 618 0010 40000F40 		.word	1074724928
 619              		.cfi_endproc
 620              	.LFE14:
 621              		.size	PWM_ReadPeriod, .-PWM_ReadPeriod
 622              		.text
 623              	.Letext0:
 624              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 625              		.section	.debug_info,"",%progbits
 626              	.Ldebug_info0:
 627 0000 5E020000 		.4byte	0x25e
 628 0004 0400     		.2byte	0x4
 629 0006 00000000 		.4byte	.Ldebug_abbrev0
 630 000a 04       		.byte	0x4
 631 000b 01       		.uleb128 0x1
 632 000c 76000000 		.4byte	.LASF36
 633 0010 01       		.byte	0x1
 634 0011 51000000 		.4byte	.LASF37
 635 0015 60020000 		.4byte	.LASF38
 636 0019 00000000 		.4byte	.Ldebug_ranges0+0
 637 001d 00000000 		.4byte	0
 638 0021 00000000 		.4byte	.Ldebug_line0
 639 0025 02       		.uleb128 0x2
 640 0026 01       		.byte	0x1
 641 0027 06       		.byte	0x6
 642 0028 41020000 		.4byte	.LASF0
 643 002c 02       		.uleb128 0x2
 644 002d 01       		.byte	0x1
 645 002e 08       		.byte	0x8
 646 002f F2000000 		.4byte	.LASF1
 647 0033 02       		.uleb128 0x2
 648 0034 02       		.byte	0x2
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 28


 649 0035 05       		.byte	0x5
 650 0036 FC010000 		.4byte	.LASF2
 651 003a 02       		.uleb128 0x2
 652 003b 02       		.byte	0x2
 653 003c 07       		.byte	0x7
 654 003d 21000000 		.4byte	.LASF3
 655 0041 02       		.uleb128 0x2
 656 0042 04       		.byte	0x4
 657 0043 05       		.byte	0x5
 658 0044 20020000 		.4byte	.LASF4
 659 0048 02       		.uleb128 0x2
 660 0049 04       		.byte	0x4
 661 004a 07       		.byte	0x7
 662 004b 05010000 		.4byte	.LASF5
 663 004f 02       		.uleb128 0x2
 664 0050 08       		.byte	0x8
 665 0051 05       		.byte	0x5
 666 0052 C1010000 		.4byte	.LASF6
 667 0056 02       		.uleb128 0x2
 668 0057 08       		.byte	0x8
 669 0058 07       		.byte	0x7
 670 0059 8A010000 		.4byte	.LASF7
 671 005d 03       		.uleb128 0x3
 672 005e 04       		.byte	0x4
 673 005f 05       		.byte	0x5
 674 0060 696E7400 		.ascii	"int\000"
 675 0064 02       		.uleb128 0x2
 676 0065 04       		.byte	0x4
 677 0066 07       		.byte	0x7
 678 0067 34000000 		.4byte	.LASF8
 679 006b 04       		.uleb128 0x4
 680 006c 27010000 		.4byte	.LASF12
 681 0070 02       		.byte	0x2
 682 0071 A1       		.byte	0xa1
 683 0072 2C000000 		.4byte	0x2c
 684 0076 02       		.uleb128 0x2
 685 0077 04       		.byte	0x4
 686 0078 04       		.byte	0x4
 687 0079 70000000 		.4byte	.LASF9
 688 007d 02       		.uleb128 0x2
 689 007e 08       		.byte	0x8
 690 007f 04       		.byte	0x4
 691 0080 42010000 		.4byte	.LASF10
 692 0084 02       		.uleb128 0x2
 693 0085 01       		.byte	0x1
 694 0086 08       		.byte	0x8
 695 0087 CF010000 		.4byte	.LASF11
 696 008b 05       		.uleb128 0x5
 697 008c 00010000 		.4byte	.LASF13
 698 0090 02       		.byte	0x2
 699 0091 4B01     		.2byte	0x14b
 700 0093 97000000 		.4byte	0x97
 701 0097 06       		.uleb128 0x6
 702 0098 6B000000 		.4byte	0x6b
 703 009c 02       		.uleb128 0x2
 704 009d 04       		.byte	0x4
 705 009e 07       		.byte	0x7
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 29


 706 009f B8010000 		.4byte	.LASF14
 707 00a3 07       		.uleb128 0x7
 708 00a4 17000000 		.4byte	.LASF15
 709 00a8 01       		.byte	0x1
 710 00a9 37       		.byte	0x37
 711 00aa 00000000 		.4byte	.LFB0
 712 00ae 24000000 		.4byte	.LFE0-.LFB0
 713 00b2 01       		.uleb128 0x1
 714 00b3 9C       		.byte	0x9c
 715 00b4 08       		.uleb128 0x8
 716 00b5 5A010000 		.4byte	.LASF18
 717 00b9 01       		.byte	0x1
 718 00ba 54       		.byte	0x54
 719 00bb 00000000 		.4byte	.LFB1
 720 00bf 58000000 		.4byte	.LFE1-.LFB1
 721 00c3 01       		.uleb128 0x1
 722 00c4 9C       		.byte	0x9c
 723 00c5 D8000000 		.4byte	0xd8
 724 00c9 09       		.uleb128 0x9
 725 00ca 35010000 		.4byte	.LASF29
 726 00ce 01       		.byte	0x1
 727 00cf 57       		.byte	0x57
 728 00d0 6B000000 		.4byte	0x6b
 729 00d4 02       		.uleb128 0x2
 730 00d5 91       		.byte	0x91
 731 00d6 77       		.sleb128 -9
 732 00d7 00       		.byte	0
 733 00d8 0A       		.uleb128 0xa
 734 00d9 55020000 		.4byte	.LASF16
 735 00dd 01       		.byte	0x1
 736 00de C7       		.byte	0xc7
 737 00df 00000000 		.4byte	.LFB2
 738 00e3 20000000 		.4byte	.LFE2-.LFB2
 739 00e7 01       		.uleb128 0x1
 740 00e8 9C       		.byte	0x9c
 741 00e9 0A       		.uleb128 0xa
 742 00ea 17020000 		.4byte	.LASF17
 743 00ee 01       		.byte	0x1
 744 00ef E9       		.byte	0xe9
 745 00f0 00000000 		.4byte	.LFB3
 746 00f4 1C000000 		.4byte	.LFE3-.LFB3
 747 00f8 01       		.uleb128 0x1
 748 00f9 9C       		.byte	0x9c
 749 00fa 0B       		.uleb128 0xb
 750 00fb 06020000 		.4byte	.LASF19
 751 00ff 01       		.byte	0x1
 752 0100 9301     		.2byte	0x193
 753 0102 00000000 		.4byte	.LFB4
 754 0106 20000000 		.4byte	.LFE4-.LFB4
 755 010a 01       		.uleb128 0x1
 756 010b 9C       		.byte	0x9c
 757 010c 20010000 		.4byte	0x120
 758 0110 0C       		.uleb128 0xc
 759 0111 3A010000 		.4byte	.LASF21
 760 0115 01       		.byte	0x1
 761 0116 9301     		.2byte	0x193
 762 0118 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 30


 763 011c 02       		.uleb128 0x2
 764 011d 91       		.byte	0x91
 765 011e 77       		.sleb128 -9
 766 011f 00       		.byte	0
 767 0120 0D       		.uleb128 0xd
 768 0121 17010000 		.4byte	.LASF27
 769 0125 01       		.byte	0x1
 770 0126 A901     		.2byte	0x1a9
 771 0128 6B000000 		.4byte	0x6b
 772 012c 00000000 		.4byte	.LFB5
 773 0130 1C000000 		.4byte	.LFE5-.LFB5
 774 0134 01       		.uleb128 0x1
 775 0135 9C       		.byte	0x9c
 776 0136 0B       		.uleb128 0xb
 777 0137 A8010000 		.4byte	.LASF20
 778 013b 01       		.byte	0x1
 779 013c E201     		.2byte	0x1e2
 780 013e 00000000 		.4byte	.LFB6
 781 0142 20000000 		.4byte	.LFE6-.LFB6
 782 0146 01       		.uleb128 0x1
 783 0147 9C       		.byte	0x9c
 784 0148 5C010000 		.4byte	0x15c
 785 014c 0C       		.uleb128 0xc
 786 014d 10000000 		.4byte	.LASF22
 787 0151 01       		.byte	0x1
 788 0152 E201     		.2byte	0x1e2
 789 0154 6B000000 		.4byte	0x6b
 790 0158 02       		.uleb128 0x2
 791 0159 91       		.byte	0x91
 792 015a 77       		.sleb128 -9
 793 015b 00       		.byte	0
 794 015c 0B       		.uleb128 0xb
 795 015d 49010000 		.4byte	.LASF23
 796 0161 01       		.byte	0x1
 797 0162 0402     		.2byte	0x204
 798 0164 00000000 		.4byte	.LFB7
 799 0168 20000000 		.4byte	.LFE7-.LFB7
 800 016c 01       		.uleb128 0x1
 801 016d 9C       		.byte	0x9c
 802 016e 82010000 		.4byte	0x182
 803 0172 0C       		.uleb128 0xc
 804 0173 4D020000 		.4byte	.LASF24
 805 0177 01       		.byte	0x1
 806 0178 0402     		.2byte	0x204
 807 017a 6B000000 		.4byte	0x6b
 808 017e 02       		.uleb128 0x2
 809 017f 91       		.byte	0x91
 810 0180 77       		.sleb128 -9
 811 0181 00       		.byte	0
 812 0182 0B       		.uleb128 0xb
 813 0183 78010000 		.4byte	.LASF25
 814 0187 01       		.byte	0x1
 815 0188 6402     		.2byte	0x264
 816 018a 00000000 		.4byte	.LFB8
 817 018e 44000000 		.4byte	.LFE8-.LFB8
 818 0192 01       		.uleb128 0x1
 819 0193 9C       		.byte	0x9c
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 31


 820 0194 A8010000 		.4byte	0x1a8
 821 0198 0C       		.uleb128 0xc
 822 0199 63010000 		.4byte	.LASF26
 823 019d 01       		.byte	0x1
 824 019e 6402     		.2byte	0x264
 825 01a0 6B000000 		.4byte	0x6b
 826 01a4 02       		.uleb128 0x2
 827 01a5 91       		.byte	0x91
 828 01a6 77       		.sleb128 -9
 829 01a7 00       		.byte	0
 830 01a8 0D       		.uleb128 0xd
 831 01a9 CF020000 		.4byte	.LASF28
 832 01ad 01       		.byte	0x1
 833 01ae 8802     		.2byte	0x288
 834 01b0 6B000000 		.4byte	0x6b
 835 01b4 00000000 		.4byte	.LFB9
 836 01b8 1C000000 		.4byte	.LFE9-.LFB9
 837 01bc 01       		.uleb128 0x1
 838 01bd 9C       		.byte	0x9c
 839 01be 0E       		.uleb128 0xe
 840 01bf 29020000 		.4byte	.LASF39
 841 01c3 01       		.byte	0x1
 842 01c4 E102     		.2byte	0x2e1
 843 01c6 6B000000 		.4byte	0x6b
 844 01ca 00000000 		.4byte	.LFB10
 845 01ce 20000000 		.4byte	.LFE10-.LFB10
 846 01d2 01       		.uleb128 0x1
 847 01d3 9C       		.byte	0x9c
 848 01d4 E8010000 		.4byte	0x1e8
 849 01d8 0F       		.uleb128 0xf
 850 01d9 A1010000 		.4byte	.LASF30
 851 01dd 01       		.byte	0x1
 852 01de E302     		.2byte	0x2e3
 853 01e0 6B000000 		.4byte	0x6b
 854 01e4 02       		.uleb128 0x2
 855 01e5 91       		.byte	0x91
 856 01e6 77       		.sleb128 -9
 857 01e7 00       		.byte	0
 858 01e8 0B       		.uleb128 0xb
 859 01e9 D4010000 		.4byte	.LASF31
 860 01ed 01       		.byte	0x1
 861 01ee FD02     		.2byte	0x2fd
 862 01f0 00000000 		.4byte	.LFB11
 863 01f4 20000000 		.4byte	.LFE11-.LFB11
 864 01f8 01       		.uleb128 0x1
 865 01f9 9C       		.byte	0x9c
 866 01fa 0E020000 		.4byte	0x20e
 867 01fe 0C       		.uleb128 0xc
 868 01ff 2D010000 		.4byte	.LASF32
 869 0203 01       		.byte	0x1
 870 0204 FD02     		.2byte	0x2fd
 871 0206 6B000000 		.4byte	0x6b
 872 020a 02       		.uleb128 0x2
 873 020b 91       		.byte	0x91
 874 020c 77       		.sleb128 -9
 875 020d 00       		.byte	0
 876 020e 0D       		.uleb128 0xd
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 32


 877 020f 41000000 		.4byte	.LASF33
 878 0213 01       		.byte	0x1
 879 0214 1603     		.2byte	0x316
 880 0216 6B000000 		.4byte	0x6b
 881 021a 00000000 		.4byte	.LFB12
 882 021e 14000000 		.4byte	.LFE12-.LFB12
 883 0222 01       		.uleb128 0x1
 884 0223 9C       		.byte	0x9c
 885 0224 0D       		.uleb128 0xd
 886 0225 00000000 		.4byte	.LASF34
 887 0229 01       		.byte	0x1
 888 022a 3003     		.2byte	0x330
 889 022c 6B000000 		.4byte	0x6b
 890 0230 00000000 		.4byte	.LFB13
 891 0234 14000000 		.4byte	.LFE13-.LFB13
 892 0238 01       		.uleb128 0x1
 893 0239 9C       		.byte	0x9c
 894 023a 0D       		.uleb128 0xd
 895 023b ED010000 		.4byte	.LASF35
 896 023f 01       		.byte	0x1
 897 0240 7403     		.2byte	0x374
 898 0242 6B000000 		.4byte	0x6b
 899 0246 00000000 		.4byte	.LFB14
 900 024a 14000000 		.4byte	.LFE14-.LFB14
 901 024e 01       		.uleb128 0x1
 902 024f 9C       		.byte	0x9c
 903 0250 10       		.uleb128 0x10
 904 0251 6C010000 		.4byte	.LASF40
 905 0255 01       		.byte	0x1
 906 0256 20       		.byte	0x20
 907 0257 6B000000 		.4byte	0x6b
 908 025b 05       		.uleb128 0x5
 909 025c 03       		.byte	0x3
 910 025d 00000000 		.4byte	PWM_initVar
 911 0261 00       		.byte	0
 912              		.section	.debug_abbrev,"",%progbits
 913              	.Ldebug_abbrev0:
 914 0000 01       		.uleb128 0x1
 915 0001 11       		.uleb128 0x11
 916 0002 01       		.byte	0x1
 917 0003 25       		.uleb128 0x25
 918 0004 0E       		.uleb128 0xe
 919 0005 13       		.uleb128 0x13
 920 0006 0B       		.uleb128 0xb
 921 0007 03       		.uleb128 0x3
 922 0008 0E       		.uleb128 0xe
 923 0009 1B       		.uleb128 0x1b
 924 000a 0E       		.uleb128 0xe
 925 000b 55       		.uleb128 0x55
 926 000c 17       		.uleb128 0x17
 927 000d 11       		.uleb128 0x11
 928 000e 01       		.uleb128 0x1
 929 000f 10       		.uleb128 0x10
 930 0010 17       		.uleb128 0x17
 931 0011 00       		.byte	0
 932 0012 00       		.byte	0
 933 0013 02       		.uleb128 0x2
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 33


 934 0014 24       		.uleb128 0x24
 935 0015 00       		.byte	0
 936 0016 0B       		.uleb128 0xb
 937 0017 0B       		.uleb128 0xb
 938 0018 3E       		.uleb128 0x3e
 939 0019 0B       		.uleb128 0xb
 940 001a 03       		.uleb128 0x3
 941 001b 0E       		.uleb128 0xe
 942 001c 00       		.byte	0
 943 001d 00       		.byte	0
 944 001e 03       		.uleb128 0x3
 945 001f 24       		.uleb128 0x24
 946 0020 00       		.byte	0
 947 0021 0B       		.uleb128 0xb
 948 0022 0B       		.uleb128 0xb
 949 0023 3E       		.uleb128 0x3e
 950 0024 0B       		.uleb128 0xb
 951 0025 03       		.uleb128 0x3
 952 0026 08       		.uleb128 0x8
 953 0027 00       		.byte	0
 954 0028 00       		.byte	0
 955 0029 04       		.uleb128 0x4
 956 002a 16       		.uleb128 0x16
 957 002b 00       		.byte	0
 958 002c 03       		.uleb128 0x3
 959 002d 0E       		.uleb128 0xe
 960 002e 3A       		.uleb128 0x3a
 961 002f 0B       		.uleb128 0xb
 962 0030 3B       		.uleb128 0x3b
 963 0031 0B       		.uleb128 0xb
 964 0032 49       		.uleb128 0x49
 965 0033 13       		.uleb128 0x13
 966 0034 00       		.byte	0
 967 0035 00       		.byte	0
 968 0036 05       		.uleb128 0x5
 969 0037 16       		.uleb128 0x16
 970 0038 00       		.byte	0
 971 0039 03       		.uleb128 0x3
 972 003a 0E       		.uleb128 0xe
 973 003b 3A       		.uleb128 0x3a
 974 003c 0B       		.uleb128 0xb
 975 003d 3B       		.uleb128 0x3b
 976 003e 05       		.uleb128 0x5
 977 003f 49       		.uleb128 0x49
 978 0040 13       		.uleb128 0x13
 979 0041 00       		.byte	0
 980 0042 00       		.byte	0
 981 0043 06       		.uleb128 0x6
 982 0044 35       		.uleb128 0x35
 983 0045 00       		.byte	0
 984 0046 49       		.uleb128 0x49
 985 0047 13       		.uleb128 0x13
 986 0048 00       		.byte	0
 987 0049 00       		.byte	0
 988 004a 07       		.uleb128 0x7
 989 004b 2E       		.uleb128 0x2e
 990 004c 00       		.byte	0
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 34


 991 004d 3F       		.uleb128 0x3f
 992 004e 19       		.uleb128 0x19
 993 004f 03       		.uleb128 0x3
 994 0050 0E       		.uleb128 0xe
 995 0051 3A       		.uleb128 0x3a
 996 0052 0B       		.uleb128 0xb
 997 0053 3B       		.uleb128 0x3b
 998 0054 0B       		.uleb128 0xb
 999 0055 27       		.uleb128 0x27
 1000 0056 19       		.uleb128 0x19
 1001 0057 11       		.uleb128 0x11
 1002 0058 01       		.uleb128 0x1
 1003 0059 12       		.uleb128 0x12
 1004 005a 06       		.uleb128 0x6
 1005 005b 40       		.uleb128 0x40
 1006 005c 18       		.uleb128 0x18
 1007 005d 9642     		.uleb128 0x2116
 1008 005f 19       		.uleb128 0x19
 1009 0060 00       		.byte	0
 1010 0061 00       		.byte	0
 1011 0062 08       		.uleb128 0x8
 1012 0063 2E       		.uleb128 0x2e
 1013 0064 01       		.byte	0x1
 1014 0065 3F       		.uleb128 0x3f
 1015 0066 19       		.uleb128 0x19
 1016 0067 03       		.uleb128 0x3
 1017 0068 0E       		.uleb128 0xe
 1018 0069 3A       		.uleb128 0x3a
 1019 006a 0B       		.uleb128 0xb
 1020 006b 3B       		.uleb128 0x3b
 1021 006c 0B       		.uleb128 0xb
 1022 006d 27       		.uleb128 0x27
 1023 006e 19       		.uleb128 0x19
 1024 006f 11       		.uleb128 0x11
 1025 0070 01       		.uleb128 0x1
 1026 0071 12       		.uleb128 0x12
 1027 0072 06       		.uleb128 0x6
 1028 0073 40       		.uleb128 0x40
 1029 0074 18       		.uleb128 0x18
 1030 0075 9642     		.uleb128 0x2116
 1031 0077 19       		.uleb128 0x19
 1032 0078 01       		.uleb128 0x1
 1033 0079 13       		.uleb128 0x13
 1034 007a 00       		.byte	0
 1035 007b 00       		.byte	0
 1036 007c 09       		.uleb128 0x9
 1037 007d 34       		.uleb128 0x34
 1038 007e 00       		.byte	0
 1039 007f 03       		.uleb128 0x3
 1040 0080 0E       		.uleb128 0xe
 1041 0081 3A       		.uleb128 0x3a
 1042 0082 0B       		.uleb128 0xb
 1043 0083 3B       		.uleb128 0x3b
 1044 0084 0B       		.uleb128 0xb
 1045 0085 49       		.uleb128 0x49
 1046 0086 13       		.uleb128 0x13
 1047 0087 02       		.uleb128 0x2
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 35


 1048 0088 18       		.uleb128 0x18
 1049 0089 00       		.byte	0
 1050 008a 00       		.byte	0
 1051 008b 0A       		.uleb128 0xa
 1052 008c 2E       		.uleb128 0x2e
 1053 008d 00       		.byte	0
 1054 008e 3F       		.uleb128 0x3f
 1055 008f 19       		.uleb128 0x19
 1056 0090 03       		.uleb128 0x3
 1057 0091 0E       		.uleb128 0xe
 1058 0092 3A       		.uleb128 0x3a
 1059 0093 0B       		.uleb128 0xb
 1060 0094 3B       		.uleb128 0x3b
 1061 0095 0B       		.uleb128 0xb
 1062 0096 27       		.uleb128 0x27
 1063 0097 19       		.uleb128 0x19
 1064 0098 11       		.uleb128 0x11
 1065 0099 01       		.uleb128 0x1
 1066 009a 12       		.uleb128 0x12
 1067 009b 06       		.uleb128 0x6
 1068 009c 40       		.uleb128 0x40
 1069 009d 18       		.uleb128 0x18
 1070 009e 9742     		.uleb128 0x2117
 1071 00a0 19       		.uleb128 0x19
 1072 00a1 00       		.byte	0
 1073 00a2 00       		.byte	0
 1074 00a3 0B       		.uleb128 0xb
 1075 00a4 2E       		.uleb128 0x2e
 1076 00a5 01       		.byte	0x1
 1077 00a6 3F       		.uleb128 0x3f
 1078 00a7 19       		.uleb128 0x19
 1079 00a8 03       		.uleb128 0x3
 1080 00a9 0E       		.uleb128 0xe
 1081 00aa 3A       		.uleb128 0x3a
 1082 00ab 0B       		.uleb128 0xb
 1083 00ac 3B       		.uleb128 0x3b
 1084 00ad 05       		.uleb128 0x5
 1085 00ae 27       		.uleb128 0x27
 1086 00af 19       		.uleb128 0x19
 1087 00b0 11       		.uleb128 0x11
 1088 00b1 01       		.uleb128 0x1
 1089 00b2 12       		.uleb128 0x12
 1090 00b3 06       		.uleb128 0x6
 1091 00b4 40       		.uleb128 0x40
 1092 00b5 18       		.uleb128 0x18
 1093 00b6 9742     		.uleb128 0x2117
 1094 00b8 19       		.uleb128 0x19
 1095 00b9 01       		.uleb128 0x1
 1096 00ba 13       		.uleb128 0x13
 1097 00bb 00       		.byte	0
 1098 00bc 00       		.byte	0
 1099 00bd 0C       		.uleb128 0xc
 1100 00be 05       		.uleb128 0x5
 1101 00bf 00       		.byte	0
 1102 00c0 03       		.uleb128 0x3
 1103 00c1 0E       		.uleb128 0xe
 1104 00c2 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 36


 1105 00c3 0B       		.uleb128 0xb
 1106 00c4 3B       		.uleb128 0x3b
 1107 00c5 05       		.uleb128 0x5
 1108 00c6 49       		.uleb128 0x49
 1109 00c7 13       		.uleb128 0x13
 1110 00c8 02       		.uleb128 0x2
 1111 00c9 18       		.uleb128 0x18
 1112 00ca 00       		.byte	0
 1113 00cb 00       		.byte	0
 1114 00cc 0D       		.uleb128 0xd
 1115 00cd 2E       		.uleb128 0x2e
 1116 00ce 00       		.byte	0
 1117 00cf 3F       		.uleb128 0x3f
 1118 00d0 19       		.uleb128 0x19
 1119 00d1 03       		.uleb128 0x3
 1120 00d2 0E       		.uleb128 0xe
 1121 00d3 3A       		.uleb128 0x3a
 1122 00d4 0B       		.uleb128 0xb
 1123 00d5 3B       		.uleb128 0x3b
 1124 00d6 05       		.uleb128 0x5
 1125 00d7 27       		.uleb128 0x27
 1126 00d8 19       		.uleb128 0x19
 1127 00d9 49       		.uleb128 0x49
 1128 00da 13       		.uleb128 0x13
 1129 00db 11       		.uleb128 0x11
 1130 00dc 01       		.uleb128 0x1
 1131 00dd 12       		.uleb128 0x12
 1132 00de 06       		.uleb128 0x6
 1133 00df 40       		.uleb128 0x40
 1134 00e0 18       		.uleb128 0x18
 1135 00e1 9742     		.uleb128 0x2117
 1136 00e3 19       		.uleb128 0x19
 1137 00e4 00       		.byte	0
 1138 00e5 00       		.byte	0
 1139 00e6 0E       		.uleb128 0xe
 1140 00e7 2E       		.uleb128 0x2e
 1141 00e8 01       		.byte	0x1
 1142 00e9 3F       		.uleb128 0x3f
 1143 00ea 19       		.uleb128 0x19
 1144 00eb 03       		.uleb128 0x3
 1145 00ec 0E       		.uleb128 0xe
 1146 00ed 3A       		.uleb128 0x3a
 1147 00ee 0B       		.uleb128 0xb
 1148 00ef 3B       		.uleb128 0x3b
 1149 00f0 05       		.uleb128 0x5
 1150 00f1 27       		.uleb128 0x27
 1151 00f2 19       		.uleb128 0x19
 1152 00f3 49       		.uleb128 0x49
 1153 00f4 13       		.uleb128 0x13
 1154 00f5 11       		.uleb128 0x11
 1155 00f6 01       		.uleb128 0x1
 1156 00f7 12       		.uleb128 0x12
 1157 00f8 06       		.uleb128 0x6
 1158 00f9 40       		.uleb128 0x40
 1159 00fa 18       		.uleb128 0x18
 1160 00fb 9742     		.uleb128 0x2117
 1161 00fd 19       		.uleb128 0x19
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 37


 1162 00fe 01       		.uleb128 0x1
 1163 00ff 13       		.uleb128 0x13
 1164 0100 00       		.byte	0
 1165 0101 00       		.byte	0
 1166 0102 0F       		.uleb128 0xf
 1167 0103 34       		.uleb128 0x34
 1168 0104 00       		.byte	0
 1169 0105 03       		.uleb128 0x3
 1170 0106 0E       		.uleb128 0xe
 1171 0107 3A       		.uleb128 0x3a
 1172 0108 0B       		.uleb128 0xb
 1173 0109 3B       		.uleb128 0x3b
 1174 010a 05       		.uleb128 0x5
 1175 010b 49       		.uleb128 0x49
 1176 010c 13       		.uleb128 0x13
 1177 010d 02       		.uleb128 0x2
 1178 010e 18       		.uleb128 0x18
 1179 010f 00       		.byte	0
 1180 0110 00       		.byte	0
 1181 0111 10       		.uleb128 0x10
 1182 0112 34       		.uleb128 0x34
 1183 0113 00       		.byte	0
 1184 0114 03       		.uleb128 0x3
 1185 0115 0E       		.uleb128 0xe
 1186 0116 3A       		.uleb128 0x3a
 1187 0117 0B       		.uleb128 0xb
 1188 0118 3B       		.uleb128 0x3b
 1189 0119 0B       		.uleb128 0xb
 1190 011a 49       		.uleb128 0x49
 1191 011b 13       		.uleb128 0x13
 1192 011c 3F       		.uleb128 0x3f
 1193 011d 19       		.uleb128 0x19
 1194 011e 02       		.uleb128 0x2
 1195 011f 18       		.uleb128 0x18
 1196 0120 00       		.byte	0
 1197 0121 00       		.byte	0
 1198 0122 00       		.byte	0
 1199              		.section	.debug_aranges,"",%progbits
 1200 0000 8C000000 		.4byte	0x8c
 1201 0004 0200     		.2byte	0x2
 1202 0006 00000000 		.4byte	.Ldebug_info0
 1203 000a 04       		.byte	0x4
 1204 000b 00       		.byte	0
 1205 000c 0000     		.2byte	0
 1206 000e 0000     		.2byte	0
 1207 0010 00000000 		.4byte	.LFB0
 1208 0014 24000000 		.4byte	.LFE0-.LFB0
 1209 0018 00000000 		.4byte	.LFB1
 1210 001c 58000000 		.4byte	.LFE1-.LFB1
 1211 0020 00000000 		.4byte	.LFB2
 1212 0024 20000000 		.4byte	.LFE2-.LFB2
 1213 0028 00000000 		.4byte	.LFB3
 1214 002c 1C000000 		.4byte	.LFE3-.LFB3
 1215 0030 00000000 		.4byte	.LFB4
 1216 0034 20000000 		.4byte	.LFE4-.LFB4
 1217 0038 00000000 		.4byte	.LFB5
 1218 003c 1C000000 		.4byte	.LFE5-.LFB5
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 38


 1219 0040 00000000 		.4byte	.LFB6
 1220 0044 20000000 		.4byte	.LFE6-.LFB6
 1221 0048 00000000 		.4byte	.LFB7
 1222 004c 20000000 		.4byte	.LFE7-.LFB7
 1223 0050 00000000 		.4byte	.LFB8
 1224 0054 44000000 		.4byte	.LFE8-.LFB8
 1225 0058 00000000 		.4byte	.LFB9
 1226 005c 1C000000 		.4byte	.LFE9-.LFB9
 1227 0060 00000000 		.4byte	.LFB10
 1228 0064 20000000 		.4byte	.LFE10-.LFB10
 1229 0068 00000000 		.4byte	.LFB11
 1230 006c 20000000 		.4byte	.LFE11-.LFB11
 1231 0070 00000000 		.4byte	.LFB12
 1232 0074 14000000 		.4byte	.LFE12-.LFB12
 1233 0078 00000000 		.4byte	.LFB13
 1234 007c 14000000 		.4byte	.LFE13-.LFB13
 1235 0080 00000000 		.4byte	.LFB14
 1236 0084 14000000 		.4byte	.LFE14-.LFB14
 1237 0088 00000000 		.4byte	0
 1238 008c 00000000 		.4byte	0
 1239              		.section	.debug_ranges,"",%progbits
 1240              	.Ldebug_ranges0:
 1241 0000 00000000 		.4byte	.LFB0
 1242 0004 24000000 		.4byte	.LFE0
 1243 0008 00000000 		.4byte	.LFB1
 1244 000c 58000000 		.4byte	.LFE1
 1245 0010 00000000 		.4byte	.LFB2
 1246 0014 20000000 		.4byte	.LFE2
 1247 0018 00000000 		.4byte	.LFB3
 1248 001c 1C000000 		.4byte	.LFE3
 1249 0020 00000000 		.4byte	.LFB4
 1250 0024 20000000 		.4byte	.LFE4
 1251 0028 00000000 		.4byte	.LFB5
 1252 002c 1C000000 		.4byte	.LFE5
 1253 0030 00000000 		.4byte	.LFB6
 1254 0034 20000000 		.4byte	.LFE6
 1255 0038 00000000 		.4byte	.LFB7
 1256 003c 20000000 		.4byte	.LFE7
 1257 0040 00000000 		.4byte	.LFB8
 1258 0044 44000000 		.4byte	.LFE8
 1259 0048 00000000 		.4byte	.LFB9
 1260 004c 1C000000 		.4byte	.LFE9
 1261 0050 00000000 		.4byte	.LFB10
 1262 0054 20000000 		.4byte	.LFE10
 1263 0058 00000000 		.4byte	.LFB11
 1264 005c 20000000 		.4byte	.LFE11
 1265 0060 00000000 		.4byte	.LFB12
 1266 0064 14000000 		.4byte	.LFE12
 1267 0068 00000000 		.4byte	.LFB13
 1268 006c 14000000 		.4byte	.LFE13
 1269 0070 00000000 		.4byte	.LFB14
 1270 0074 14000000 		.4byte	.LFE14
 1271 0078 00000000 		.4byte	0
 1272 007c 00000000 		.4byte	0
 1273              		.section	.debug_line,"",%progbits
 1274              	.Ldebug_line0:
 1275 0000 6D010000 		.section	.debug_str,"MS",%progbits,1
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 39


 1275      02004200 
 1275      00000201 
 1275      FB0E0D00 
 1275      01010101 
 1276              	.LASF34:
 1277 0000 50574D5F 		.ascii	"PWM_ReadCompare\000"
 1277      52656164 
 1277      436F6D70 
 1277      61726500 
 1278              	.LASF22:
 1279 0010 70657269 		.ascii	"period\000"
 1279      6F6400
 1280              	.LASF15:
 1281 0017 50574D5F 		.ascii	"PWM_Start\000"
 1281      53746172 
 1281      7400
 1282              	.LASF3:
 1283 0021 73686F72 		.ascii	"short unsigned int\000"
 1283      7420756E 
 1283      7369676E 
 1283      65642069 
 1283      6E7400
 1284              	.LASF8:
 1285 0034 756E7369 		.ascii	"unsigned int\000"
 1285      676E6564 
 1285      20696E74 
 1285      00
 1286              	.LASF33:
 1287 0041 50574D5F 		.ascii	"PWM_ReadCapture\000"
 1287      52656164 
 1287      43617074 
 1287      75726500 
 1288              	.LASF37:
 1289 0051 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\PWM.c\000"
 1289      6E657261 
 1289      7465645F 
 1289      536F7572 
 1289      63655C50 
 1290              	.LASF9:
 1291 0070 666C6F61 		.ascii	"float\000"
 1291      7400
 1292              	.LASF36:
 1293 0076 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 1293      4320342E 
 1293      382E3420 
 1293      32303134 
 1293      30353236 
 1294 00a9 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 1294      20726576 
 1294      6973696F 
 1294      6E203231 
 1294      31333538 
 1295 00dc 30202D66 		.ascii	"0 -ffunction-sections\000"
 1295      66756E63 
 1295      74696F6E 
 1295      2D736563 
 1295      74696F6E 
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 40


 1296              	.LASF1:
 1297 00f2 756E7369 		.ascii	"unsigned char\000"
 1297      676E6564 
 1297      20636861 
 1297      7200
 1298              	.LASF13:
 1299 0100 72656738 		.ascii	"reg8\000"
 1299      00
 1300              	.LASF5:
 1301 0105 6C6F6E67 		.ascii	"long unsigned int\000"
 1301      20756E73 
 1301      69676E65 
 1301      6420696E 
 1301      7400
 1302              	.LASF27:
 1303 0117 50574D5F 		.ascii	"PWM_ReadCounter\000"
 1303      52656164 
 1303      436F756E 
 1303      74657200 
 1304              	.LASF12:
 1305 0127 75696E74 		.ascii	"uint8\000"
 1305      3800
 1306              	.LASF32:
 1307 012d 636F6E74 		.ascii	"control\000"
 1307      726F6C00 
 1308              	.LASF29:
 1309 0135 6374726C 		.ascii	"ctrl\000"
 1309      00
 1310              	.LASF21:
 1311 013a 636F756E 		.ascii	"counter\000"
 1311      74657200 
 1312              	.LASF10:
 1313 0142 646F7562 		.ascii	"double\000"
 1313      6C6500
 1314              	.LASF23:
 1315 0149 50574D5F 		.ascii	"PWM_WriteCompare\000"
 1315      57726974 
 1315      65436F6D 
 1315      70617265 
 1315      00
 1316              	.LASF18:
 1317 015a 50574D5F 		.ascii	"PWM_Init\000"
 1317      496E6974 
 1317      00
 1318              	.LASF26:
 1319 0163 64656164 		.ascii	"deadtime\000"
 1319      74696D65 
 1319      00
 1320              	.LASF40:
 1321 016c 50574D5F 		.ascii	"PWM_initVar\000"
 1321      696E6974 
 1321      56617200 
 1322              	.LASF25:
 1323 0178 50574D5F 		.ascii	"PWM_WriteDeadTime\000"
 1323      57726974 
 1323      65446561 
 1323      6454696D 
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 41


 1323      6500
 1324              	.LASF7:
 1325 018a 6C6F6E67 		.ascii	"long long unsigned int\000"
 1325      206C6F6E 
 1325      6720756E 
 1325      7369676E 
 1325      65642069 
 1326              	.LASF30:
 1327 01a1 72657375 		.ascii	"result\000"
 1327      6C7400
 1328              	.LASF20:
 1329 01a8 50574D5F 		.ascii	"PWM_WritePeriod\000"
 1329      57726974 
 1329      65506572 
 1329      696F6400 
 1330              	.LASF14:
 1331 01b8 73697A65 		.ascii	"sizetype\000"
 1331      74797065 
 1331      00
 1332              	.LASF6:
 1333 01c1 6C6F6E67 		.ascii	"long long int\000"
 1333      206C6F6E 
 1333      6720696E 
 1333      7400
 1334              	.LASF11:
 1335 01cf 63686172 		.ascii	"char\000"
 1335      00
 1336              	.LASF31:
 1337 01d4 50574D5F 		.ascii	"PWM_WriteControlRegister\000"
 1337      57726974 
 1337      65436F6E 
 1337      74726F6C 
 1337      52656769 
 1338              	.LASF35:
 1339 01ed 50574D5F 		.ascii	"PWM_ReadPeriod\000"
 1339      52656164 
 1339      50657269 
 1339      6F6400
 1340              	.LASF2:
 1341 01fc 73686F72 		.ascii	"short int\000"
 1341      7420696E 
 1341      7400
 1342              	.LASF19:
 1343 0206 50574D5F 		.ascii	"PWM_WriteCounter\000"
 1343      57726974 
 1343      65436F75 
 1343      6E746572 
 1343      00
 1344              	.LASF17:
 1345 0217 50574D5F 		.ascii	"PWM_Stop\000"
 1345      53746F70 
 1345      00
 1346              	.LASF4:
 1347 0220 6C6F6E67 		.ascii	"long int\000"
 1347      20696E74 
 1347      00
 1348              	.LASF39:
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccAhbxta.s 			page 42


 1349 0229 50574D5F 		.ascii	"PWM_ReadControlRegister\000"
 1349      52656164 
 1349      436F6E74 
 1349      726F6C52 
 1349      65676973 
 1350              	.LASF0:
 1351 0241 7369676E 		.ascii	"signed char\000"
 1351      65642063 
 1351      68617200 
 1352              	.LASF24:
 1353 024d 636F6D70 		.ascii	"compare\000"
 1353      61726500 
 1354              	.LASF16:
 1355 0255 50574D5F 		.ascii	"PWM_Enable\000"
 1355      456E6162 
 1355      6C6500
 1356              	.LASF38:
 1357 0260 433A5C55 		.ascii	"C:\\Users\\Jeppe\\Documents\\Engineer\\4_Semester\\"
 1357      73657273 
 1357      5C4A6570 
 1357      70655C44 
 1357      6F63756D 
 1358 028d 45345052 		.ascii	"E4PRJ4\\Implementering\\Vuggesystem\\vuggeControl\\"
 1358      4A345C49 
 1358      6D706C65 
 1358      6D656E74 
 1358      6572696E 
 1359 02bc 76756767 		.ascii	"vuggeControl.cydsn\000"
 1359      65436F6E 
 1359      74726F6C 
 1359      2E637964 
 1359      736E00
 1360              	.LASF28:
 1361 02cf 50574D5F 		.ascii	"PWM_ReadDeadTime\000"
 1361      52656164 
 1361      44656164 
 1361      54696D65 
 1361      00
 1362              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
