ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"PWM.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	PWM_initVar
  18              		.bss
  19              		.type	PWM_initVar, %object
  20              		.size	PWM_initVar, 1
  21              	PWM_initVar:
  22 0000 00       		.space	1
  23              		.section	.text.PWM_Start,"ax",%progbits
  24              		.align	2
  25              		.global	PWM_Start
  26              		.code	16
  27              		.thumb_func
  28              		.type	PWM_Start, %function
  29              	PWM_Start:
  30              	.LFB0:
  31              		.file 1 ".\\Generated_Source\\PSoC4\\PWM.c"
   1:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/PWM.c **** * File Name: PWM.c
   3:.\Generated_Source\PSoC4/PWM.c **** * Version 3.20
   4:.\Generated_Source\PSoC4/PWM.c **** *
   5:.\Generated_Source\PSoC4/PWM.c **** * Description:
   6:.\Generated_Source\PSoC4/PWM.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:.\Generated_Source\PSoC4/PWM.c **** *  comparitors. Each instance of this user module is capable of generating
   8:.\Generated_Source\PSoC4/PWM.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:.\Generated_Source\PSoC4/PWM.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:.\Generated_Source\PSoC4/PWM.c **** *  The compare value output may be configured to be active when the present
  11:.\Generated_Source\PSoC4/PWM.c **** *  counter is less than or less than/equal to the compare value.
  12:.\Generated_Source\PSoC4/PWM.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:.\Generated_Source\PSoC4/PWM.c **** *  width wide when the counter is equal to zero.
  14:.\Generated_Source\PSoC4/PWM.c **** *
  15:.\Generated_Source\PSoC4/PWM.c **** * Note:
  16:.\Generated_Source\PSoC4/PWM.c **** *
  17:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************
  18:.\Generated_Source\PSoC4/PWM.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:.\Generated_Source\PSoC4/PWM.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:.\Generated_Source\PSoC4/PWM.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:.\Generated_Source\PSoC4/PWM.c **** * the software package with which this file was provided.
  22:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************/
  23:.\Generated_Source\PSoC4/PWM.c **** 
  24:.\Generated_Source\PSoC4/PWM.c **** #include "PWM.h"
  25:.\Generated_Source\PSoC4/PWM.c **** 
  26:.\Generated_Source\PSoC4/PWM.c **** /* Error message for removed <resource> through optimization */
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 2


  27:.\Generated_Source\PSoC4/PWM.c **** #ifdef PWM_PWMUDB_genblk1_ctrlreg__REMOVED
  28:.\Generated_Source\PSoC4/PWM.c ****     #error PWM_v3_20 detected with a constant 0 for the enable or \
  29:.\Generated_Source\PSoC4/PWM.c ****          constant 1 for reset. This will prevent the component from operating.
  30:.\Generated_Source\PSoC4/PWM.c **** #endif /* PWM_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:.\Generated_Source\PSoC4/PWM.c **** 
  32:.\Generated_Source\PSoC4/PWM.c **** uint8 PWM_initVar = 0u;
  33:.\Generated_Source\PSoC4/PWM.c **** 
  34:.\Generated_Source\PSoC4/PWM.c **** 
  35:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
  36:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Start
  37:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
  38:.\Generated_Source\PSoC4/PWM.c **** *
  39:.\Generated_Source\PSoC4/PWM.c **** * Summary:
  40:.\Generated_Source\PSoC4/PWM.c **** *  The start function initializes the pwm with the default values, the
  41:.\Generated_Source\PSoC4/PWM.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:.\Generated_Source\PSoC4/PWM.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:.\Generated_Source\PSoC4/PWM.c **** *
  44:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
  45:.\Generated_Source\PSoC4/PWM.c **** *  None
  46:.\Generated_Source\PSoC4/PWM.c **** *
  47:.\Generated_Source\PSoC4/PWM.c **** * Return:
  48:.\Generated_Source\PSoC4/PWM.c **** *  None
  49:.\Generated_Source\PSoC4/PWM.c **** *
  50:.\Generated_Source\PSoC4/PWM.c **** * Global variables:
  51:.\Generated_Source\PSoC4/PWM.c **** *  PWM_initVar: Is modified when this function is called for the
  52:.\Generated_Source\PSoC4/PWM.c **** *   first time. Is used to ensure that initialization happens only once.
  53:.\Generated_Source\PSoC4/PWM.c **** *
  54:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
  55:.\Generated_Source\PSoC4/PWM.c **** void PWM_Start(void) 
  56:.\Generated_Source\PSoC4/PWM.c **** {
  32              		.loc 1 56 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 00AF     		add	r7, sp, #0
  39              		.cfi_def_cfa_register 7
  57:.\Generated_Source\PSoC4/PWM.c ****     /* If not Initialized then initialize all required hardware and software */
  58:.\Generated_Source\PSoC4/PWM.c ****     if(PWM_initVar == 0u)
  40              		.loc 1 58 0
  41 0004 064B     		ldr	r3, .L3
  42 0006 1B78     		ldrb	r3, [r3]
  43 0008 002B     		cmp	r3, #0
  44 000a 04D1     		bne	.L2
  59:.\Generated_Source\PSoC4/PWM.c ****     {
  60:.\Generated_Source\PSoC4/PWM.c ****         PWM_Init();
  45              		.loc 1 60 0
  46 000c FFF7FEFF 		bl	PWM_Init
  61:.\Generated_Source\PSoC4/PWM.c ****         PWM_initVar = 1u;
  47              		.loc 1 61 0
  48 0010 034B     		ldr	r3, .L3
  49 0012 0122     		mov	r2, #1
  50 0014 1A70     		strb	r2, [r3]
  51              	.L2:
  62:.\Generated_Source\PSoC4/PWM.c ****     }
  63:.\Generated_Source\PSoC4/PWM.c ****     PWM_Enable();
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 3


  52              		.loc 1 63 0
  53 0016 FFF7FEFF 		bl	PWM_Enable
  64:.\Generated_Source\PSoC4/PWM.c **** 
  65:.\Generated_Source\PSoC4/PWM.c **** }
  54              		.loc 1 65 0
  55 001a BD46     		mov	sp, r7
  56              		@ sp needed
  57 001c 80BD     		pop	{r7, pc}
  58              	.L4:
  59 001e C046     		.align	2
  60              	.L3:
  61 0020 00000000 		.word	PWM_initVar
  62              		.cfi_endproc
  63              	.LFE0:
  64              		.size	PWM_Start, .-PWM_Start
  65              		.section	.text.PWM_Init,"ax",%progbits
  66              		.align	2
  67              		.global	PWM_Init
  68              		.code	16
  69              		.thumb_func
  70              		.type	PWM_Init, %function
  71              	PWM_Init:
  72              	.LFB1:
  66:.\Generated_Source\PSoC4/PWM.c **** 
  67:.\Generated_Source\PSoC4/PWM.c **** 
  68:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
  69:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Init
  70:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
  71:.\Generated_Source\PSoC4/PWM.c **** *
  72:.\Generated_Source\PSoC4/PWM.c **** * Summary:
  73:.\Generated_Source\PSoC4/PWM.c **** *  Initialize component's parameters to the parameters set by user in the
  74:.\Generated_Source\PSoC4/PWM.c **** *  customizer of the component placed onto schematic. Usually called in
  75:.\Generated_Source\PSoC4/PWM.c **** *  PWM_Start().
  76:.\Generated_Source\PSoC4/PWM.c **** *
  77:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
  78:.\Generated_Source\PSoC4/PWM.c **** *  None
  79:.\Generated_Source\PSoC4/PWM.c **** *
  80:.\Generated_Source\PSoC4/PWM.c **** * Return:
  81:.\Generated_Source\PSoC4/PWM.c **** *  None
  82:.\Generated_Source\PSoC4/PWM.c **** *
  83:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
  84:.\Generated_Source\PSoC4/PWM.c **** void PWM_Init(void) 
  85:.\Generated_Source\PSoC4/PWM.c **** {
  73              		.loc 1 85 0
  74              		.cfi_startproc
  75 0000 90B5     		push	{r4, r7, lr}
  76              		.cfi_def_cfa_offset 12
  77              		.cfi_offset 4, -12
  78              		.cfi_offset 7, -8
  79              		.cfi_offset 14, -4
  80 0002 83B0     		sub	sp, sp, #12
  81              		.cfi_def_cfa_offset 24
  82 0004 00AF     		add	r7, sp, #0
  83              		.cfi_def_cfa_register 7
  86:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UsingFixedFunction || PWM_UseControl)
  87:.\Generated_Source\PSoC4/PWM.c ****         uint8 ctrl;
  88:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UsingFixedFunction || PWM_UseControl) */
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 4


  89:.\Generated_Source\PSoC4/PWM.c **** 
  90:.\Generated_Source\PSoC4/PWM.c ****     #if(!PWM_UsingFixedFunction)
  91:.\Generated_Source\PSoC4/PWM.c ****         #if(PWM_UseStatus)
  92:.\Generated_Source\PSoC4/PWM.c ****             /* Interrupt State Backup for Critical Region*/
  93:.\Generated_Source\PSoC4/PWM.c ****             uint8 PWM_interruptState;
  94:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UseStatus) */
  95:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (!PWM_UsingFixedFunction) */
  96:.\Generated_Source\PSoC4/PWM.c **** 
  97:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UsingFixedFunction)
  98:.\Generated_Source\PSoC4/PWM.c ****         /* You are allowed to write the compare value (FF only) */
  99:.\Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL |= PWM_CFG0_MODE;
 100:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM_DeadBand2_4)
 101:.\Generated_Source\PSoC4/PWM.c ****             PWM_CONTROL |= PWM_CFG0_DB;
 102:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_DeadBand2_4) */
 103:.\Generated_Source\PSoC4/PWM.c **** 
 104:.\Generated_Source\PSoC4/PWM.c ****         ctrl = PWM_CONTROL3 & ((uint8 )(~PWM_CTRL_CMPMODE1_MASK));
 105:.\Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL3 = ctrl | PWM_DEFAULT_COMPARE1_MODE;
 106:.\Generated_Source\PSoC4/PWM.c **** 
 107:.\Generated_Source\PSoC4/PWM.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:.\Generated_Source\PSoC4/PWM.c ****         PWM_RT1 &= ((uint8)(~PWM_RT1_MASK));
 109:.\Generated_Source\PSoC4/PWM.c ****         PWM_RT1 |= PWM_SYNC;
 110:.\Generated_Source\PSoC4/PWM.c **** 
 111:.\Generated_Source\PSoC4/PWM.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:.\Generated_Source\PSoC4/PWM.c ****         PWM_RT1 &= ((uint8)(~PWM_SYNCDSI_MASK));
 113:.\Generated_Source\PSoC4/PWM.c ****         PWM_RT1 |= PWM_SYNCDSI_EN;
 114:.\Generated_Source\PSoC4/PWM.c **** 
 115:.\Generated_Source\PSoC4/PWM.c ****     #elif (PWM_UseControl)
 116:.\Generated_Source\PSoC4/PWM.c ****         /* Set the default compare mode defined in the parameter */
 117:.\Generated_Source\PSoC4/PWM.c ****         ctrl = PWM_CONTROL & ((uint8)(~PWM_CTRL_CMPMODE2_MASK)) &
  84              		.loc 1 117 0
  85 0006 1E4B     		ldr	r3, .L6
  86 0008 1B78     		ldrb	r3, [r3]
  87 000a DAB2     		uxtb	r2, r3
  88 000c FB1D     		add	r3, r7, #7
  89 000e 3F21     		mov	r1, #63
  90 0010 8A43     		bic	r2, r1
  91 0012 1A70     		strb	r2, [r3]
 118:.\Generated_Source\PSoC4/PWM.c ****                 ((uint8)(~PWM_CTRL_CMPMODE1_MASK));
 119:.\Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL = ctrl | PWM_DEFAULT_COMPARE2_MODE |
  92              		.loc 1 119 0
  93 0014 1A4B     		ldr	r3, .L6
  94 0016 FA1D     		add	r2, r7, #7
  95 0018 1278     		ldrb	r2, [r2]
  96 001a 0921     		mov	r1, #9
  97 001c 0A43     		orr	r2, r1
  98 001e D2B2     		uxtb	r2, r2
  99 0020 1A70     		strb	r2, [r3]
 120:.\Generated_Source\PSoC4/PWM.c ****                                    PWM_DEFAULT_COMPARE1_MODE;
 121:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 122:.\Generated_Source\PSoC4/PWM.c **** 
 123:.\Generated_Source\PSoC4/PWM.c ****     #if (!PWM_UsingFixedFunction)
 124:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM_Resolution == 8)
 125:.\Generated_Source\PSoC4/PWM.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:.\Generated_Source\PSoC4/PWM.c ****             PWM_AUX_CONTROLDP0 |= (PWM_AUX_CTRL_FIFO0_CLR);
 100              		.loc 1 126 0
 101 0022 184B     		ldr	r3, .L6+4
 102 0024 174A     		ldr	r2, .L6+4
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 5


 103 0026 1278     		ldrb	r2, [r2]
 104 0028 D2B2     		uxtb	r2, r2
 105 002a 0121     		mov	r1, #1
 106 002c 0A43     		orr	r2, r1
 107 002e D2B2     		uxtb	r2, r2
 108 0030 1A70     		strb	r2, [r3]
 127:.\Generated_Source\PSoC4/PWM.c ****         #else /* (PWM_Resolution == 16)*/
 128:.\Generated_Source\PSoC4/PWM.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:.\Generated_Source\PSoC4/PWM.c ****             PWM_AUX_CONTROLDP0 |= (PWM_AUX_CTRL_FIFO0_CLR);
 130:.\Generated_Source\PSoC4/PWM.c ****             PWM_AUX_CONTROLDP1 |= (PWM_AUX_CTRL_FIFO0_CLR);
 131:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_Resolution == 8) */
 132:.\Generated_Source\PSoC4/PWM.c **** 
 133:.\Generated_Source\PSoC4/PWM.c ****         PWM_WriteCounter(PWM_INIT_PERIOD_VALUE);
 109              		.loc 1 133 0
 110 0032 C720     		mov	r0, #199
 111 0034 FFF7FEFF 		bl	PWM_WriteCounter
 134:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (!PWM_UsingFixedFunction) */
 135:.\Generated_Source\PSoC4/PWM.c **** 
 136:.\Generated_Source\PSoC4/PWM.c ****     PWM_WritePeriod(PWM_INIT_PERIOD_VALUE);
 112              		.loc 1 136 0
 113 0038 C720     		mov	r0, #199
 114 003a FFF7FEFF 		bl	PWM_WritePeriod
 137:.\Generated_Source\PSoC4/PWM.c **** 
 138:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM_UseOneCompareMode)
 139:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteCompare(PWM_INIT_COMPARE_VALUE1);
 115              		.loc 1 139 0
 116 003e 4120     		mov	r0, #65
 117 0040 FFF7FEFF 		bl	PWM_WriteCompare
 140:.\Generated_Source\PSoC4/PWM.c ****         #else
 141:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteCompare1(PWM_INIT_COMPARE_VALUE1);
 142:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteCompare2(PWM_INIT_COMPARE_VALUE2);
 143:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UseOneCompareMode) */
 144:.\Generated_Source\PSoC4/PWM.c **** 
 145:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM_KillModeMinTime)
 146:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteKillTime(PWM_MinimumKillTime);
 147:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_KillModeMinTime) */
 148:.\Generated_Source\PSoC4/PWM.c **** 
 149:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM_DeadBandUsed)
 150:.\Generated_Source\PSoC4/PWM.c ****             PWM_WriteDeadTime(PWM_INIT_DEAD_TIME);
 118              		.loc 1 150 0
 119 0044 0320     		mov	r0, #3
 120 0046 FFF7FEFF 		bl	PWM_WriteDeadTime
 151:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_DeadBandUsed) */
 152:.\Generated_Source\PSoC4/PWM.c **** 
 153:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UseStatus || PWM_UsingFixedFunction)
 154:.\Generated_Source\PSoC4/PWM.c ****         PWM_SetInterruptMode(PWM_INIT_INTERRUPTS_MODE);
 121              		.loc 1 154 0
 122 004a 0020     		mov	r0, #0
 123 004c FFF7FEFF 		bl	PWM_SetInterruptMode
 155:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UseStatus || PWM_UsingFixedFunction) */
 156:.\Generated_Source\PSoC4/PWM.c **** 
 157:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UsingFixedFunction)
 158:.\Generated_Source\PSoC4/PWM.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:.\Generated_Source\PSoC4/PWM.c ****         PWM_GLOBAL_ENABLE |= PWM_BLOCK_EN_MASK;
 160:.\Generated_Source\PSoC4/PWM.c ****         /* Set the Interrupt source to come from the status register */
 161:.\Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL2 |= PWM_CTRL2_IRQ_SEL;
 162:.\Generated_Source\PSoC4/PWM.c ****     #else
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 6


 163:.\Generated_Source\PSoC4/PWM.c ****         #if(PWM_UseStatus)
 164:.\Generated_Source\PSoC4/PWM.c **** 
 165:.\Generated_Source\PSoC4/PWM.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:.\Generated_Source\PSoC4/PWM.c ****             /* Enter Critical Region*/
 167:.\Generated_Source\PSoC4/PWM.c ****             PWM_interruptState = CyEnterCriticalSection();
 124              		.loc 1 167 0
 125 0050 BC1D     		add	r4, r7, #6
 126 0052 FFF7FEFF 		bl	CyEnterCriticalSection
 127 0056 031C     		mov	r3, r0
 128 0058 2370     		strb	r3, [r4]
 168:.\Generated_Source\PSoC4/PWM.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:.\Generated_Source\PSoC4/PWM.c ****             PWM_STATUS_AUX_CTRL |= PWM_STATUS_ACTL_INT_EN_MASK;
 129              		.loc 1 169 0
 130 005a 0A4B     		ldr	r3, .L6+4
 131 005c 094A     		ldr	r2, .L6+4
 132 005e 1278     		ldrb	r2, [r2]
 133 0060 D2B2     		uxtb	r2, r2
 134 0062 1021     		mov	r1, #16
 135 0064 0A43     		orr	r2, r1
 136 0066 D2B2     		uxtb	r2, r2
 137 0068 1A70     		strb	r2, [r3]
 170:.\Generated_Source\PSoC4/PWM.c **** 
 171:.\Generated_Source\PSoC4/PWM.c ****              /* Exit Critical Region*/
 172:.\Generated_Source\PSoC4/PWM.c ****             CyExitCriticalSection(PWM_interruptState);
 138              		.loc 1 172 0
 139 006a BB1D     		add	r3, r7, #6
 140 006c 1B78     		ldrb	r3, [r3]
 141 006e 181C     		mov	r0, r3
 142 0070 FFF7FEFF 		bl	CyExitCriticalSection
 173:.\Generated_Source\PSoC4/PWM.c **** 
 174:.\Generated_Source\PSoC4/PWM.c ****             /* Clear the FIFO to enable the PWM_STATUS_FIFOFULL
 175:.\Generated_Source\PSoC4/PWM.c ****                    bit to be set on FIFO full. */
 176:.\Generated_Source\PSoC4/PWM.c ****             PWM_ClearFIFO();
 143              		.loc 1 176 0
 144 0074 FFF7FEFF 		bl	PWM_ClearFIFO
 177:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UseStatus) */
 178:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 179:.\Generated_Source\PSoC4/PWM.c **** }
 145              		.loc 1 179 0
 146 0078 BD46     		mov	sp, r7
 147 007a 03B0     		add	sp, sp, #12
 148              		@ sp needed
 149 007c 90BD     		pop	{r4, r7, pc}
 150              	.L7:
 151 007e C046     		.align	2
 152              	.L6:
 153 0080 72000F40 		.word	1074724978
 154 0084 93000F40 		.word	1074725011
 155              		.cfi_endproc
 156              	.LFE1:
 157              		.size	PWM_Init, .-PWM_Init
 158              		.section	.text.PWM_Enable,"ax",%progbits
 159              		.align	2
 160              		.global	PWM_Enable
 161              		.code	16
 162              		.thumb_func
 163              		.type	PWM_Enable, %function
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 7


 164              	PWM_Enable:
 165              	.LFB2:
 180:.\Generated_Source\PSoC4/PWM.c **** 
 181:.\Generated_Source\PSoC4/PWM.c **** 
 182:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 183:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Enable
 184:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 185:.\Generated_Source\PSoC4/PWM.c **** *
 186:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 187:.\Generated_Source\PSoC4/PWM.c **** *  Enables the PWM block operation
 188:.\Generated_Source\PSoC4/PWM.c **** *
 189:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 190:.\Generated_Source\PSoC4/PWM.c **** *  None
 191:.\Generated_Source\PSoC4/PWM.c **** *
 192:.\Generated_Source\PSoC4/PWM.c **** * Return:
 193:.\Generated_Source\PSoC4/PWM.c **** *  None
 194:.\Generated_Source\PSoC4/PWM.c **** *
 195:.\Generated_Source\PSoC4/PWM.c **** * Side Effects:
 196:.\Generated_Source\PSoC4/PWM.c **** *  This works only if software enable mode is chosen
 197:.\Generated_Source\PSoC4/PWM.c **** *
 198:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 199:.\Generated_Source\PSoC4/PWM.c **** void PWM_Enable(void) 
 200:.\Generated_Source\PSoC4/PWM.c **** {
 166              		.loc 1 200 0
 167              		.cfi_startproc
 168 0000 80B5     		push	{r7, lr}
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 7, -8
 171              		.cfi_offset 14, -4
 172 0002 00AF     		add	r7, sp, #0
 173              		.cfi_def_cfa_register 7
 201:.\Generated_Source\PSoC4/PWM.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UsingFixedFunction)
 203:.\Generated_Source\PSoC4/PWM.c ****         PWM_GLOBAL_ENABLE |= PWM_BLOCK_EN_MASK;
 204:.\Generated_Source\PSoC4/PWM.c ****         PWM_GLOBAL_STBY_ENABLE |= PWM_BLOCK_STBY_EN_MASK;
 205:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 206:.\Generated_Source\PSoC4/PWM.c **** 
 207:.\Generated_Source\PSoC4/PWM.c ****     /* Enable the PWM from the control register  */
 208:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UseControl || PWM_UsingFixedFunction)
 209:.\Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL |= PWM_CTRL_ENABLE;
 174              		.loc 1 209 0
 175 0004 054B     		ldr	r3, .L9
 176 0006 054A     		ldr	r2, .L9
 177 0008 1278     		ldrb	r2, [r2]
 178 000a D2B2     		uxtb	r2, r2
 179 000c 8021     		mov	r1, #128
 180 000e 4942     		neg	r1, r1
 181 0010 0A43     		orr	r2, r1
 182 0012 D2B2     		uxtb	r2, r2
 183 0014 1A70     		strb	r2, [r3]
 210:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UseControl || PWM_UsingFixedFunction) */
 211:.\Generated_Source\PSoC4/PWM.c **** }
 184              		.loc 1 211 0
 185 0016 BD46     		mov	sp, r7
 186              		@ sp needed
 187 0018 80BD     		pop	{r7, pc}
 188              	.L10:
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 8


 189 001a C046     		.align	2
 190              	.L9:
 191 001c 72000F40 		.word	1074724978
 192              		.cfi_endproc
 193              	.LFE2:
 194              		.size	PWM_Enable, .-PWM_Enable
 195              		.section	.text.PWM_Stop,"ax",%progbits
 196              		.align	2
 197              		.global	PWM_Stop
 198              		.code	16
 199              		.thumb_func
 200              		.type	PWM_Stop, %function
 201              	PWM_Stop:
 202              	.LFB3:
 212:.\Generated_Source\PSoC4/PWM.c **** 
 213:.\Generated_Source\PSoC4/PWM.c **** 
 214:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 215:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_Stop
 216:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 217:.\Generated_Source\PSoC4/PWM.c **** *
 218:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 219:.\Generated_Source\PSoC4/PWM.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:.\Generated_Source\PSoC4/PWM.c **** *  interrupts.
 221:.\Generated_Source\PSoC4/PWM.c **** *
 222:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 223:.\Generated_Source\PSoC4/PWM.c **** *  None
 224:.\Generated_Source\PSoC4/PWM.c **** *
 225:.\Generated_Source\PSoC4/PWM.c **** * Return:
 226:.\Generated_Source\PSoC4/PWM.c **** *  None
 227:.\Generated_Source\PSoC4/PWM.c **** *
 228:.\Generated_Source\PSoC4/PWM.c **** * Side Effects:
 229:.\Generated_Source\PSoC4/PWM.c **** *  If the Enable mode is set to Hardware only then this function
 230:.\Generated_Source\PSoC4/PWM.c **** *  has no effect on the operation of the PWM
 231:.\Generated_Source\PSoC4/PWM.c **** *
 232:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 233:.\Generated_Source\PSoC4/PWM.c **** void PWM_Stop(void) 
 234:.\Generated_Source\PSoC4/PWM.c **** {
 203              		.loc 1 234 0
 204              		.cfi_startproc
 205 0000 80B5     		push	{r7, lr}
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 7, -8
 208              		.cfi_offset 14, -4
 209 0002 00AF     		add	r7, sp, #0
 210              		.cfi_def_cfa_register 7
 235:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UseControl || PWM_UsingFixedFunction)
 236:.\Generated_Source\PSoC4/PWM.c ****         PWM_CONTROL &= ((uint8)(~PWM_CTRL_ENABLE));
 211              		.loc 1 236 0
 212 0004 044B     		ldr	r3, .L12
 213 0006 044A     		ldr	r2, .L12
 214 0008 1278     		ldrb	r2, [r2]
 215 000a D1B2     		uxtb	r1, r2
 216 000c 7F22     		mov	r2, #127
 217 000e 0A40     		and	r2, r1
 218 0010 D2B2     		uxtb	r2, r2
 219 0012 1A70     		strb	r2, [r3]
 237:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UseControl || PWM_UsingFixedFunction) */
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 9


 238:.\Generated_Source\PSoC4/PWM.c **** 
 239:.\Generated_Source\PSoC4/PWM.c ****     /* Globally disable the Fixed Function Block chosen */
 240:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UsingFixedFunction)
 241:.\Generated_Source\PSoC4/PWM.c ****         PWM_GLOBAL_ENABLE &= ((uint8)(~PWM_BLOCK_EN_MASK));
 242:.\Generated_Source\PSoC4/PWM.c ****         PWM_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_BLOCK_STBY_EN_MASK));
 243:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 244:.\Generated_Source\PSoC4/PWM.c **** }
 220              		.loc 1 244 0
 221 0014 BD46     		mov	sp, r7
 222              		@ sp needed
 223 0016 80BD     		pop	{r7, pc}
 224              	.L13:
 225              		.align	2
 226              	.L12:
 227 0018 72000F40 		.word	1074724978
 228              		.cfi_endproc
 229              	.LFE3:
 230              		.size	PWM_Stop, .-PWM_Stop
 231              		.section	.text.PWM_WriteCounter,"ax",%progbits
 232              		.align	2
 233              		.global	PWM_WriteCounter
 234              		.code	16
 235              		.thumb_func
 236              		.type	PWM_WriteCounter, %function
 237              	PWM_WriteCounter:
 238              	.LFB4:
 245:.\Generated_Source\PSoC4/PWM.c **** 
 246:.\Generated_Source\PSoC4/PWM.c **** #if (PWM_UseOneCompareMode)
 247:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_CompareMode1SW)
 248:.\Generated_Source\PSoC4/PWM.c **** 
 249:.\Generated_Source\PSoC4/PWM.c **** 
 250:.\Generated_Source\PSoC4/PWM.c ****         /*******************************************************************************
 251:.\Generated_Source\PSoC4/PWM.c ****         * Function Name: PWM_SetCompareMode
 252:.\Generated_Source\PSoC4/PWM.c ****         ********************************************************************************
 253:.\Generated_Source\PSoC4/PWM.c ****         *
 254:.\Generated_Source\PSoC4/PWM.c ****         * Summary:
 255:.\Generated_Source\PSoC4/PWM.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:.\Generated_Source\PSoC4/PWM.c ****         *  Center Align Mode or One Output Mode.
 257:.\Generated_Source\PSoC4/PWM.c ****         *
 258:.\Generated_Source\PSoC4/PWM.c ****         * Parameters:
 259:.\Generated_Source\PSoC4/PWM.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:.\Generated_Source\PSoC4/PWM.c ****         *                defined in the H file as input arguments.
 261:.\Generated_Source\PSoC4/PWM.c ****         *
 262:.\Generated_Source\PSoC4/PWM.c ****         * Return:
 263:.\Generated_Source\PSoC4/PWM.c ****         *  None
 264:.\Generated_Source\PSoC4/PWM.c ****         *
 265:.\Generated_Source\PSoC4/PWM.c ****         *******************************************************************************/
 266:.\Generated_Source\PSoC4/PWM.c ****         void PWM_SetCompareMode(uint8 comparemode) 
 267:.\Generated_Source\PSoC4/PWM.c ****         {
 268:.\Generated_Source\PSoC4/PWM.c ****             #if(PWM_UsingFixedFunction)
 269:.\Generated_Source\PSoC4/PWM.c **** 
 270:.\Generated_Source\PSoC4/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 271:.\Generated_Source\PSoC4/PWM.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHIF
 272:.\Generated_Source\PSoC4/PWM.c ****                 #else
 273:.\Generated_Source\PSoC4/PWM.c ****                     uint8 comparemodemasked = comparemode;
 274:.\Generated_Source\PSoC4/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 275:.\Generated_Source\PSoC4/PWM.c **** 
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 10


 276:.\Generated_Source\PSoC4/PWM.c ****                 PWM_CONTROL3 &= ((uint8)(~PWM_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:.\Generated_Source\PSoC4/PWM.c ****                 PWM_CONTROL3 |= comparemodemasked;
 278:.\Generated_Source\PSoC4/PWM.c **** 
 279:.\Generated_Source\PSoC4/PWM.c ****             #elif (PWM_UseControl)
 280:.\Generated_Source\PSoC4/PWM.c **** 
 281:.\Generated_Source\PSoC4/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 282:.\Generated_Source\PSoC4/PWM.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHI
 283:.\Generated_Source\PSoC4/PWM.c ****                                                 PWM_CTRL_CMPMODE1_MASK;
 284:.\Generated_Source\PSoC4/PWM.c ****                 #else
 285:.\Generated_Source\PSoC4/PWM.c ****                     uint8 comparemode1masked = comparemode & PWM_CTRL_CMPMODE1_MASK;
 286:.\Generated_Source\PSoC4/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 287:.\Generated_Source\PSoC4/PWM.c **** 
 288:.\Generated_Source\PSoC4/PWM.c ****                 #if(0 != PWM_CTRL_CMPMODE2_SHIFT)
 289:.\Generated_Source\PSoC4/PWM.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE2_SHI
 290:.\Generated_Source\PSoC4/PWM.c ****                                                PWM_CTRL_CMPMODE2_MASK;
 291:.\Generated_Source\PSoC4/PWM.c ****                 #else
 292:.\Generated_Source\PSoC4/PWM.c ****                     uint8 comparemode2masked = comparemode & PWM_CTRL_CMPMODE2_MASK;
 293:.\Generated_Source\PSoC4/PWM.c ****                 #endif /* (0 != PWM_CTRL_CMPMODE2_SHIFT) */
 294:.\Generated_Source\PSoC4/PWM.c **** 
 295:.\Generated_Source\PSoC4/PWM.c ****                 /*Clear existing mode */
 296:.\Generated_Source\PSoC4/PWM.c ****                 PWM_CONTROL &= ((uint8)(~(PWM_CTRL_CMPMODE1_MASK |
 297:.\Generated_Source\PSoC4/PWM.c ****                                             PWM_CTRL_CMPMODE2_MASK)));
 298:.\Generated_Source\PSoC4/PWM.c ****                 PWM_CONTROL |= (comparemode1masked | comparemode2masked);
 299:.\Generated_Source\PSoC4/PWM.c **** 
 300:.\Generated_Source\PSoC4/PWM.c ****             #else
 301:.\Generated_Source\PSoC4/PWM.c ****                 uint8 temp = comparemode;
 302:.\Generated_Source\PSoC4/PWM.c ****             #endif /* (PWM_UsingFixedFunction) */
 303:.\Generated_Source\PSoC4/PWM.c ****         }
 304:.\Generated_Source\PSoC4/PWM.c ****     #endif /* PWM_CompareMode1SW */
 305:.\Generated_Source\PSoC4/PWM.c **** 
 306:.\Generated_Source\PSoC4/PWM.c **** #else /* UseOneCompareMode */
 307:.\Generated_Source\PSoC4/PWM.c **** 
 308:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_CompareMode1SW)
 309:.\Generated_Source\PSoC4/PWM.c **** 
 310:.\Generated_Source\PSoC4/PWM.c **** 
 311:.\Generated_Source\PSoC4/PWM.c ****         /*******************************************************************************
 312:.\Generated_Source\PSoC4/PWM.c ****         * Function Name: PWM_SetCompareMode1
 313:.\Generated_Source\PSoC4/PWM.c ****         ********************************************************************************
 314:.\Generated_Source\PSoC4/PWM.c ****         *
 315:.\Generated_Source\PSoC4/PWM.c ****         * Summary:
 316:.\Generated_Source\PSoC4/PWM.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:.\Generated_Source\PSoC4/PWM.c ****         *
 318:.\Generated_Source\PSoC4/PWM.c ****         * Parameters:
 319:.\Generated_Source\PSoC4/PWM.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:.\Generated_Source\PSoC4/PWM.c ****         *                defined in the H file as input arguments.
 321:.\Generated_Source\PSoC4/PWM.c ****         *
 322:.\Generated_Source\PSoC4/PWM.c ****         * Return:
 323:.\Generated_Source\PSoC4/PWM.c ****         *  None
 324:.\Generated_Source\PSoC4/PWM.c ****         *
 325:.\Generated_Source\PSoC4/PWM.c ****         *******************************************************************************/
 326:.\Generated_Source\PSoC4/PWM.c ****         void PWM_SetCompareMode1(uint8 comparemode) 
 327:.\Generated_Source\PSoC4/PWM.c ****         {
 328:.\Generated_Source\PSoC4/PWM.c ****             #if(0 != PWM_CTRL_CMPMODE1_SHIFT)
 329:.\Generated_Source\PSoC4/PWM.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE1_SHIFT)) 
 330:.\Generated_Source\PSoC4/PWM.c ****                                            PWM_CTRL_CMPMODE1_MASK;
 331:.\Generated_Source\PSoC4/PWM.c ****             #else
 332:.\Generated_Source\PSoC4/PWM.c ****                 uint8 comparemodemasked = comparemode & PWM_CTRL_CMPMODE1_MASK;
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 11


 333:.\Generated_Source\PSoC4/PWM.c ****             #endif /* (0 != PWM_CTRL_CMPMODE1_SHIFT) */
 334:.\Generated_Source\PSoC4/PWM.c **** 
 335:.\Generated_Source\PSoC4/PWM.c ****             #if (PWM_UseControl)
 336:.\Generated_Source\PSoC4/PWM.c ****                 PWM_CONTROL &= ((uint8)(~PWM_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:.\Generated_Source\PSoC4/PWM.c ****                 PWM_CONTROL |= comparemodemasked;
 338:.\Generated_Source\PSoC4/PWM.c ****             #endif /* (PWM_UseControl) */
 339:.\Generated_Source\PSoC4/PWM.c ****         }
 340:.\Generated_Source\PSoC4/PWM.c ****     #endif /* PWM_CompareMode1SW */
 341:.\Generated_Source\PSoC4/PWM.c **** 
 342:.\Generated_Source\PSoC4/PWM.c **** #if (PWM_CompareMode2SW)
 343:.\Generated_Source\PSoC4/PWM.c **** 
 344:.\Generated_Source\PSoC4/PWM.c **** 
 345:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 346:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_SetCompareMode2
 347:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 348:.\Generated_Source\PSoC4/PWM.c ****     *
 349:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 350:.\Generated_Source\PSoC4/PWM.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:.\Generated_Source\PSoC4/PWM.c ****     *
 352:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 353:.\Generated_Source\PSoC4/PWM.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:.\Generated_Source\PSoC4/PWM.c ****     *                defined in the H file as input arguments.
 355:.\Generated_Source\PSoC4/PWM.c ****     *
 356:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 357:.\Generated_Source\PSoC4/PWM.c ****     *  None
 358:.\Generated_Source\PSoC4/PWM.c ****     *
 359:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 360:.\Generated_Source\PSoC4/PWM.c ****     void PWM_SetCompareMode2(uint8 comparemode) 
 361:.\Generated_Source\PSoC4/PWM.c ****     {
 362:.\Generated_Source\PSoC4/PWM.c **** 
 363:.\Generated_Source\PSoC4/PWM.c ****         #if(0 != PWM_CTRL_CMPMODE2_SHIFT)
 364:.\Generated_Source\PSoC4/PWM.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_CTRL_CMPMODE2_SHIFT)) &
 365:.\Generated_Source\PSoC4/PWM.c ****                                                  PWM_CTRL_CMPMODE2_MASK;
 366:.\Generated_Source\PSoC4/PWM.c ****         #else
 367:.\Generated_Source\PSoC4/PWM.c ****             uint8 comparemodemasked = comparemode & PWM_CTRL_CMPMODE2_MASK;
 368:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (0 != PWM_CTRL_CMPMODE2_SHIFT) */
 369:.\Generated_Source\PSoC4/PWM.c **** 
 370:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM_UseControl)
 371:.\Generated_Source\PSoC4/PWM.c ****             PWM_CONTROL &= ((uint8)(~PWM_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:.\Generated_Source\PSoC4/PWM.c ****             PWM_CONTROL |= comparemodemasked;
 373:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UseControl) */
 374:.\Generated_Source\PSoC4/PWM.c ****     }
 375:.\Generated_Source\PSoC4/PWM.c ****     #endif /*PWM_CompareMode2SW */
 376:.\Generated_Source\PSoC4/PWM.c **** 
 377:.\Generated_Source\PSoC4/PWM.c **** #endif /* UseOneCompareMode */
 378:.\Generated_Source\PSoC4/PWM.c **** 
 379:.\Generated_Source\PSoC4/PWM.c **** 
 380:.\Generated_Source\PSoC4/PWM.c **** #if (!PWM_UsingFixedFunction)
 381:.\Generated_Source\PSoC4/PWM.c **** 
 382:.\Generated_Source\PSoC4/PWM.c **** 
 383:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 384:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_WriteCounter
 385:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 386:.\Generated_Source\PSoC4/PWM.c ****     *
 387:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 388:.\Generated_Source\PSoC4/PWM.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:.\Generated_Source\PSoC4/PWM.c ****     *  implemented for that currently running period and only that period. This API
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 12


 390:.\Generated_Source\PSoC4/PWM.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:.\Generated_Source\PSoC4/PWM.c ****     *  PWM implementation.
 392:.\Generated_Source\PSoC4/PWM.c ****     *
 393:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 394:.\Generated_Source\PSoC4/PWM.c ****     *  counter:  The period new period counter value.
 395:.\Generated_Source\PSoC4/PWM.c ****     *
 396:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 397:.\Generated_Source\PSoC4/PWM.c ****     *  None
 398:.\Generated_Source\PSoC4/PWM.c ****     *
 399:.\Generated_Source\PSoC4/PWM.c ****     * Side Effects:
 400:.\Generated_Source\PSoC4/PWM.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:.\Generated_Source\PSoC4/PWM.c ****     *
 402:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 403:.\Generated_Source\PSoC4/PWM.c ****     void PWM_WriteCounter(uint8 counter) \
 404:.\Generated_Source\PSoC4/PWM.c ****                                        
 405:.\Generated_Source\PSoC4/PWM.c ****     {
 239              		.loc 1 405 0
 240              		.cfi_startproc
 241 0000 80B5     		push	{r7, lr}
 242              		.cfi_def_cfa_offset 8
 243              		.cfi_offset 7, -8
 244              		.cfi_offset 14, -4
 245 0002 82B0     		sub	sp, sp, #8
 246              		.cfi_def_cfa_offset 16
 247 0004 00AF     		add	r7, sp, #0
 248              		.cfi_def_cfa_register 7
 249 0006 021C     		mov	r2, r0
 250 0008 FB1D     		add	r3, r7, #7
 251 000a 1A70     		strb	r2, [r3]
 406:.\Generated_Source\PSoC4/PWM.c ****         CY_SET_REG8(PWM_COUNTER_LSB_PTR, counter);
 252              		.loc 1 406 0
 253 000c 034B     		ldr	r3, .L15
 254 000e FA1D     		add	r2, r7, #7
 255 0010 1278     		ldrb	r2, [r2]
 256 0012 1A70     		strb	r2, [r3]
 407:.\Generated_Source\PSoC4/PWM.c ****     }
 257              		.loc 1 407 0
 258 0014 BD46     		mov	sp, r7
 259 0016 02B0     		add	sp, sp, #8
 260              		@ sp needed
 261 0018 80BD     		pop	{r7, pc}
 262              	.L16:
 263 001a C046     		.align	2
 264              	.L15:
 265 001c 03000F40 		.word	1074724867
 266              		.cfi_endproc
 267              	.LFE4:
 268              		.size	PWM_WriteCounter, .-PWM_WriteCounter
 269              		.section	.text.PWM_ReadCounter,"ax",%progbits
 270              		.align	2
 271              		.global	PWM_ReadCounter
 272              		.code	16
 273              		.thumb_func
 274              		.type	PWM_ReadCounter, %function
 275              	PWM_ReadCounter:
 276              	.LFB5:
 408:.\Generated_Source\PSoC4/PWM.c **** 
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 13


 409:.\Generated_Source\PSoC4/PWM.c **** 
 410:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 411:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadCounter
 412:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 413:.\Generated_Source\PSoC4/PWM.c ****     *
 414:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 415:.\Generated_Source\PSoC4/PWM.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:.\Generated_Source\PSoC4/PWM.c ****     *  if the counter is enabled or running.
 417:.\Generated_Source\PSoC4/PWM.c ****     *
 418:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 419:.\Generated_Source\PSoC4/PWM.c ****     *  None
 420:.\Generated_Source\PSoC4/PWM.c ****     *
 421:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 422:.\Generated_Source\PSoC4/PWM.c ****     *  The current value of the counter.
 423:.\Generated_Source\PSoC4/PWM.c ****     *
 424:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 425:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadCounter(void) 
 426:.\Generated_Source\PSoC4/PWM.c ****     {
 277              		.loc 1 426 0
 278              		.cfi_startproc
 279 0000 80B5     		push	{r7, lr}
 280              		.cfi_def_cfa_offset 8
 281              		.cfi_offset 7, -8
 282              		.cfi_offset 14, -4
 283 0002 00AF     		add	r7, sp, #0
 284              		.cfi_def_cfa_register 7
 427:.\Generated_Source\PSoC4/PWM.c ****         /* Force capture by reading Accumulator */
 428:.\Generated_Source\PSoC4/PWM.c ****         /* Must first do a software capture to be able to read the counter */
 429:.\Generated_Source\PSoC4/PWM.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:.\Generated_Source\PSoC4/PWM.c ****           (void)CY_GET_REG8(PWM_COUNTERCAP_LSB_PTR_8BIT);
 285              		.loc 1 430 0
 286 0004 034B     		ldr	r3, .L19
 287 0006 1B78     		ldrb	r3, [r3]
 431:.\Generated_Source\PSoC4/PWM.c **** 
 432:.\Generated_Source\PSoC4/PWM.c ****         /* Read the data from the FIFO */
 433:.\Generated_Source\PSoC4/PWM.c ****         return (CY_GET_REG8(PWM_CAPTURE_LSB_PTR));
 288              		.loc 1 433 0
 289 0008 034B     		ldr	r3, .L19+4
 290 000a 1B78     		ldrb	r3, [r3]
 291 000c DBB2     		uxtb	r3, r3
 434:.\Generated_Source\PSoC4/PWM.c ****     }
 292              		.loc 1 434 0
 293 000e 181C     		mov	r0, r3
 294 0010 BD46     		mov	sp, r7
 295              		@ sp needed
 296 0012 80BD     		pop	{r7, pc}
 297              	.L20:
 298              		.align	2
 299              	.L19:
 300 0014 13000F40 		.word	1074724883
 301 0018 53000F40 		.word	1074724947
 302              		.cfi_endproc
 303              	.LFE5:
 304              		.size	PWM_ReadCounter, .-PWM_ReadCounter
 305              		.section	.text.PWM_ClearFIFO,"ax",%progbits
 306              		.align	2
 307              		.global	PWM_ClearFIFO
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 14


 308              		.code	16
 309              		.thumb_func
 310              		.type	PWM_ClearFIFO, %function
 311              	PWM_ClearFIFO:
 312              	.LFB6:
 435:.\Generated_Source\PSoC4/PWM.c **** 
 436:.\Generated_Source\PSoC4/PWM.c ****     #if (PWM_UseStatus)
 437:.\Generated_Source\PSoC4/PWM.c **** 
 438:.\Generated_Source\PSoC4/PWM.c **** 
 439:.\Generated_Source\PSoC4/PWM.c ****         /*******************************************************************************
 440:.\Generated_Source\PSoC4/PWM.c ****         * Function Name: PWM_ClearFIFO
 441:.\Generated_Source\PSoC4/PWM.c ****         ********************************************************************************
 442:.\Generated_Source\PSoC4/PWM.c ****         *
 443:.\Generated_Source\PSoC4/PWM.c ****         * Summary:
 444:.\Generated_Source\PSoC4/PWM.c ****         *  This function clears all capture data from the capture FIFO
 445:.\Generated_Source\PSoC4/PWM.c ****         *
 446:.\Generated_Source\PSoC4/PWM.c ****         * Parameters:
 447:.\Generated_Source\PSoC4/PWM.c ****         *  None
 448:.\Generated_Source\PSoC4/PWM.c ****         *
 449:.\Generated_Source\PSoC4/PWM.c ****         * Return:
 450:.\Generated_Source\PSoC4/PWM.c ****         *  None
 451:.\Generated_Source\PSoC4/PWM.c ****         *
 452:.\Generated_Source\PSoC4/PWM.c ****         *******************************************************************************/
 453:.\Generated_Source\PSoC4/PWM.c ****         void PWM_ClearFIFO(void) 
 454:.\Generated_Source\PSoC4/PWM.c ****         {
 313              		.loc 1 454 0
 314              		.cfi_startproc
 315 0000 80B5     		push	{r7, lr}
 316              		.cfi_def_cfa_offset 8
 317              		.cfi_offset 7, -8
 318              		.cfi_offset 14, -4
 319 0002 00AF     		add	r7, sp, #0
 320              		.cfi_def_cfa_register 7
 455:.\Generated_Source\PSoC4/PWM.c ****             while(0u != (PWM_ReadStatusRegister() & PWM_STATUS_FIFONEMPTY))
 321              		.loc 1 455 0
 322 0004 01E0     		b	.L22
 323              	.L23:
 456:.\Generated_Source\PSoC4/PWM.c ****             {
 457:.\Generated_Source\PSoC4/PWM.c ****                 (void)PWM_ReadCapture();
 324              		.loc 1 457 0
 325 0006 FFF7FEFF 		bl	PWM_ReadCapture
 326              	.L22:
 455:.\Generated_Source\PSoC4/PWM.c ****             while(0u != (PWM_ReadStatusRegister() & PWM_STATUS_FIFONEMPTY))
 327              		.loc 1 455 0 discriminator 1
 328 000a FFF7FEFF 		bl	PWM_ReadStatusRegister
 329 000e 031C     		mov	r3, r0
 330 0010 1A1C     		mov	r2, r3
 331 0012 1023     		mov	r3, #16
 332 0014 1340     		and	r3, r2
 333 0016 F6D1     		bne	.L23
 458:.\Generated_Source\PSoC4/PWM.c ****             }
 459:.\Generated_Source\PSoC4/PWM.c ****         }
 334              		.loc 1 459 0
 335 0018 BD46     		mov	sp, r7
 336              		@ sp needed
 337 001a 80BD     		pop	{r7, pc}
 338              		.cfi_endproc
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 15


 339              	.LFE6:
 340              		.size	PWM_ClearFIFO, .-PWM_ClearFIFO
 341              		.section	.text.PWM_WritePeriod,"ax",%progbits
 342              		.align	2
 343              		.global	PWM_WritePeriod
 344              		.code	16
 345              		.thumb_func
 346              		.type	PWM_WritePeriod, %function
 347              	PWM_WritePeriod:
 348              	.LFB7:
 460:.\Generated_Source\PSoC4/PWM.c **** 
 461:.\Generated_Source\PSoC4/PWM.c ****     #endif /* PWM_UseStatus */
 462:.\Generated_Source\PSoC4/PWM.c **** 
 463:.\Generated_Source\PSoC4/PWM.c **** #endif /* !PWM_UsingFixedFunction */
 464:.\Generated_Source\PSoC4/PWM.c **** 
 465:.\Generated_Source\PSoC4/PWM.c **** 
 466:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 467:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_WritePeriod
 468:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 469:.\Generated_Source\PSoC4/PWM.c **** *
 470:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 471:.\Generated_Source\PSoC4/PWM.c **** *  This function is used to change the period of the counter.  The new period
 472:.\Generated_Source\PSoC4/PWM.c **** *  will be loaded the next time terminal count is detected.
 473:.\Generated_Source\PSoC4/PWM.c **** *
 474:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 475:.\Generated_Source\PSoC4/PWM.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:.\Generated_Source\PSoC4/PWM.c **** *           will result in the counter remaining at zero.
 477:.\Generated_Source\PSoC4/PWM.c **** *
 478:.\Generated_Source\PSoC4/PWM.c **** * Return:
 479:.\Generated_Source\PSoC4/PWM.c **** *  None
 480:.\Generated_Source\PSoC4/PWM.c **** *
 481:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 482:.\Generated_Source\PSoC4/PWM.c **** void PWM_WritePeriod(uint8 period) 
 483:.\Generated_Source\PSoC4/PWM.c **** {
 349              		.loc 1 483 0
 350              		.cfi_startproc
 351 0000 80B5     		push	{r7, lr}
 352              		.cfi_def_cfa_offset 8
 353              		.cfi_offset 7, -8
 354              		.cfi_offset 14, -4
 355 0002 82B0     		sub	sp, sp, #8
 356              		.cfi_def_cfa_offset 16
 357 0004 00AF     		add	r7, sp, #0
 358              		.cfi_def_cfa_register 7
 359 0006 021C     		mov	r2, r0
 360 0008 FB1D     		add	r3, r7, #7
 361 000a 1A70     		strb	r2, [r3]
 484:.\Generated_Source\PSoC4/PWM.c ****     #if(PWM_UsingFixedFunction)
 485:.\Generated_Source\PSoC4/PWM.c ****         CY_SET_REG16(PWM_PERIOD_LSB_PTR, (uint16)period);
 486:.\Generated_Source\PSoC4/PWM.c ****     #else
 487:.\Generated_Source\PSoC4/PWM.c ****         CY_SET_REG8(PWM_PERIOD_LSB_PTR, period);
 362              		.loc 1 487 0
 363 000c 034B     		ldr	r3, .L25
 364 000e FA1D     		add	r2, r7, #7
 365 0010 1278     		ldrb	r2, [r2]
 366 0012 1A70     		strb	r2, [r3]
 488:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 16


 489:.\Generated_Source\PSoC4/PWM.c **** }
 367              		.loc 1 489 0
 368 0014 BD46     		mov	sp, r7
 369 0016 02B0     		add	sp, sp, #8
 370              		@ sp needed
 371 0018 80BD     		pop	{r7, pc}
 372              	.L26:
 373 001a C046     		.align	2
 374              	.L25:
 375 001c 43000F40 		.word	1074724931
 376              		.cfi_endproc
 377              	.LFE7:
 378              		.size	PWM_WritePeriod, .-PWM_WritePeriod
 379              		.section	.text.PWM_WriteCompare,"ax",%progbits
 380              		.align	2
 381              		.global	PWM_WriteCompare
 382              		.code	16
 383              		.thumb_func
 384              		.type	PWM_WriteCompare, %function
 385              	PWM_WriteCompare:
 386              	.LFB8:
 490:.\Generated_Source\PSoC4/PWM.c **** 
 491:.\Generated_Source\PSoC4/PWM.c **** #if (PWM_UseOneCompareMode)
 492:.\Generated_Source\PSoC4/PWM.c **** 
 493:.\Generated_Source\PSoC4/PWM.c **** 
 494:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 495:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_WriteCompare
 496:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 497:.\Generated_Source\PSoC4/PWM.c ****     *
 498:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 499:.\Generated_Source\PSoC4/PWM.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:.\Generated_Source\PSoC4/PWM.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:.\Generated_Source\PSoC4/PWM.c ****     *  The compare output will be driven high when the present counter value is
 502:.\Generated_Source\PSoC4/PWM.c ****     *  compared to the compare value based on the compare mode defined in
 503:.\Generated_Source\PSoC4/PWM.c ****     *  Dither Mode.
 504:.\Generated_Source\PSoC4/PWM.c ****     *
 505:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 506:.\Generated_Source\PSoC4/PWM.c ****     *  compare:  New compare value.
 507:.\Generated_Source\PSoC4/PWM.c ****     *
 508:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 509:.\Generated_Source\PSoC4/PWM.c ****     *  None
 510:.\Generated_Source\PSoC4/PWM.c ****     *
 511:.\Generated_Source\PSoC4/PWM.c ****     * Side Effects:
 512:.\Generated_Source\PSoC4/PWM.c ****     *  This function is only available if the PWM mode parameter is set to
 513:.\Generated_Source\PSoC4/PWM.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:.\Generated_Source\PSoC4/PWM.c ****     *
 515:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 516:.\Generated_Source\PSoC4/PWM.c ****     void PWM_WriteCompare(uint8 compare) \
 517:.\Generated_Source\PSoC4/PWM.c ****                                        
 518:.\Generated_Source\PSoC4/PWM.c ****     {
 387              		.loc 1 518 0
 388              		.cfi_startproc
 389 0000 80B5     		push	{r7, lr}
 390              		.cfi_def_cfa_offset 8
 391              		.cfi_offset 7, -8
 392              		.cfi_offset 14, -4
 393 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 17


 394              		.cfi_def_cfa_offset 16
 395 0004 00AF     		add	r7, sp, #0
 396              		.cfi_def_cfa_register 7
 397 0006 021C     		mov	r2, r0
 398 0008 FB1D     		add	r3, r7, #7
 399 000a 1A70     		strb	r2, [r3]
 519:.\Generated_Source\PSoC4/PWM.c ****         #if(PWM_UsingFixedFunction)
 520:.\Generated_Source\PSoC4/PWM.c ****             CY_SET_REG16(PWM_COMPARE1_LSB_PTR, (uint16)compare);
 521:.\Generated_Source\PSoC4/PWM.c ****         #else
 522:.\Generated_Source\PSoC4/PWM.c ****             CY_SET_REG8(PWM_COMPARE1_LSB_PTR, compare);
 400              		.loc 1 522 0
 401 000c 034B     		ldr	r3, .L28
 402 000e FA1D     		add	r2, r7, #7
 403 0010 1278     		ldrb	r2, [r2]
 404 0012 1A70     		strb	r2, [r3]
 523:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 524:.\Generated_Source\PSoC4/PWM.c **** 
 525:.\Generated_Source\PSoC4/PWM.c ****         #if (PWM_PWMMode == PWM__B_PWM__DITHER)
 526:.\Generated_Source\PSoC4/PWM.c ****             #if(PWM_UsingFixedFunction)
 527:.\Generated_Source\PSoC4/PWM.c ****                 CY_SET_REG16(PWM_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:.\Generated_Source\PSoC4/PWM.c ****             #else
 529:.\Generated_Source\PSoC4/PWM.c ****                 CY_SET_REG8(PWM_COMPARE2_LSB_PTR, (compare + 1u));
 530:.\Generated_Source\PSoC4/PWM.c ****             #endif /* (PWM_UsingFixedFunction) */
 531:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_PWMMode == PWM__B_PWM__DITHER) */
 532:.\Generated_Source\PSoC4/PWM.c ****     }
 405              		.loc 1 532 0
 406 0014 BD46     		mov	sp, r7
 407 0016 02B0     		add	sp, sp, #8
 408              		@ sp needed
 409 0018 80BD     		pop	{r7, pc}
 410              	.L29:
 411 001a C046     		.align	2
 412              	.L28:
 413 001c 23000F40 		.word	1074724899
 414              		.cfi_endproc
 415              	.LFE8:
 416              		.size	PWM_WriteCompare, .-PWM_WriteCompare
 417              		.section	.text.PWM_WriteDeadTime,"ax",%progbits
 418              		.align	2
 419              		.global	PWM_WriteDeadTime
 420              		.code	16
 421              		.thumb_func
 422              		.type	PWM_WriteDeadTime, %function
 423              	PWM_WriteDeadTime:
 424              	.LFB9:
 533:.\Generated_Source\PSoC4/PWM.c **** 
 534:.\Generated_Source\PSoC4/PWM.c **** 
 535:.\Generated_Source\PSoC4/PWM.c **** #else
 536:.\Generated_Source\PSoC4/PWM.c **** 
 537:.\Generated_Source\PSoC4/PWM.c **** 
 538:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 539:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_WriteCompare1
 540:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 541:.\Generated_Source\PSoC4/PWM.c ****     *
 542:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 543:.\Generated_Source\PSoC4/PWM.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:.\Generated_Source\PSoC4/PWM.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 18


 545:.\Generated_Source\PSoC4/PWM.c ****     *  driven high when the present counter value is less than or less than or
 546:.\Generated_Source\PSoC4/PWM.c ****     *  equal to the compare register, depending on the mode.
 547:.\Generated_Source\PSoC4/PWM.c ****     *
 548:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 549:.\Generated_Source\PSoC4/PWM.c ****     *  compare:  New compare value.
 550:.\Generated_Source\PSoC4/PWM.c ****     *
 551:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 552:.\Generated_Source\PSoC4/PWM.c ****     *  None
 553:.\Generated_Source\PSoC4/PWM.c ****     *
 554:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 555:.\Generated_Source\PSoC4/PWM.c ****     void PWM_WriteCompare1(uint8 compare) \
 556:.\Generated_Source\PSoC4/PWM.c ****                                         
 557:.\Generated_Source\PSoC4/PWM.c ****     {
 558:.\Generated_Source\PSoC4/PWM.c ****         #if(PWM_UsingFixedFunction)
 559:.\Generated_Source\PSoC4/PWM.c ****             CY_SET_REG16(PWM_COMPARE1_LSB_PTR, (uint16)compare);
 560:.\Generated_Source\PSoC4/PWM.c ****         #else
 561:.\Generated_Source\PSoC4/PWM.c ****             CY_SET_REG8(PWM_COMPARE1_LSB_PTR, compare);
 562:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 563:.\Generated_Source\PSoC4/PWM.c ****     }
 564:.\Generated_Source\PSoC4/PWM.c **** 
 565:.\Generated_Source\PSoC4/PWM.c **** 
 566:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 567:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_WriteCompare2
 568:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 569:.\Generated_Source\PSoC4/PWM.c ****     *
 570:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 571:.\Generated_Source\PSoC4/PWM.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:.\Generated_Source\PSoC4/PWM.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:.\Generated_Source\PSoC4/PWM.c ****     *  The compare output will be driven high when the present counter value is
 574:.\Generated_Source\PSoC4/PWM.c ****     *  less than or less than or equal to the compare register, depending on the
 575:.\Generated_Source\PSoC4/PWM.c ****     *  mode.
 576:.\Generated_Source\PSoC4/PWM.c ****     *
 577:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 578:.\Generated_Source\PSoC4/PWM.c ****     *  compare:  New compare value.
 579:.\Generated_Source\PSoC4/PWM.c ****     *
 580:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 581:.\Generated_Source\PSoC4/PWM.c ****     *  None
 582:.\Generated_Source\PSoC4/PWM.c ****     *
 583:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 584:.\Generated_Source\PSoC4/PWM.c ****     void PWM_WriteCompare2(uint8 compare) \
 585:.\Generated_Source\PSoC4/PWM.c ****                                         
 586:.\Generated_Source\PSoC4/PWM.c ****     {
 587:.\Generated_Source\PSoC4/PWM.c ****         #if(PWM_UsingFixedFunction)
 588:.\Generated_Source\PSoC4/PWM.c ****             CY_SET_REG16(PWM_COMPARE2_LSB_PTR, compare);
 589:.\Generated_Source\PSoC4/PWM.c ****         #else
 590:.\Generated_Source\PSoC4/PWM.c ****             CY_SET_REG8(PWM_COMPARE2_LSB_PTR, compare);
 591:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 592:.\Generated_Source\PSoC4/PWM.c ****     }
 593:.\Generated_Source\PSoC4/PWM.c **** #endif /* UseOneCompareMode */
 594:.\Generated_Source\PSoC4/PWM.c **** 
 595:.\Generated_Source\PSoC4/PWM.c **** #if (PWM_DeadBandUsed)
 596:.\Generated_Source\PSoC4/PWM.c **** 
 597:.\Generated_Source\PSoC4/PWM.c **** 
 598:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 599:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_WriteDeadTime
 600:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 601:.\Generated_Source\PSoC4/PWM.c ****     *
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 19


 602:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 603:.\Generated_Source\PSoC4/PWM.c ****     *  This function writes the dead-band counts to the corresponding register
 604:.\Generated_Source\PSoC4/PWM.c ****     *
 605:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 606:.\Generated_Source\PSoC4/PWM.c ****     *  deadtime:  Number of counts for dead time
 607:.\Generated_Source\PSoC4/PWM.c ****     *
 608:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 609:.\Generated_Source\PSoC4/PWM.c ****     *  None
 610:.\Generated_Source\PSoC4/PWM.c ****     *
 611:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 612:.\Generated_Source\PSoC4/PWM.c ****     void PWM_WriteDeadTime(uint8 deadtime) 
 613:.\Generated_Source\PSoC4/PWM.c ****     {
 425              		.loc 1 613 0
 426              		.cfi_startproc
 427 0000 80B5     		push	{r7, lr}
 428              		.cfi_def_cfa_offset 8
 429              		.cfi_offset 7, -8
 430              		.cfi_offset 14, -4
 431 0002 82B0     		sub	sp, sp, #8
 432              		.cfi_def_cfa_offset 16
 433 0004 00AF     		add	r7, sp, #0
 434              		.cfi_def_cfa_register 7
 435 0006 021C     		mov	r2, r0
 436 0008 FB1D     		add	r3, r7, #7
 437 000a 1A70     		strb	r2, [r3]
 614:.\Generated_Source\PSoC4/PWM.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:.\Generated_Source\PSoC4/PWM.c ****         #if(!PWM_DeadBand2_4)
 616:.\Generated_Source\PSoC4/PWM.c ****             CY_SET_REG8(PWM_DEADBAND_COUNT_PTR, deadtime);
 617:.\Generated_Source\PSoC4/PWM.c ****         #else
 618:.\Generated_Source\PSoC4/PWM.c ****             /* Otherwise the data has to be masked and offset */
 619:.\Generated_Source\PSoC4/PWM.c ****             /* Clear existing data */
 620:.\Generated_Source\PSoC4/PWM.c ****             PWM_DEADBAND_COUNT &= ((uint8)(~PWM_DEADBAND_COUNT_MASK));
 438              		.loc 1 620 0
 439 000c 0C4B     		ldr	r3, .L31
 440 000e 0C4A     		ldr	r2, .L31
 441 0010 1278     		ldrb	r2, [r2]
 442 0012 D2B2     		uxtb	r2, r2
 443 0014 0321     		mov	r1, #3
 444 0016 8A43     		bic	r2, r1
 445 0018 D2B2     		uxtb	r2, r2
 446 001a 1A70     		strb	r2, [r3]
 621:.\Generated_Source\PSoC4/PWM.c **** 
 622:.\Generated_Source\PSoC4/PWM.c ****             /* Set new dead time */
 623:.\Generated_Source\PSoC4/PWM.c ****             #if(PWM_DEADBAND_COUNT_SHIFT)
 624:.\Generated_Source\PSoC4/PWM.c ****                 PWM_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_DEADBAND_COUNT_SHIFT)) &
 625:.\Generated_Source\PSoC4/PWM.c ****                                                     PWM_DEADBAND_COUNT_MASK;
 626:.\Generated_Source\PSoC4/PWM.c ****             #else
 627:.\Generated_Source\PSoC4/PWM.c ****                 PWM_DEADBAND_COUNT |= deadtime & PWM_DEADBAND_COUNT_MASK;
 447              		.loc 1 627 0
 448 001c 084B     		ldr	r3, .L31
 449 001e 084A     		ldr	r2, .L31
 450 0020 1278     		ldrb	r2, [r2]
 451 0022 D2B2     		uxtb	r2, r2
 452 0024 D1B2     		uxtb	r1, r2
 453 0026 FA1D     		add	r2, r7, #7
 454 0028 1278     		ldrb	r2, [r2]
 455 002a 101C     		add	r0, r2, #0
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 20


 456 002c 0322     		mov	r2, #3
 457 002e 0240     		and	r2, r0
 458 0030 D2B2     		uxtb	r2, r2
 459 0032 0A43     		orr	r2, r1
 460 0034 D2B2     		uxtb	r2, r2
 461 0036 D2B2     		uxtb	r2, r2
 462 0038 1A70     		strb	r2, [r3]
 628:.\Generated_Source\PSoC4/PWM.c ****             #endif /* (PWM_DEADBAND_COUNT_SHIFT) */
 629:.\Generated_Source\PSoC4/PWM.c **** 
 630:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (!PWM_DeadBand2_4) */
 631:.\Generated_Source\PSoC4/PWM.c ****     }
 463              		.loc 1 631 0
 464 003a BD46     		mov	sp, r7
 465 003c 02B0     		add	sp, sp, #8
 466              		@ sp needed
 467 003e 80BD     		pop	{r7, pc}
 468              	.L32:
 469              		.align	2
 470              	.L31:
 471 0040 73000F40 		.word	1074724979
 472              		.cfi_endproc
 473              	.LFE9:
 474              		.size	PWM_WriteDeadTime, .-PWM_WriteDeadTime
 475              		.section	.text.PWM_ReadDeadTime,"ax",%progbits
 476              		.align	2
 477              		.global	PWM_ReadDeadTime
 478              		.code	16
 479              		.thumb_func
 480              		.type	PWM_ReadDeadTime, %function
 481              	PWM_ReadDeadTime:
 482              	.LFB10:
 632:.\Generated_Source\PSoC4/PWM.c **** 
 633:.\Generated_Source\PSoC4/PWM.c **** 
 634:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 635:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadDeadTime
 636:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 637:.\Generated_Source\PSoC4/PWM.c ****     *
 638:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 639:.\Generated_Source\PSoC4/PWM.c ****     *  This function reads the dead-band counts from the corresponding register
 640:.\Generated_Source\PSoC4/PWM.c ****     *
 641:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 642:.\Generated_Source\PSoC4/PWM.c ****     *  None
 643:.\Generated_Source\PSoC4/PWM.c ****     *
 644:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 645:.\Generated_Source\PSoC4/PWM.c ****     *  Dead Band Counts
 646:.\Generated_Source\PSoC4/PWM.c ****     *
 647:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 648:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadDeadTime(void) 
 649:.\Generated_Source\PSoC4/PWM.c ****     {
 483              		.loc 1 649 0
 484              		.cfi_startproc
 485 0000 80B5     		push	{r7, lr}
 486              		.cfi_def_cfa_offset 8
 487              		.cfi_offset 7, -8
 488              		.cfi_offset 14, -4
 489 0002 00AF     		add	r7, sp, #0
 490              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 21


 650:.\Generated_Source\PSoC4/PWM.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:.\Generated_Source\PSoC4/PWM.c ****         #if(!PWM_DeadBand2_4)
 652:.\Generated_Source\PSoC4/PWM.c ****             return (CY_GET_REG8(PWM_DEADBAND_COUNT_PTR));
 653:.\Generated_Source\PSoC4/PWM.c ****         #else
 654:.\Generated_Source\PSoC4/PWM.c **** 
 655:.\Generated_Source\PSoC4/PWM.c ****             /* Otherwise the data has to be masked and offset */
 656:.\Generated_Source\PSoC4/PWM.c ****             #if(PWM_DEADBAND_COUNT_SHIFT)
 657:.\Generated_Source\PSoC4/PWM.c ****                 return ((uint8)(((uint8)(PWM_DEADBAND_COUNT & PWM_DEADBAND_COUNT_MASK)) >>
 658:.\Generated_Source\PSoC4/PWM.c ****                                                                            PWM_DEADBAND_COUNT_SHIFT
 659:.\Generated_Source\PSoC4/PWM.c ****             #else
 660:.\Generated_Source\PSoC4/PWM.c ****                 return (PWM_DEADBAND_COUNT & PWM_DEADBAND_COUNT_MASK);
 491              		.loc 1 660 0
 492 0004 044B     		ldr	r3, .L35
 493 0006 1B78     		ldrb	r3, [r3]
 494 0008 DAB2     		uxtb	r2, r3
 495 000a 0323     		mov	r3, #3
 496 000c 1340     		and	r3, r2
 497 000e DBB2     		uxtb	r3, r3
 661:.\Generated_Source\PSoC4/PWM.c ****             #endif /* (PWM_DEADBAND_COUNT_SHIFT) */
 662:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (!PWM_DeadBand2_4) */
 663:.\Generated_Source\PSoC4/PWM.c ****     }
 498              		.loc 1 663 0
 499 0010 181C     		mov	r0, r3
 500 0012 BD46     		mov	sp, r7
 501              		@ sp needed
 502 0014 80BD     		pop	{r7, pc}
 503              	.L36:
 504 0016 C046     		.align	2
 505              	.L35:
 506 0018 73000F40 		.word	1074724979
 507              		.cfi_endproc
 508              	.LFE10:
 509              		.size	PWM_ReadDeadTime, .-PWM_ReadDeadTime
 510              		.section	.text.PWM_SetInterruptMode,"ax",%progbits
 511              		.align	2
 512              		.global	PWM_SetInterruptMode
 513              		.code	16
 514              		.thumb_func
 515              		.type	PWM_SetInterruptMode, %function
 516              	PWM_SetInterruptMode:
 517              	.LFB11:
 664:.\Generated_Source\PSoC4/PWM.c **** #endif /* DeadBandUsed */
 665:.\Generated_Source\PSoC4/PWM.c **** 
 666:.\Generated_Source\PSoC4/PWM.c **** #if (PWM_UseStatus || PWM_UsingFixedFunction)
 667:.\Generated_Source\PSoC4/PWM.c **** 
 668:.\Generated_Source\PSoC4/PWM.c **** 
 669:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 670:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_SetInterruptMode
 671:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 672:.\Generated_Source\PSoC4/PWM.c ****     *
 673:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 674:.\Generated_Source\PSoC4/PWM.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:.\Generated_Source\PSoC4/PWM.c ****     *  source status register.
 676:.\Generated_Source\PSoC4/PWM.c ****     *
 677:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 678:.\Generated_Source\PSoC4/PWM.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:.\Generated_Source\PSoC4/PWM.c ****     *
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 22


 680:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 681:.\Generated_Source\PSoC4/PWM.c ****     *  None
 682:.\Generated_Source\PSoC4/PWM.c ****     *
 683:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 684:.\Generated_Source\PSoC4/PWM.c ****     void PWM_SetInterruptMode(uint8 interruptMode) 
 685:.\Generated_Source\PSoC4/PWM.c ****     {
 518              		.loc 1 685 0
 519              		.cfi_startproc
 520 0000 80B5     		push	{r7, lr}
 521              		.cfi_def_cfa_offset 8
 522              		.cfi_offset 7, -8
 523              		.cfi_offset 14, -4
 524 0002 82B0     		sub	sp, sp, #8
 525              		.cfi_def_cfa_offset 16
 526 0004 00AF     		add	r7, sp, #0
 527              		.cfi_def_cfa_register 7
 528 0006 021C     		mov	r2, r0
 529 0008 FB1D     		add	r3, r7, #7
 530 000a 1A70     		strb	r2, [r3]
 686:.\Generated_Source\PSoC4/PWM.c ****         CY_SET_REG8(PWM_STATUS_MASK_PTR, interruptMode);
 531              		.loc 1 686 0
 532 000c 034B     		ldr	r3, .L38
 533 000e FA1D     		add	r2, r7, #7
 534 0010 1278     		ldrb	r2, [r2]
 535 0012 1A70     		strb	r2, [r3]
 687:.\Generated_Source\PSoC4/PWM.c ****     }
 536              		.loc 1 687 0
 537 0014 BD46     		mov	sp, r7
 538 0016 02B0     		add	sp, sp, #8
 539              		@ sp needed
 540 0018 80BD     		pop	{r7, pc}
 541              	.L39:
 542 001a C046     		.align	2
 543              	.L38:
 544 001c 83000F40 		.word	1074724995
 545              		.cfi_endproc
 546              	.LFE11:
 547              		.size	PWM_SetInterruptMode, .-PWM_SetInterruptMode
 548              		.section	.text.PWM_ReadStatusRegister,"ax",%progbits
 549              		.align	2
 550              		.global	PWM_ReadStatusRegister
 551              		.code	16
 552              		.thumb_func
 553              		.type	PWM_ReadStatusRegister, %function
 554              	PWM_ReadStatusRegister:
 555              	.LFB12:
 688:.\Generated_Source\PSoC4/PWM.c **** 
 689:.\Generated_Source\PSoC4/PWM.c **** 
 690:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 691:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadStatusRegister
 692:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 693:.\Generated_Source\PSoC4/PWM.c ****     *
 694:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 695:.\Generated_Source\PSoC4/PWM.c ****     *  This function returns the current state of the status register.
 696:.\Generated_Source\PSoC4/PWM.c ****     *
 697:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 698:.\Generated_Source\PSoC4/PWM.c ****     *  None
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 23


 699:.\Generated_Source\PSoC4/PWM.c ****     *
 700:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 701:.\Generated_Source\PSoC4/PWM.c ****     *  uint8 : Current status register value. The status register bits are:
 702:.\Generated_Source\PSoC4/PWM.c ****     *  [7:6] : Unused(0)
 703:.\Generated_Source\PSoC4/PWM.c ****     *  [5]   : Kill event output
 704:.\Generated_Source\PSoC4/PWM.c ****     *  [4]   : FIFO not empty
 705:.\Generated_Source\PSoC4/PWM.c ****     *  [3]   : FIFO full
 706:.\Generated_Source\PSoC4/PWM.c ****     *  [2]   : Terminal count
 707:.\Generated_Source\PSoC4/PWM.c ****     *  [1]   : Compare output 2
 708:.\Generated_Source\PSoC4/PWM.c ****     *  [0]   : Compare output 1
 709:.\Generated_Source\PSoC4/PWM.c ****     *
 710:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 711:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadStatusRegister(void) 
 712:.\Generated_Source\PSoC4/PWM.c ****     {
 556              		.loc 1 712 0
 557              		.cfi_startproc
 558 0000 80B5     		push	{r7, lr}
 559              		.cfi_def_cfa_offset 8
 560              		.cfi_offset 7, -8
 561              		.cfi_offset 14, -4
 562 0002 00AF     		add	r7, sp, #0
 563              		.cfi_def_cfa_register 7
 713:.\Generated_Source\PSoC4/PWM.c ****         return (CY_GET_REG8(PWM_STATUS_PTR));
 564              		.loc 1 713 0
 565 0004 024B     		ldr	r3, .L42
 566 0006 1B78     		ldrb	r3, [r3]
 567 0008 DBB2     		uxtb	r3, r3
 714:.\Generated_Source\PSoC4/PWM.c ****     }
 568              		.loc 1 714 0
 569 000a 181C     		mov	r0, r3
 570 000c BD46     		mov	sp, r7
 571              		@ sp needed
 572 000e 80BD     		pop	{r7, pc}
 573              	.L43:
 574              		.align	2
 575              	.L42:
 576 0010 63000F40 		.word	1074724963
 577              		.cfi_endproc
 578              	.LFE12:
 579              		.size	PWM_ReadStatusRegister, .-PWM_ReadStatusRegister
 580              		.section	.text.PWM_ReadControlRegister,"ax",%progbits
 581              		.align	2
 582              		.global	PWM_ReadControlRegister
 583              		.code	16
 584              		.thumb_func
 585              		.type	PWM_ReadControlRegister, %function
 586              	PWM_ReadControlRegister:
 587              	.LFB13:
 715:.\Generated_Source\PSoC4/PWM.c **** 
 716:.\Generated_Source\PSoC4/PWM.c **** #endif /* (PWM_UseStatus || PWM_UsingFixedFunction) */
 717:.\Generated_Source\PSoC4/PWM.c **** 
 718:.\Generated_Source\PSoC4/PWM.c **** 
 719:.\Generated_Source\PSoC4/PWM.c **** #if (PWM_UseControl)
 720:.\Generated_Source\PSoC4/PWM.c **** 
 721:.\Generated_Source\PSoC4/PWM.c **** 
 722:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 723:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadControlRegister
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 24


 724:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 725:.\Generated_Source\PSoC4/PWM.c ****     *
 726:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 727:.\Generated_Source\PSoC4/PWM.c ****     *  Returns the current state of the control register. This API is available
 728:.\Generated_Source\PSoC4/PWM.c ****     *  only if the control register is not removed.
 729:.\Generated_Source\PSoC4/PWM.c ****     *
 730:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 731:.\Generated_Source\PSoC4/PWM.c ****     *  None
 732:.\Generated_Source\PSoC4/PWM.c ****     *
 733:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 734:.\Generated_Source\PSoC4/PWM.c ****     *  uint8 : Current control register value
 735:.\Generated_Source\PSoC4/PWM.c ****     *
 736:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 737:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadControlRegister(void) 
 738:.\Generated_Source\PSoC4/PWM.c ****     {
 588              		.loc 1 738 0
 589              		.cfi_startproc
 590 0000 80B5     		push	{r7, lr}
 591              		.cfi_def_cfa_offset 8
 592              		.cfi_offset 7, -8
 593              		.cfi_offset 14, -4
 594 0002 82B0     		sub	sp, sp, #8
 595              		.cfi_def_cfa_offset 16
 596 0004 00AF     		add	r7, sp, #0
 597              		.cfi_def_cfa_register 7
 739:.\Generated_Source\PSoC4/PWM.c ****         uint8 result;
 740:.\Generated_Source\PSoC4/PWM.c **** 
 741:.\Generated_Source\PSoC4/PWM.c ****         result = CY_GET_REG8(PWM_CONTROL_PTR);
 598              		.loc 1 741 0
 599 0006 054A     		ldr	r2, .L46
 600 0008 FB1D     		add	r3, r7, #7
 601 000a 1278     		ldrb	r2, [r2]
 602 000c 1A70     		strb	r2, [r3]
 742:.\Generated_Source\PSoC4/PWM.c ****         return (result);
 603              		.loc 1 742 0
 604 000e FB1D     		add	r3, r7, #7
 605 0010 1B78     		ldrb	r3, [r3]
 743:.\Generated_Source\PSoC4/PWM.c ****     }
 606              		.loc 1 743 0
 607 0012 181C     		mov	r0, r3
 608 0014 BD46     		mov	sp, r7
 609 0016 02B0     		add	sp, sp, #8
 610              		@ sp needed
 611 0018 80BD     		pop	{r7, pc}
 612              	.L47:
 613 001a C046     		.align	2
 614              	.L46:
 615 001c 72000F40 		.word	1074724978
 616              		.cfi_endproc
 617              	.LFE13:
 618              		.size	PWM_ReadControlRegister, .-PWM_ReadControlRegister
 619              		.section	.text.PWM_WriteControlRegister,"ax",%progbits
 620              		.align	2
 621              		.global	PWM_WriteControlRegister
 622              		.code	16
 623              		.thumb_func
 624              		.type	PWM_WriteControlRegister, %function
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 25


 625              	PWM_WriteControlRegister:
 626              	.LFB14:
 744:.\Generated_Source\PSoC4/PWM.c **** 
 745:.\Generated_Source\PSoC4/PWM.c **** 
 746:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 747:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_WriteControlRegister
 748:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 749:.\Generated_Source\PSoC4/PWM.c ****     *
 750:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 751:.\Generated_Source\PSoC4/PWM.c ****     *  Sets the bit field of the control register. This API is available only if
 752:.\Generated_Source\PSoC4/PWM.c ****     *  the control register is not removed.
 753:.\Generated_Source\PSoC4/PWM.c ****     *
 754:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 755:.\Generated_Source\PSoC4/PWM.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:.\Generated_Source\PSoC4/PWM.c ****     *  [7]   : PWM Enable
 757:.\Generated_Source\PSoC4/PWM.c ****     *  [6]   : Reset
 758:.\Generated_Source\PSoC4/PWM.c ****     *  [5:3] : Compare Mode2
 759:.\Generated_Source\PSoC4/PWM.c ****     *  [2:0] : Compare Mode2
 760:.\Generated_Source\PSoC4/PWM.c ****     *
 761:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 762:.\Generated_Source\PSoC4/PWM.c ****     *  None
 763:.\Generated_Source\PSoC4/PWM.c ****     *
 764:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 765:.\Generated_Source\PSoC4/PWM.c ****     void PWM_WriteControlRegister(uint8 control) 
 766:.\Generated_Source\PSoC4/PWM.c ****     {
 627              		.loc 1 766 0
 628              		.cfi_startproc
 629 0000 80B5     		push	{r7, lr}
 630              		.cfi_def_cfa_offset 8
 631              		.cfi_offset 7, -8
 632              		.cfi_offset 14, -4
 633 0002 82B0     		sub	sp, sp, #8
 634              		.cfi_def_cfa_offset 16
 635 0004 00AF     		add	r7, sp, #0
 636              		.cfi_def_cfa_register 7
 637 0006 021C     		mov	r2, r0
 638 0008 FB1D     		add	r3, r7, #7
 639 000a 1A70     		strb	r2, [r3]
 767:.\Generated_Source\PSoC4/PWM.c ****         CY_SET_REG8(PWM_CONTROL_PTR, control);
 640              		.loc 1 767 0
 641 000c 034B     		ldr	r3, .L49
 642 000e FA1D     		add	r2, r7, #7
 643 0010 1278     		ldrb	r2, [r2]
 644 0012 1A70     		strb	r2, [r3]
 768:.\Generated_Source\PSoC4/PWM.c ****     }
 645              		.loc 1 768 0
 646 0014 BD46     		mov	sp, r7
 647 0016 02B0     		add	sp, sp, #8
 648              		@ sp needed
 649 0018 80BD     		pop	{r7, pc}
 650              	.L50:
 651 001a C046     		.align	2
 652              	.L49:
 653 001c 72000F40 		.word	1074724978
 654              		.cfi_endproc
 655              	.LFE14:
 656              		.size	PWM_WriteControlRegister, .-PWM_WriteControlRegister
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 26


 657              		.section	.text.PWM_ReadCapture,"ax",%progbits
 658              		.align	2
 659              		.global	PWM_ReadCapture
 660              		.code	16
 661              		.thumb_func
 662              		.type	PWM_ReadCapture, %function
 663              	PWM_ReadCapture:
 664              	.LFB15:
 769:.\Generated_Source\PSoC4/PWM.c **** 
 770:.\Generated_Source\PSoC4/PWM.c **** #endif /* (PWM_UseControl) */
 771:.\Generated_Source\PSoC4/PWM.c **** 
 772:.\Generated_Source\PSoC4/PWM.c **** 
 773:.\Generated_Source\PSoC4/PWM.c **** #if (!PWM_UsingFixedFunction)
 774:.\Generated_Source\PSoC4/PWM.c **** 
 775:.\Generated_Source\PSoC4/PWM.c **** 
 776:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 777:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadCapture
 778:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 779:.\Generated_Source\PSoC4/PWM.c ****     *
 780:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 781:.\Generated_Source\PSoC4/PWM.c ****     *  Reads the capture value from the capture FIFO.
 782:.\Generated_Source\PSoC4/PWM.c ****     *
 783:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 784:.\Generated_Source\PSoC4/PWM.c ****     *  None
 785:.\Generated_Source\PSoC4/PWM.c ****     *
 786:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 787:.\Generated_Source\PSoC4/PWM.c ****     *  uint8/uint16: The current capture value
 788:.\Generated_Source\PSoC4/PWM.c ****     *
 789:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 790:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadCapture(void) 
 791:.\Generated_Source\PSoC4/PWM.c ****     {
 665              		.loc 1 791 0
 666              		.cfi_startproc
 667 0000 80B5     		push	{r7, lr}
 668              		.cfi_def_cfa_offset 8
 669              		.cfi_offset 7, -8
 670              		.cfi_offset 14, -4
 671 0002 00AF     		add	r7, sp, #0
 672              		.cfi_def_cfa_register 7
 792:.\Generated_Source\PSoC4/PWM.c ****         return (CY_GET_REG8(PWM_CAPTURE_LSB_PTR));
 673              		.loc 1 792 0
 674 0004 024B     		ldr	r3, .L53
 675 0006 1B78     		ldrb	r3, [r3]
 676 0008 DBB2     		uxtb	r3, r3
 793:.\Generated_Source\PSoC4/PWM.c ****     }
 677              		.loc 1 793 0
 678 000a 181C     		mov	r0, r3
 679 000c BD46     		mov	sp, r7
 680              		@ sp needed
 681 000e 80BD     		pop	{r7, pc}
 682              	.L54:
 683              		.align	2
 684              	.L53:
 685 0010 53000F40 		.word	1074724947
 686              		.cfi_endproc
 687              	.LFE15:
 688              		.size	PWM_ReadCapture, .-PWM_ReadCapture
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 27


 689              		.section	.text.PWM_ReadCompare,"ax",%progbits
 690              		.align	2
 691              		.global	PWM_ReadCompare
 692              		.code	16
 693              		.thumb_func
 694              		.type	PWM_ReadCompare, %function
 695              	PWM_ReadCompare:
 696              	.LFB16:
 794:.\Generated_Source\PSoC4/PWM.c **** 
 795:.\Generated_Source\PSoC4/PWM.c **** #endif /* (!PWM_UsingFixedFunction) */
 796:.\Generated_Source\PSoC4/PWM.c **** 
 797:.\Generated_Source\PSoC4/PWM.c **** 
 798:.\Generated_Source\PSoC4/PWM.c **** #if (PWM_UseOneCompareMode)
 799:.\Generated_Source\PSoC4/PWM.c **** 
 800:.\Generated_Source\PSoC4/PWM.c **** 
 801:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 802:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadCompare
 803:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 804:.\Generated_Source\PSoC4/PWM.c ****     *
 805:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 806:.\Generated_Source\PSoC4/PWM.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:.\Generated_Source\PSoC4/PWM.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:.\Generated_Source\PSoC4/PWM.c ****     *
 809:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 810:.\Generated_Source\PSoC4/PWM.c ****     *  None
 811:.\Generated_Source\PSoC4/PWM.c ****     *
 812:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 813:.\Generated_Source\PSoC4/PWM.c ****     *  uint8/uint16: Current compare value
 814:.\Generated_Source\PSoC4/PWM.c ****     *
 815:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 816:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadCompare(void) 
 817:.\Generated_Source\PSoC4/PWM.c ****     {
 697              		.loc 1 817 0
 698              		.cfi_startproc
 699 0000 80B5     		push	{r7, lr}
 700              		.cfi_def_cfa_offset 8
 701              		.cfi_offset 7, -8
 702              		.cfi_offset 14, -4
 703 0002 00AF     		add	r7, sp, #0
 704              		.cfi_def_cfa_register 7
 818:.\Generated_Source\PSoC4/PWM.c ****         #if(PWM_UsingFixedFunction)
 819:.\Generated_Source\PSoC4/PWM.c ****             return ((uint8)CY_GET_REG16(PWM_COMPARE1_LSB_PTR));
 820:.\Generated_Source\PSoC4/PWM.c ****         #else
 821:.\Generated_Source\PSoC4/PWM.c ****             return (CY_GET_REG8(PWM_COMPARE1_LSB_PTR));
 705              		.loc 1 821 0
 706 0004 024B     		ldr	r3, .L57
 707 0006 1B78     		ldrb	r3, [r3]
 708 0008 DBB2     		uxtb	r3, r3
 822:.\Generated_Source\PSoC4/PWM.c ****         #endif /* (PWM_UsingFixedFunction) */
 823:.\Generated_Source\PSoC4/PWM.c ****     }
 709              		.loc 1 823 0
 710 000a 181C     		mov	r0, r3
 711 000c BD46     		mov	sp, r7
 712              		@ sp needed
 713 000e 80BD     		pop	{r7, pc}
 714              	.L58:
 715              		.align	2
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 28


 716              	.L57:
 717 0010 23000F40 		.word	1074724899
 718              		.cfi_endproc
 719              	.LFE16:
 720              		.size	PWM_ReadCompare, .-PWM_ReadCompare
 721              		.section	.text.PWM_ReadPeriod,"ax",%progbits
 722              		.align	2
 723              		.global	PWM_ReadPeriod
 724              		.code	16
 725              		.thumb_func
 726              		.type	PWM_ReadPeriod, %function
 727              	PWM_ReadPeriod:
 728              	.LFB17:
 824:.\Generated_Source\PSoC4/PWM.c **** 
 825:.\Generated_Source\PSoC4/PWM.c **** #else
 826:.\Generated_Source\PSoC4/PWM.c **** 
 827:.\Generated_Source\PSoC4/PWM.c **** 
 828:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 829:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadCompare1
 830:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 831:.\Generated_Source\PSoC4/PWM.c ****     *
 832:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 833:.\Generated_Source\PSoC4/PWM.c ****     *  Reads the compare value for the compare1 output.
 834:.\Generated_Source\PSoC4/PWM.c ****     *
 835:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 836:.\Generated_Source\PSoC4/PWM.c ****     *  None
 837:.\Generated_Source\PSoC4/PWM.c ****     *
 838:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 839:.\Generated_Source\PSoC4/PWM.c ****     *  uint8/uint16: Current compare value.
 840:.\Generated_Source\PSoC4/PWM.c ****     *
 841:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 842:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadCompare1(void) 
 843:.\Generated_Source\PSoC4/PWM.c ****     {
 844:.\Generated_Source\PSoC4/PWM.c ****         return (CY_GET_REG8(PWM_COMPARE1_LSB_PTR));
 845:.\Generated_Source\PSoC4/PWM.c ****     }
 846:.\Generated_Source\PSoC4/PWM.c **** 
 847:.\Generated_Source\PSoC4/PWM.c **** 
 848:.\Generated_Source\PSoC4/PWM.c ****     /*******************************************************************************
 849:.\Generated_Source\PSoC4/PWM.c ****     * Function Name: PWM_ReadCompare2
 850:.\Generated_Source\PSoC4/PWM.c ****     ********************************************************************************
 851:.\Generated_Source\PSoC4/PWM.c ****     *
 852:.\Generated_Source\PSoC4/PWM.c ****     * Summary:
 853:.\Generated_Source\PSoC4/PWM.c ****     *  Reads the compare value for the compare2 output.
 854:.\Generated_Source\PSoC4/PWM.c ****     *
 855:.\Generated_Source\PSoC4/PWM.c ****     * Parameters:
 856:.\Generated_Source\PSoC4/PWM.c ****     *  None
 857:.\Generated_Source\PSoC4/PWM.c ****     *
 858:.\Generated_Source\PSoC4/PWM.c ****     * Return:
 859:.\Generated_Source\PSoC4/PWM.c ****     *  uint8/uint16: Current compare value.
 860:.\Generated_Source\PSoC4/PWM.c ****     *
 861:.\Generated_Source\PSoC4/PWM.c ****     *******************************************************************************/
 862:.\Generated_Source\PSoC4/PWM.c ****     uint8 PWM_ReadCompare2(void) 
 863:.\Generated_Source\PSoC4/PWM.c ****     {
 864:.\Generated_Source\PSoC4/PWM.c ****         return (CY_GET_REG8(PWM_COMPARE2_LSB_PTR));
 865:.\Generated_Source\PSoC4/PWM.c ****     }
 866:.\Generated_Source\PSoC4/PWM.c **** 
 867:.\Generated_Source\PSoC4/PWM.c **** #endif /* (PWM_UseOneCompareMode) */
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 29


 868:.\Generated_Source\PSoC4/PWM.c **** 
 869:.\Generated_Source\PSoC4/PWM.c **** 
 870:.\Generated_Source\PSoC4/PWM.c **** /*******************************************************************************
 871:.\Generated_Source\PSoC4/PWM.c **** * Function Name: PWM_ReadPeriod
 872:.\Generated_Source\PSoC4/PWM.c **** ********************************************************************************
 873:.\Generated_Source\PSoC4/PWM.c **** *
 874:.\Generated_Source\PSoC4/PWM.c **** * Summary:
 875:.\Generated_Source\PSoC4/PWM.c **** *  Reads the period value used by the PWM hardware.
 876:.\Generated_Source\PSoC4/PWM.c **** *
 877:.\Generated_Source\PSoC4/PWM.c **** * Parameters:
 878:.\Generated_Source\PSoC4/PWM.c **** *  None
 879:.\Generated_Source\PSoC4/PWM.c **** *
 880:.\Generated_Source\PSoC4/PWM.c **** * Return:
 881:.\Generated_Source\PSoC4/PWM.c **** *  uint8/16: Period value
 882:.\Generated_Source\PSoC4/PWM.c **** *
 883:.\Generated_Source\PSoC4/PWM.c **** *******************************************************************************/
 884:.\Generated_Source\PSoC4/PWM.c **** uint8 PWM_ReadPeriod(void) 
 885:.\Generated_Source\PSoC4/PWM.c **** {
 729              		.loc 1 885 0
 730              		.cfi_startproc
 731 0000 80B5     		push	{r7, lr}
 732              		.cfi_def_cfa_offset 8
 733              		.cfi_offset 7, -8
 734              		.cfi_offset 14, -4
 735 0002 00AF     		add	r7, sp, #0
 736              		.cfi_def_cfa_register 7
 886:.\Generated_Source\PSoC4/PWM.c ****     #if(PWM_UsingFixedFunction)
 887:.\Generated_Source\PSoC4/PWM.c ****         return ((uint8)CY_GET_REG16(PWM_PERIOD_LSB_PTR));
 888:.\Generated_Source\PSoC4/PWM.c ****     #else
 889:.\Generated_Source\PSoC4/PWM.c ****         return (CY_GET_REG8(PWM_PERIOD_LSB_PTR));
 737              		.loc 1 889 0
 738 0004 024B     		ldr	r3, .L61
 739 0006 1B78     		ldrb	r3, [r3]
 740 0008 DBB2     		uxtb	r3, r3
 890:.\Generated_Source\PSoC4/PWM.c ****     #endif /* (PWM_UsingFixedFunction) */
 891:.\Generated_Source\PSoC4/PWM.c **** }
 741              		.loc 1 891 0
 742 000a 181C     		mov	r0, r3
 743 000c BD46     		mov	sp, r7
 744              		@ sp needed
 745 000e 80BD     		pop	{r7, pc}
 746              	.L62:
 747              		.align	2
 748              	.L61:
 749 0010 43000F40 		.word	1074724931
 750              		.cfi_endproc
 751              	.LFE17:
 752              		.size	PWM_ReadPeriod, .-PWM_ReadPeriod
 753              		.text
 754              	.Letext0:
 755              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 756              		.section	.debug_info,"",%progbits
 757              	.Ldebug_info0:
 758 0000 BA020000 		.4byte	0x2ba
 759 0004 0400     		.2byte	0x4
 760 0006 00000000 		.4byte	.Ldebug_abbrev0
 761 000a 04       		.byte	0x4
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 30


 762 000b 01       		.uleb128 0x1
 763 000c 84000000 		.4byte	.LASF41
 764 0010 01       		.byte	0x1
 765 0011 5F000000 		.4byte	.LASF42
 766 0015 48010000 		.4byte	.LASF43
 767 0019 00000000 		.4byte	.Ldebug_ranges0+0
 768 001d 00000000 		.4byte	0
 769 0021 00000000 		.4byte	.Ldebug_line0
 770 0025 02       		.uleb128 0x2
 771 0026 01       		.byte	0x1
 772 0027 06       		.byte	0x6
 773 0028 E8020000 		.4byte	.LASF0
 774 002c 02       		.uleb128 0x2
 775 002d 01       		.byte	0x1
 776 002e 08       		.byte	0x8
 777 002f 00010000 		.4byte	.LASF1
 778 0033 02       		.uleb128 0x2
 779 0034 02       		.byte	0x2
 780 0035 05       		.byte	0x5
 781 0036 9E020000 		.4byte	.LASF2
 782 003a 02       		.uleb128 0x2
 783 003b 02       		.byte	0x2
 784 003c 07       		.byte	0x7
 785 003d 2F000000 		.4byte	.LASF3
 786 0041 02       		.uleb128 0x2
 787 0042 04       		.byte	0x4
 788 0043 05       		.byte	0x5
 789 0044 C2020000 		.4byte	.LASF4
 790 0048 02       		.uleb128 0x2
 791 0049 04       		.byte	0x4
 792 004a 07       		.byte	0x7
 793 004b 13010000 		.4byte	.LASF5
 794 004f 02       		.uleb128 0x2
 795 0050 08       		.byte	0x8
 796 0051 05       		.byte	0x5
 797 0052 47020000 		.4byte	.LASF6
 798 0056 02       		.uleb128 0x2
 799 0057 08       		.byte	0x8
 800 0058 07       		.byte	0x7
 801 0059 FB010000 		.4byte	.LASF7
 802 005d 03       		.uleb128 0x3
 803 005e 04       		.byte	0x4
 804 005f 05       		.byte	0x5
 805 0060 696E7400 		.ascii	"int\000"
 806 0064 02       		.uleb128 0x2
 807 0065 04       		.byte	0x4
 808 0066 07       		.byte	0x7
 809 0067 42000000 		.4byte	.LASF8
 810 006b 04       		.uleb128 0x4
 811 006c 35010000 		.4byte	.LASF12
 812 0070 02       		.byte	0x2
 813 0071 A1       		.byte	0xa1
 814 0072 2C000000 		.4byte	0x2c
 815 0076 02       		.uleb128 0x2
 816 0077 04       		.byte	0x4
 817 0078 04       		.byte	0x4
 818 0079 7E000000 		.4byte	.LASF9
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 31


 819 007d 02       		.uleb128 0x2
 820 007e 08       		.byte	0x8
 821 007f 04       		.byte	0x4
 822 0080 B3010000 		.4byte	.LASF10
 823 0084 02       		.uleb128 0x2
 824 0085 01       		.byte	0x1
 825 0086 08       		.byte	0x8
 826 0087 CB020000 		.4byte	.LASF11
 827 008b 05       		.uleb128 0x5
 828 008c 0E010000 		.4byte	.LASF13
 829 0090 02       		.byte	0x2
 830 0091 4B01     		.2byte	0x14b
 831 0093 97000000 		.4byte	0x97
 832 0097 06       		.uleb128 0x6
 833 0098 6B000000 		.4byte	0x6b
 834 009c 02       		.uleb128 0x2
 835 009d 04       		.byte	0x4
 836 009e 07       		.byte	0x7
 837 009f 3E020000 		.4byte	.LASF14
 838 00a3 07       		.uleb128 0x7
 839 00a4 25000000 		.4byte	.LASF17
 840 00a8 01       		.byte	0x1
 841 00a9 37       		.byte	0x37
 842 00aa 00000000 		.4byte	.LFB0
 843 00ae 24000000 		.4byte	.LFE0-.LFB0
 844 00b2 01       		.uleb128 0x1
 845 00b3 9C       		.byte	0x9c
 846 00b4 08       		.uleb128 0x8
 847 00b5 CB010000 		.4byte	.LASF20
 848 00b9 01       		.byte	0x1
 849 00ba 54       		.byte	0x54
 850 00bb 00000000 		.4byte	.LFB1
 851 00bf 88000000 		.4byte	.LFE1-.LFB1
 852 00c3 01       		.uleb128 0x1
 853 00c4 9C       		.byte	0x9c
 854 00c5 E6000000 		.4byte	0xe6
 855 00c9 09       		.uleb128 0x9
 856 00ca 43010000 		.4byte	.LASF15
 857 00ce 01       		.byte	0x1
 858 00cf 57       		.byte	0x57
 859 00d0 6B000000 		.4byte	0x6b
 860 00d4 02       		.uleb128 0x2
 861 00d5 91       		.byte	0x91
 862 00d6 6F       		.sleb128 -17
 863 00d7 09       		.uleb128 0x9
 864 00d8 7C020000 		.4byte	.LASF16
 865 00dc 01       		.byte	0x1
 866 00dd 5D       		.byte	0x5d
 867 00de 6B000000 		.4byte	0x6b
 868 00e2 02       		.uleb128 0x2
 869 00e3 91       		.byte	0x91
 870 00e4 6E       		.sleb128 -18
 871 00e5 00       		.byte	0
 872 00e6 0A       		.uleb128 0xa
 873 00e7 FC020000 		.4byte	.LASF18
 874 00eb 01       		.byte	0x1
 875 00ec C7       		.byte	0xc7
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 32


 876 00ed 00000000 		.4byte	.LFB2
 877 00f1 20000000 		.4byte	.LFE2-.LFB2
 878 00f5 01       		.uleb128 0x1
 879 00f6 9C       		.byte	0x9c
 880 00f7 0A       		.uleb128 0xa
 881 00f8 B9020000 		.4byte	.LASF19
 882 00fc 01       		.byte	0x1
 883 00fd E9       		.byte	0xe9
 884 00fe 00000000 		.4byte	.LFB3
 885 0102 1C000000 		.4byte	.LFE3-.LFB3
 886 0106 01       		.uleb128 0x1
 887 0107 9C       		.byte	0x9c
 888 0108 0B       		.uleb128 0xb
 889 0109 A8020000 		.4byte	.LASF21
 890 010d 01       		.byte	0x1
 891 010e 9301     		.2byte	0x193
 892 0110 00000000 		.4byte	.LFB4
 893 0114 20000000 		.4byte	.LFE4-.LFB4
 894 0118 01       		.uleb128 0x1
 895 0119 9C       		.byte	0x9c
 896 011a 2E010000 		.4byte	0x12e
 897 011e 0C       		.uleb128 0xc
 898 011f AB010000 		.4byte	.LASF24
 899 0123 01       		.byte	0x1
 900 0124 9301     		.2byte	0x193
 901 0126 6B000000 		.4byte	0x6b
 902 012a 02       		.uleb128 0x2
 903 012b 91       		.byte	0x91
 904 012c 77       		.sleb128 -9
 905 012d 00       		.byte	0
 906 012e 0D       		.uleb128 0xd
 907 012f 25010000 		.4byte	.LASF30
 908 0133 01       		.byte	0x1
 909 0134 A901     		.2byte	0x1a9
 910 0136 6B000000 		.4byte	0x6b
 911 013a 00000000 		.4byte	.LFB5
 912 013e 1C000000 		.4byte	.LFE5-.LFB5
 913 0142 01       		.uleb128 0x1
 914 0143 9C       		.byte	0x9c
 915 0144 0E       		.uleb128 0xe
 916 0145 10000000 		.4byte	.LASF22
 917 0149 01       		.byte	0x1
 918 014a C501     		.2byte	0x1c5
 919 014c 00000000 		.4byte	.LFB6
 920 0150 1C000000 		.4byte	.LFE6-.LFB6
 921 0154 01       		.uleb128 0x1
 922 0155 9C       		.byte	0x9c
 923 0156 0B       		.uleb128 0xb
 924 0157 19020000 		.4byte	.LASF23
 925 015b 01       		.byte	0x1
 926 015c E201     		.2byte	0x1e2
 927 015e 00000000 		.4byte	.LFB7
 928 0162 20000000 		.4byte	.LFE7-.LFB7
 929 0166 01       		.uleb128 0x1
 930 0167 9C       		.byte	0x9c
 931 0168 7C010000 		.4byte	0x17c
 932 016c 0C       		.uleb128 0xc
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 33


 933 016d 1E000000 		.4byte	.LASF25
 934 0171 01       		.byte	0x1
 935 0172 E201     		.2byte	0x1e2
 936 0174 6B000000 		.4byte	0x6b
 937 0178 02       		.uleb128 0x2
 938 0179 91       		.byte	0x91
 939 017a 77       		.sleb128 -9
 940 017b 00       		.byte	0
 941 017c 0B       		.uleb128 0xb
 942 017d BA010000 		.4byte	.LASF26
 943 0181 01       		.byte	0x1
 944 0182 0402     		.2byte	0x204
 945 0184 00000000 		.4byte	.LFB8
 946 0188 20000000 		.4byte	.LFE8-.LFB8
 947 018c 01       		.uleb128 0x1
 948 018d 9C       		.byte	0x9c
 949 018e A2010000 		.4byte	0x1a2
 950 0192 0C       		.uleb128 0xc
 951 0193 F4020000 		.4byte	.LASF27
 952 0197 01       		.byte	0x1
 953 0198 0402     		.2byte	0x204
 954 019a 6B000000 		.4byte	0x6b
 955 019e 02       		.uleb128 0x2
 956 019f 91       		.byte	0x91
 957 01a0 77       		.sleb128 -9
 958 01a1 00       		.byte	0
 959 01a2 0B       		.uleb128 0xb
 960 01a3 E9010000 		.4byte	.LASF28
 961 01a7 01       		.byte	0x1
 962 01a8 6402     		.2byte	0x264
 963 01aa 00000000 		.4byte	.LFB9
 964 01ae 44000000 		.4byte	.LFE9-.LFB9
 965 01b2 01       		.uleb128 0x1
 966 01b3 9C       		.byte	0x9c
 967 01b4 C8010000 		.4byte	0x1c8
 968 01b8 0C       		.uleb128 0xc
 969 01b9 D4010000 		.4byte	.LASF29
 970 01bd 01       		.byte	0x1
 971 01be 6402     		.2byte	0x264
 972 01c0 6B000000 		.4byte	0x6b
 973 01c4 02       		.uleb128 0x2
 974 01c5 91       		.byte	0x91
 975 01c6 77       		.sleb128 -9
 976 01c7 00       		.byte	0
 977 01c8 0D       		.uleb128 0xd
 978 01c9 1E030000 		.4byte	.LASF31
 979 01cd 01       		.byte	0x1
 980 01ce 8802     		.2byte	0x288
 981 01d0 6B000000 		.4byte	0x6b
 982 01d4 00000000 		.4byte	.LFB10
 983 01d8 1C000000 		.4byte	.LFE10-.LFB10
 984 01dc 01       		.uleb128 0x1
 985 01dd 9C       		.byte	0x9c
 986 01de 0B       		.uleb128 0xb
 987 01df 29020000 		.4byte	.LASF32
 988 01e3 01       		.byte	0x1
 989 01e4 AC02     		.2byte	0x2ac
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 34


 990 01e6 00000000 		.4byte	.LFB11
 991 01ea 20000000 		.4byte	.LFE11-.LFB11
 992 01ee 01       		.uleb128 0x1
 993 01ef 9C       		.byte	0x9c
 994 01f0 04020000 		.4byte	0x204
 995 01f4 0C       		.uleb128 0xc
 996 01f5 55020000 		.4byte	.LASF33
 997 01f9 01       		.byte	0x1
 998 01fa AC02     		.2byte	0x2ac
 999 01fc 6B000000 		.4byte	0x6b
 1000 0200 02       		.uleb128 0x2
 1001 0201 91       		.byte	0x91
 1002 0202 77       		.sleb128 -9
 1003 0203 00       		.byte	0
 1004 0204 0D       		.uleb128 0xd
 1005 0205 07030000 		.4byte	.LASF34
 1006 0209 01       		.byte	0x1
 1007 020a C702     		.2byte	0x2c7
 1008 020c 6B000000 		.4byte	0x6b
 1009 0210 00000000 		.4byte	.LFB12
 1010 0214 14000000 		.4byte	.LFE12-.LFB12
 1011 0218 01       		.uleb128 0x1
 1012 0219 9C       		.byte	0x9c
 1013 021a 0F       		.uleb128 0xf
 1014 021b D0020000 		.4byte	.LASF44
 1015 021f 01       		.byte	0x1
 1016 0220 E102     		.2byte	0x2e1
 1017 0222 6B000000 		.4byte	0x6b
 1018 0226 00000000 		.4byte	.LFB13
 1019 022a 20000000 		.4byte	.LFE13-.LFB13
 1020 022e 01       		.uleb128 0x1
 1021 022f 9C       		.byte	0x9c
 1022 0230 44020000 		.4byte	0x244
 1023 0234 10       		.uleb128 0x10
 1024 0235 12020000 		.4byte	.LASF35
 1025 0239 01       		.byte	0x1
 1026 023a E302     		.2byte	0x2e3
 1027 023c 6B000000 		.4byte	0x6b
 1028 0240 02       		.uleb128 0x2
 1029 0241 91       		.byte	0x91
 1030 0242 77       		.sleb128 -9
 1031 0243 00       		.byte	0
 1032 0244 0B       		.uleb128 0xb
 1033 0245 63020000 		.4byte	.LASF36
 1034 0249 01       		.byte	0x1
 1035 024a FD02     		.2byte	0x2fd
 1036 024c 00000000 		.4byte	.LFB14
 1037 0250 20000000 		.4byte	.LFE14-.LFB14
 1038 0254 01       		.uleb128 0x1
 1039 0255 9C       		.byte	0x9c
 1040 0256 6A020000 		.4byte	0x26a
 1041 025a 0C       		.uleb128 0xc
 1042 025b 3B010000 		.4byte	.LASF37
 1043 025f 01       		.byte	0x1
 1044 0260 FD02     		.2byte	0x2fd
 1045 0262 6B000000 		.4byte	0x6b
 1046 0266 02       		.uleb128 0x2
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 35


 1047 0267 91       		.byte	0x91
 1048 0268 77       		.sleb128 -9
 1049 0269 00       		.byte	0
 1050 026a 0D       		.uleb128 0xd
 1051 026b 4F000000 		.4byte	.LASF38
 1052 026f 01       		.byte	0x1
 1053 0270 1603     		.2byte	0x316
 1054 0272 6B000000 		.4byte	0x6b
 1055 0276 00000000 		.4byte	.LFB15
 1056 027a 14000000 		.4byte	.LFE15-.LFB15
 1057 027e 01       		.uleb128 0x1
 1058 027f 9C       		.byte	0x9c
 1059 0280 0D       		.uleb128 0xd
 1060 0281 00000000 		.4byte	.LASF39
 1061 0285 01       		.byte	0x1
 1062 0286 3003     		.2byte	0x330
 1063 0288 6B000000 		.4byte	0x6b
 1064 028c 00000000 		.4byte	.LFB16
 1065 0290 14000000 		.4byte	.LFE16-.LFB16
 1066 0294 01       		.uleb128 0x1
 1067 0295 9C       		.byte	0x9c
 1068 0296 0D       		.uleb128 0xd
 1069 0297 8F020000 		.4byte	.LASF40
 1070 029b 01       		.byte	0x1
 1071 029c 7403     		.2byte	0x374
 1072 029e 6B000000 		.4byte	0x6b
 1073 02a2 00000000 		.4byte	.LFB17
 1074 02a6 14000000 		.4byte	.LFE17-.LFB17
 1075 02aa 01       		.uleb128 0x1
 1076 02ab 9C       		.byte	0x9c
 1077 02ac 11       		.uleb128 0x11
 1078 02ad DD010000 		.4byte	.LASF45
 1079 02b1 01       		.byte	0x1
 1080 02b2 20       		.byte	0x20
 1081 02b3 6B000000 		.4byte	0x6b
 1082 02b7 05       		.uleb128 0x5
 1083 02b8 03       		.byte	0x3
 1084 02b9 00000000 		.4byte	PWM_initVar
 1085 02bd 00       		.byte	0
 1086              		.section	.debug_abbrev,"",%progbits
 1087              	.Ldebug_abbrev0:
 1088 0000 01       		.uleb128 0x1
 1089 0001 11       		.uleb128 0x11
 1090 0002 01       		.byte	0x1
 1091 0003 25       		.uleb128 0x25
 1092 0004 0E       		.uleb128 0xe
 1093 0005 13       		.uleb128 0x13
 1094 0006 0B       		.uleb128 0xb
 1095 0007 03       		.uleb128 0x3
 1096 0008 0E       		.uleb128 0xe
 1097 0009 1B       		.uleb128 0x1b
 1098 000a 0E       		.uleb128 0xe
 1099 000b 55       		.uleb128 0x55
 1100 000c 17       		.uleb128 0x17
 1101 000d 11       		.uleb128 0x11
 1102 000e 01       		.uleb128 0x1
 1103 000f 10       		.uleb128 0x10
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 36


 1104 0010 17       		.uleb128 0x17
 1105 0011 00       		.byte	0
 1106 0012 00       		.byte	0
 1107 0013 02       		.uleb128 0x2
 1108 0014 24       		.uleb128 0x24
 1109 0015 00       		.byte	0
 1110 0016 0B       		.uleb128 0xb
 1111 0017 0B       		.uleb128 0xb
 1112 0018 3E       		.uleb128 0x3e
 1113 0019 0B       		.uleb128 0xb
 1114 001a 03       		.uleb128 0x3
 1115 001b 0E       		.uleb128 0xe
 1116 001c 00       		.byte	0
 1117 001d 00       		.byte	0
 1118 001e 03       		.uleb128 0x3
 1119 001f 24       		.uleb128 0x24
 1120 0020 00       		.byte	0
 1121 0021 0B       		.uleb128 0xb
 1122 0022 0B       		.uleb128 0xb
 1123 0023 3E       		.uleb128 0x3e
 1124 0024 0B       		.uleb128 0xb
 1125 0025 03       		.uleb128 0x3
 1126 0026 08       		.uleb128 0x8
 1127 0027 00       		.byte	0
 1128 0028 00       		.byte	0
 1129 0029 04       		.uleb128 0x4
 1130 002a 16       		.uleb128 0x16
 1131 002b 00       		.byte	0
 1132 002c 03       		.uleb128 0x3
 1133 002d 0E       		.uleb128 0xe
 1134 002e 3A       		.uleb128 0x3a
 1135 002f 0B       		.uleb128 0xb
 1136 0030 3B       		.uleb128 0x3b
 1137 0031 0B       		.uleb128 0xb
 1138 0032 49       		.uleb128 0x49
 1139 0033 13       		.uleb128 0x13
 1140 0034 00       		.byte	0
 1141 0035 00       		.byte	0
 1142 0036 05       		.uleb128 0x5
 1143 0037 16       		.uleb128 0x16
 1144 0038 00       		.byte	0
 1145 0039 03       		.uleb128 0x3
 1146 003a 0E       		.uleb128 0xe
 1147 003b 3A       		.uleb128 0x3a
 1148 003c 0B       		.uleb128 0xb
 1149 003d 3B       		.uleb128 0x3b
 1150 003e 05       		.uleb128 0x5
 1151 003f 49       		.uleb128 0x49
 1152 0040 13       		.uleb128 0x13
 1153 0041 00       		.byte	0
 1154 0042 00       		.byte	0
 1155 0043 06       		.uleb128 0x6
 1156 0044 35       		.uleb128 0x35
 1157 0045 00       		.byte	0
 1158 0046 49       		.uleb128 0x49
 1159 0047 13       		.uleb128 0x13
 1160 0048 00       		.byte	0
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 37


 1161 0049 00       		.byte	0
 1162 004a 07       		.uleb128 0x7
 1163 004b 2E       		.uleb128 0x2e
 1164 004c 00       		.byte	0
 1165 004d 3F       		.uleb128 0x3f
 1166 004e 19       		.uleb128 0x19
 1167 004f 03       		.uleb128 0x3
 1168 0050 0E       		.uleb128 0xe
 1169 0051 3A       		.uleb128 0x3a
 1170 0052 0B       		.uleb128 0xb
 1171 0053 3B       		.uleb128 0x3b
 1172 0054 0B       		.uleb128 0xb
 1173 0055 27       		.uleb128 0x27
 1174 0056 19       		.uleb128 0x19
 1175 0057 11       		.uleb128 0x11
 1176 0058 01       		.uleb128 0x1
 1177 0059 12       		.uleb128 0x12
 1178 005a 06       		.uleb128 0x6
 1179 005b 40       		.uleb128 0x40
 1180 005c 18       		.uleb128 0x18
 1181 005d 9642     		.uleb128 0x2116
 1182 005f 19       		.uleb128 0x19
 1183 0060 00       		.byte	0
 1184 0061 00       		.byte	0
 1185 0062 08       		.uleb128 0x8
 1186 0063 2E       		.uleb128 0x2e
 1187 0064 01       		.byte	0x1
 1188 0065 3F       		.uleb128 0x3f
 1189 0066 19       		.uleb128 0x19
 1190 0067 03       		.uleb128 0x3
 1191 0068 0E       		.uleb128 0xe
 1192 0069 3A       		.uleb128 0x3a
 1193 006a 0B       		.uleb128 0xb
 1194 006b 3B       		.uleb128 0x3b
 1195 006c 0B       		.uleb128 0xb
 1196 006d 27       		.uleb128 0x27
 1197 006e 19       		.uleb128 0x19
 1198 006f 11       		.uleb128 0x11
 1199 0070 01       		.uleb128 0x1
 1200 0071 12       		.uleb128 0x12
 1201 0072 06       		.uleb128 0x6
 1202 0073 40       		.uleb128 0x40
 1203 0074 18       		.uleb128 0x18
 1204 0075 9642     		.uleb128 0x2116
 1205 0077 19       		.uleb128 0x19
 1206 0078 01       		.uleb128 0x1
 1207 0079 13       		.uleb128 0x13
 1208 007a 00       		.byte	0
 1209 007b 00       		.byte	0
 1210 007c 09       		.uleb128 0x9
 1211 007d 34       		.uleb128 0x34
 1212 007e 00       		.byte	0
 1213 007f 03       		.uleb128 0x3
 1214 0080 0E       		.uleb128 0xe
 1215 0081 3A       		.uleb128 0x3a
 1216 0082 0B       		.uleb128 0xb
 1217 0083 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 38


 1218 0084 0B       		.uleb128 0xb
 1219 0085 49       		.uleb128 0x49
 1220 0086 13       		.uleb128 0x13
 1221 0087 02       		.uleb128 0x2
 1222 0088 18       		.uleb128 0x18
 1223 0089 00       		.byte	0
 1224 008a 00       		.byte	0
 1225 008b 0A       		.uleb128 0xa
 1226 008c 2E       		.uleb128 0x2e
 1227 008d 00       		.byte	0
 1228 008e 3F       		.uleb128 0x3f
 1229 008f 19       		.uleb128 0x19
 1230 0090 03       		.uleb128 0x3
 1231 0091 0E       		.uleb128 0xe
 1232 0092 3A       		.uleb128 0x3a
 1233 0093 0B       		.uleb128 0xb
 1234 0094 3B       		.uleb128 0x3b
 1235 0095 0B       		.uleb128 0xb
 1236 0096 27       		.uleb128 0x27
 1237 0097 19       		.uleb128 0x19
 1238 0098 11       		.uleb128 0x11
 1239 0099 01       		.uleb128 0x1
 1240 009a 12       		.uleb128 0x12
 1241 009b 06       		.uleb128 0x6
 1242 009c 40       		.uleb128 0x40
 1243 009d 18       		.uleb128 0x18
 1244 009e 9742     		.uleb128 0x2117
 1245 00a0 19       		.uleb128 0x19
 1246 00a1 00       		.byte	0
 1247 00a2 00       		.byte	0
 1248 00a3 0B       		.uleb128 0xb
 1249 00a4 2E       		.uleb128 0x2e
 1250 00a5 01       		.byte	0x1
 1251 00a6 3F       		.uleb128 0x3f
 1252 00a7 19       		.uleb128 0x19
 1253 00a8 03       		.uleb128 0x3
 1254 00a9 0E       		.uleb128 0xe
 1255 00aa 3A       		.uleb128 0x3a
 1256 00ab 0B       		.uleb128 0xb
 1257 00ac 3B       		.uleb128 0x3b
 1258 00ad 05       		.uleb128 0x5
 1259 00ae 27       		.uleb128 0x27
 1260 00af 19       		.uleb128 0x19
 1261 00b0 11       		.uleb128 0x11
 1262 00b1 01       		.uleb128 0x1
 1263 00b2 12       		.uleb128 0x12
 1264 00b3 06       		.uleb128 0x6
 1265 00b4 40       		.uleb128 0x40
 1266 00b5 18       		.uleb128 0x18
 1267 00b6 9742     		.uleb128 0x2117
 1268 00b8 19       		.uleb128 0x19
 1269 00b9 01       		.uleb128 0x1
 1270 00ba 13       		.uleb128 0x13
 1271 00bb 00       		.byte	0
 1272 00bc 00       		.byte	0
 1273 00bd 0C       		.uleb128 0xc
 1274 00be 05       		.uleb128 0x5
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 39


 1275 00bf 00       		.byte	0
 1276 00c0 03       		.uleb128 0x3
 1277 00c1 0E       		.uleb128 0xe
 1278 00c2 3A       		.uleb128 0x3a
 1279 00c3 0B       		.uleb128 0xb
 1280 00c4 3B       		.uleb128 0x3b
 1281 00c5 05       		.uleb128 0x5
 1282 00c6 49       		.uleb128 0x49
 1283 00c7 13       		.uleb128 0x13
 1284 00c8 02       		.uleb128 0x2
 1285 00c9 18       		.uleb128 0x18
 1286 00ca 00       		.byte	0
 1287 00cb 00       		.byte	0
 1288 00cc 0D       		.uleb128 0xd
 1289 00cd 2E       		.uleb128 0x2e
 1290 00ce 00       		.byte	0
 1291 00cf 3F       		.uleb128 0x3f
 1292 00d0 19       		.uleb128 0x19
 1293 00d1 03       		.uleb128 0x3
 1294 00d2 0E       		.uleb128 0xe
 1295 00d3 3A       		.uleb128 0x3a
 1296 00d4 0B       		.uleb128 0xb
 1297 00d5 3B       		.uleb128 0x3b
 1298 00d6 05       		.uleb128 0x5
 1299 00d7 27       		.uleb128 0x27
 1300 00d8 19       		.uleb128 0x19
 1301 00d9 49       		.uleb128 0x49
 1302 00da 13       		.uleb128 0x13
 1303 00db 11       		.uleb128 0x11
 1304 00dc 01       		.uleb128 0x1
 1305 00dd 12       		.uleb128 0x12
 1306 00de 06       		.uleb128 0x6
 1307 00df 40       		.uleb128 0x40
 1308 00e0 18       		.uleb128 0x18
 1309 00e1 9742     		.uleb128 0x2117
 1310 00e3 19       		.uleb128 0x19
 1311 00e4 00       		.byte	0
 1312 00e5 00       		.byte	0
 1313 00e6 0E       		.uleb128 0xe
 1314 00e7 2E       		.uleb128 0x2e
 1315 00e8 00       		.byte	0
 1316 00e9 3F       		.uleb128 0x3f
 1317 00ea 19       		.uleb128 0x19
 1318 00eb 03       		.uleb128 0x3
 1319 00ec 0E       		.uleb128 0xe
 1320 00ed 3A       		.uleb128 0x3a
 1321 00ee 0B       		.uleb128 0xb
 1322 00ef 3B       		.uleb128 0x3b
 1323 00f0 05       		.uleb128 0x5
 1324 00f1 27       		.uleb128 0x27
 1325 00f2 19       		.uleb128 0x19
 1326 00f3 11       		.uleb128 0x11
 1327 00f4 01       		.uleb128 0x1
 1328 00f5 12       		.uleb128 0x12
 1329 00f6 06       		.uleb128 0x6
 1330 00f7 40       		.uleb128 0x40
 1331 00f8 18       		.uleb128 0x18
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 40


 1332 00f9 9642     		.uleb128 0x2116
 1333 00fb 19       		.uleb128 0x19
 1334 00fc 00       		.byte	0
 1335 00fd 00       		.byte	0
 1336 00fe 0F       		.uleb128 0xf
 1337 00ff 2E       		.uleb128 0x2e
 1338 0100 01       		.byte	0x1
 1339 0101 3F       		.uleb128 0x3f
 1340 0102 19       		.uleb128 0x19
 1341 0103 03       		.uleb128 0x3
 1342 0104 0E       		.uleb128 0xe
 1343 0105 3A       		.uleb128 0x3a
 1344 0106 0B       		.uleb128 0xb
 1345 0107 3B       		.uleb128 0x3b
 1346 0108 05       		.uleb128 0x5
 1347 0109 27       		.uleb128 0x27
 1348 010a 19       		.uleb128 0x19
 1349 010b 49       		.uleb128 0x49
 1350 010c 13       		.uleb128 0x13
 1351 010d 11       		.uleb128 0x11
 1352 010e 01       		.uleb128 0x1
 1353 010f 12       		.uleb128 0x12
 1354 0110 06       		.uleb128 0x6
 1355 0111 40       		.uleb128 0x40
 1356 0112 18       		.uleb128 0x18
 1357 0113 9742     		.uleb128 0x2117
 1358 0115 19       		.uleb128 0x19
 1359 0116 01       		.uleb128 0x1
 1360 0117 13       		.uleb128 0x13
 1361 0118 00       		.byte	0
 1362 0119 00       		.byte	0
 1363 011a 10       		.uleb128 0x10
 1364 011b 34       		.uleb128 0x34
 1365 011c 00       		.byte	0
 1366 011d 03       		.uleb128 0x3
 1367 011e 0E       		.uleb128 0xe
 1368 011f 3A       		.uleb128 0x3a
 1369 0120 0B       		.uleb128 0xb
 1370 0121 3B       		.uleb128 0x3b
 1371 0122 05       		.uleb128 0x5
 1372 0123 49       		.uleb128 0x49
 1373 0124 13       		.uleb128 0x13
 1374 0125 02       		.uleb128 0x2
 1375 0126 18       		.uleb128 0x18
 1376 0127 00       		.byte	0
 1377 0128 00       		.byte	0
 1378 0129 11       		.uleb128 0x11
 1379 012a 34       		.uleb128 0x34
 1380 012b 00       		.byte	0
 1381 012c 03       		.uleb128 0x3
 1382 012d 0E       		.uleb128 0xe
 1383 012e 3A       		.uleb128 0x3a
 1384 012f 0B       		.uleb128 0xb
 1385 0130 3B       		.uleb128 0x3b
 1386 0131 0B       		.uleb128 0xb
 1387 0132 49       		.uleb128 0x49
 1388 0133 13       		.uleb128 0x13
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 41


 1389 0134 3F       		.uleb128 0x3f
 1390 0135 19       		.uleb128 0x19
 1391 0136 02       		.uleb128 0x2
 1392 0137 18       		.uleb128 0x18
 1393 0138 00       		.byte	0
 1394 0139 00       		.byte	0
 1395 013a 00       		.byte	0
 1396              		.section	.debug_aranges,"",%progbits
 1397 0000 A4000000 		.4byte	0xa4
 1398 0004 0200     		.2byte	0x2
 1399 0006 00000000 		.4byte	.Ldebug_info0
 1400 000a 04       		.byte	0x4
 1401 000b 00       		.byte	0
 1402 000c 0000     		.2byte	0
 1403 000e 0000     		.2byte	0
 1404 0010 00000000 		.4byte	.LFB0
 1405 0014 24000000 		.4byte	.LFE0-.LFB0
 1406 0018 00000000 		.4byte	.LFB1
 1407 001c 88000000 		.4byte	.LFE1-.LFB1
 1408 0020 00000000 		.4byte	.LFB2
 1409 0024 20000000 		.4byte	.LFE2-.LFB2
 1410 0028 00000000 		.4byte	.LFB3
 1411 002c 1C000000 		.4byte	.LFE3-.LFB3
 1412 0030 00000000 		.4byte	.LFB4
 1413 0034 20000000 		.4byte	.LFE4-.LFB4
 1414 0038 00000000 		.4byte	.LFB5
 1415 003c 1C000000 		.4byte	.LFE5-.LFB5
 1416 0040 00000000 		.4byte	.LFB6
 1417 0044 1C000000 		.4byte	.LFE6-.LFB6
 1418 0048 00000000 		.4byte	.LFB7
 1419 004c 20000000 		.4byte	.LFE7-.LFB7
 1420 0050 00000000 		.4byte	.LFB8
 1421 0054 20000000 		.4byte	.LFE8-.LFB8
 1422 0058 00000000 		.4byte	.LFB9
 1423 005c 44000000 		.4byte	.LFE9-.LFB9
 1424 0060 00000000 		.4byte	.LFB10
 1425 0064 1C000000 		.4byte	.LFE10-.LFB10
 1426 0068 00000000 		.4byte	.LFB11
 1427 006c 20000000 		.4byte	.LFE11-.LFB11
 1428 0070 00000000 		.4byte	.LFB12
 1429 0074 14000000 		.4byte	.LFE12-.LFB12
 1430 0078 00000000 		.4byte	.LFB13
 1431 007c 20000000 		.4byte	.LFE13-.LFB13
 1432 0080 00000000 		.4byte	.LFB14
 1433 0084 20000000 		.4byte	.LFE14-.LFB14
 1434 0088 00000000 		.4byte	.LFB15
 1435 008c 14000000 		.4byte	.LFE15-.LFB15
 1436 0090 00000000 		.4byte	.LFB16
 1437 0094 14000000 		.4byte	.LFE16-.LFB16
 1438 0098 00000000 		.4byte	.LFB17
 1439 009c 14000000 		.4byte	.LFE17-.LFB17
 1440 00a0 00000000 		.4byte	0
 1441 00a4 00000000 		.4byte	0
 1442              		.section	.debug_ranges,"",%progbits
 1443              	.Ldebug_ranges0:
 1444 0000 00000000 		.4byte	.LFB0
 1445 0004 24000000 		.4byte	.LFE0
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 42


 1446 0008 00000000 		.4byte	.LFB1
 1447 000c 88000000 		.4byte	.LFE1
 1448 0010 00000000 		.4byte	.LFB2
 1449 0014 20000000 		.4byte	.LFE2
 1450 0018 00000000 		.4byte	.LFB3
 1451 001c 1C000000 		.4byte	.LFE3
 1452 0020 00000000 		.4byte	.LFB4
 1453 0024 20000000 		.4byte	.LFE4
 1454 0028 00000000 		.4byte	.LFB5
 1455 002c 1C000000 		.4byte	.LFE5
 1456 0030 00000000 		.4byte	.LFB6
 1457 0034 1C000000 		.4byte	.LFE6
 1458 0038 00000000 		.4byte	.LFB7
 1459 003c 20000000 		.4byte	.LFE7
 1460 0040 00000000 		.4byte	.LFB8
 1461 0044 20000000 		.4byte	.LFE8
 1462 0048 00000000 		.4byte	.LFB9
 1463 004c 44000000 		.4byte	.LFE9
 1464 0050 00000000 		.4byte	.LFB10
 1465 0054 1C000000 		.4byte	.LFE10
 1466 0058 00000000 		.4byte	.LFB11
 1467 005c 20000000 		.4byte	.LFE11
 1468 0060 00000000 		.4byte	.LFB12
 1469 0064 14000000 		.4byte	.LFE12
 1470 0068 00000000 		.4byte	.LFB13
 1471 006c 20000000 		.4byte	.LFE13
 1472 0070 00000000 		.4byte	.LFB14
 1473 0074 20000000 		.4byte	.LFE14
 1474 0078 00000000 		.4byte	.LFB15
 1475 007c 14000000 		.4byte	.LFE15
 1476 0080 00000000 		.4byte	.LFB16
 1477 0084 14000000 		.4byte	.LFE16
 1478 0088 00000000 		.4byte	.LFB17
 1479 008c 14000000 		.4byte	.LFE17
 1480 0090 00000000 		.4byte	0
 1481 0094 00000000 		.4byte	0
 1482              		.section	.debug_line,"",%progbits
 1483              	.Ldebug_line0:
 1484 0000 AE010000 		.section	.debug_str,"MS",%progbits,1
 1484      02004200 
 1484      00000201 
 1484      FB0E0D00 
 1484      01010101 
 1485              	.LASF39:
 1486 0000 50574D5F 		.ascii	"PWM_ReadCompare\000"
 1486      52656164 
 1486      436F6D70 
 1486      61726500 
 1487              	.LASF22:
 1488 0010 50574D5F 		.ascii	"PWM_ClearFIFO\000"
 1488      436C6561 
 1488      72464946 
 1488      4F00
 1489              	.LASF25:
 1490 001e 70657269 		.ascii	"period\000"
 1490      6F6400
 1491              	.LASF17:
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 43


 1492 0025 50574D5F 		.ascii	"PWM_Start\000"
 1492      53746172 
 1492      7400
 1493              	.LASF3:
 1494 002f 73686F72 		.ascii	"short unsigned int\000"
 1494      7420756E 
 1494      7369676E 
 1494      65642069 
 1494      6E7400
 1495              	.LASF8:
 1496 0042 756E7369 		.ascii	"unsigned int\000"
 1496      676E6564 
 1496      20696E74 
 1496      00
 1497              	.LASF38:
 1498 004f 50574D5F 		.ascii	"PWM_ReadCapture\000"
 1498      52656164 
 1498      43617074 
 1498      75726500 
 1499              	.LASF42:
 1500 005f 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\PWM.c\000"
 1500      6E657261 
 1500      7465645F 
 1500      536F7572 
 1500      63655C50 
 1501              	.LASF9:
 1502 007e 666C6F61 		.ascii	"float\000"
 1502      7400
 1503              	.LASF41:
 1504 0084 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 1504      4320342E 
 1504      382E3420 
 1504      32303134 
 1504      30353236 
 1505 00b7 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 1505      20726576 
 1505      6973696F 
 1505      6E203231 
 1505      31333538 
 1506 00ea 30202D66 		.ascii	"0 -ffunction-sections\000"
 1506      66756E63 
 1506      74696F6E 
 1506      2D736563 
 1506      74696F6E 
 1507              	.LASF1:
 1508 0100 756E7369 		.ascii	"unsigned char\000"
 1508      676E6564 
 1508      20636861 
 1508      7200
 1509              	.LASF13:
 1510 010e 72656738 		.ascii	"reg8\000"
 1510      00
 1511              	.LASF5:
 1512 0113 6C6F6E67 		.ascii	"long unsigned int\000"
 1512      20756E73 
 1512      69676E65 
 1512      6420696E 
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 44


 1512      7400
 1513              	.LASF30:
 1514 0125 50574D5F 		.ascii	"PWM_ReadCounter\000"
 1514      52656164 
 1514      436F756E 
 1514      74657200 
 1515              	.LASF12:
 1516 0135 75696E74 		.ascii	"uint8\000"
 1516      3800
 1517              	.LASF37:
 1518 013b 636F6E74 		.ascii	"control\000"
 1518      726F6C00 
 1519              	.LASF15:
 1520 0143 6374726C 		.ascii	"ctrl\000"
 1520      00
 1521              	.LASF43:
 1522 0148 433A5C55 		.ascii	"C:\\Users\\Jeppe\\Google Drev\\E4PRJ4 gDrive\\Vugge"
 1522      73657273 
 1522      5C4A6570 
 1522      70655C47 
 1522      6F6F676C 
 1523 0176 73797374 		.ascii	"system arbejdsdokumenter\\VuggeSinus\\VuggeSinus.cy"
 1523      656D2061 
 1523      7262656A 
 1523      6473646F 
 1523      6B756D65 
 1524 01a7 64736E00 		.ascii	"dsn\000"
 1525              	.LASF24:
 1526 01ab 636F756E 		.ascii	"counter\000"
 1526      74657200 
 1527              	.LASF10:
 1528 01b3 646F7562 		.ascii	"double\000"
 1528      6C6500
 1529              	.LASF26:
 1530 01ba 50574D5F 		.ascii	"PWM_WriteCompare\000"
 1530      57726974 
 1530      65436F6D 
 1530      70617265 
 1530      00
 1531              	.LASF20:
 1532 01cb 50574D5F 		.ascii	"PWM_Init\000"
 1532      496E6974 
 1532      00
 1533              	.LASF29:
 1534 01d4 64656164 		.ascii	"deadtime\000"
 1534      74696D65 
 1534      00
 1535              	.LASF45:
 1536 01dd 50574D5F 		.ascii	"PWM_initVar\000"
 1536      696E6974 
 1536      56617200 
 1537              	.LASF28:
 1538 01e9 50574D5F 		.ascii	"PWM_WriteDeadTime\000"
 1538      57726974 
 1538      65446561 
 1538      6454696D 
 1538      6500
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 45


 1539              	.LASF7:
 1540 01fb 6C6F6E67 		.ascii	"long long unsigned int\000"
 1540      206C6F6E 
 1540      6720756E 
 1540      7369676E 
 1540      65642069 
 1541              	.LASF35:
 1542 0212 72657375 		.ascii	"result\000"
 1542      6C7400
 1543              	.LASF23:
 1544 0219 50574D5F 		.ascii	"PWM_WritePeriod\000"
 1544      57726974 
 1544      65506572 
 1544      696F6400 
 1545              	.LASF32:
 1546 0229 50574D5F 		.ascii	"PWM_SetInterruptMode\000"
 1546      53657449 
 1546      6E746572 
 1546      72757074 
 1546      4D6F6465 
 1547              	.LASF14:
 1548 023e 73697A65 		.ascii	"sizetype\000"
 1548      74797065 
 1548      00
 1549              	.LASF6:
 1550 0247 6C6F6E67 		.ascii	"long long int\000"
 1550      206C6F6E 
 1550      6720696E 
 1550      7400
 1551              	.LASF33:
 1552 0255 696E7465 		.ascii	"interruptMode\000"
 1552      72727570 
 1552      744D6F64 
 1552      6500
 1553              	.LASF36:
 1554 0263 50574D5F 		.ascii	"PWM_WriteControlRegister\000"
 1554      57726974 
 1554      65436F6E 
 1554      74726F6C 
 1554      52656769 
 1555              	.LASF16:
 1556 027c 50574D5F 		.ascii	"PWM_interruptState\000"
 1556      696E7465 
 1556      72727570 
 1556      74537461 
 1556      746500
 1557              	.LASF40:
 1558 028f 50574D5F 		.ascii	"PWM_ReadPeriod\000"
 1558      52656164 
 1558      50657269 
 1558      6F6400
 1559              	.LASF2:
 1560 029e 73686F72 		.ascii	"short int\000"
 1560      7420696E 
 1560      7400
 1561              	.LASF21:
 1562 02a8 50574D5F 		.ascii	"PWM_WriteCounter\000"
ARM GAS  C:\Users\Jeppe\AppData\Local\Temp\ccRM8cXh.s 			page 46


 1562      57726974 
 1562      65436F75 
 1562      6E746572 
 1562      00
 1563              	.LASF19:
 1564 02b9 50574D5F 		.ascii	"PWM_Stop\000"
 1564      53746F70 
 1564      00
 1565              	.LASF4:
 1566 02c2 6C6F6E67 		.ascii	"long int\000"
 1566      20696E74 
 1566      00
 1567              	.LASF11:
 1568 02cb 63686172 		.ascii	"char\000"
 1568      00
 1569              	.LASF44:
 1570 02d0 50574D5F 		.ascii	"PWM_ReadControlRegister\000"
 1570      52656164 
 1570      436F6E74 
 1570      726F6C52 
 1570      65676973 
 1571              	.LASF0:
 1572 02e8 7369676E 		.ascii	"signed char\000"
 1572      65642063 
 1572      68617200 
 1573              	.LASF27:
 1574 02f4 636F6D70 		.ascii	"compare\000"
 1574      61726500 
 1575              	.LASF18:
 1576 02fc 50574D5F 		.ascii	"PWM_Enable\000"
 1576      456E6162 
 1576      6C6500
 1577              	.LASF34:
 1578 0307 50574D5F 		.ascii	"PWM_ReadStatusRegister\000"
 1578      52656164 
 1578      53746174 
 1578      75735265 
 1578      67697374 
 1579              	.LASF31:
 1580 031e 50574D5F 		.ascii	"PWM_ReadDeadTime\000"
 1580      52656164 
 1580      44656164 
 1580      54696D65 
 1580      00
 1581              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
